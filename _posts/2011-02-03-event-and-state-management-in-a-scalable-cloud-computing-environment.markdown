---

title: Event and state management in a scalable cloud computing environment
abstract: A scalable cloud infrastructure serves two or more customers, where each customer is associated with at least one unit of virtual resources. The virtual resources are established by apportioning physical resources in the cloud infrastructure that are partitioned into pods within one or more zones in a scalable manner. Additionally, the cloud infrastructure establishes one or more management server clusters each comprising one or more management servers. The two or more customers create a number of virtual machines within pods in one or more zones. As customers interact primarily with the management server cluster to manage their virtual machine, a state and event handling method is devised to centralize the management of a potentially vast number of customer and supporting system virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856319&OS=08856319&RS=08856319
owner: Citrix Systems, Inc.
number: 08856319
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20110203
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Patent Application No. 61 301 168 filed on Feb. 3 2010 and incorporated by reference herein.

This disclosure generally relates to cloud computing and more particularly to enabling infrastructure information technology services including computing storage and networking services to be provisioned on demand and delivered over the Internet in a scalable manner.

Service providers and enterprises have traditionally relied on large local installations of commodity data center hardware including computing storage and networking devices to provide information technology services and applications to their users. The advent of computing services that enable applications to run in the cloud or on remote data centers that provision computing storage and networking services to applications has left many service providers and enterprises with a large inventory of unused commodity data center hardware.

A cloud infrastructure provides on demand computing resources to a customer whether an individual or an enterprise of the cloud operator through virtualization. The customer typically is physically remote from the computing resource and is agnostic to the location of the physical resources that support the computing resources. In a virtualized cloud infrastructure the computing resource generally comprises a virtual machine characterized by some amount of processor memory storage networking capability or capacity. Virtualization allows the physical resources support a large number of computing resources often well beyond the limited number of actual physical devices. Physical resources in the cloud infrastructure are shared amongst the different customers of the cloud infrastructure. Each customer gets the illusion of operating a physically distinct computing resource.

Traditional virtualization infrastructure is built on shared storage and shared Layer 2 Data Link networking. These requirements severely limit scalability of conventional cloud systems. In shared storage the physical disks may be physically separate from the computing server. These disks are typically controlled by a dedicated computer known as a storage controller or storage server. The storage controller provides access to the physical server via network protocols such as NFS and iSCSI. The virtual machines therefore access their storage over the network but in a transparent fashion such that their storage appears to be locally attached. Each storage server provides storage to multiple physical servers. The virtual machines access their virtual disks over the network via a hypervisor deployed on the physical servers hosting the virtual machines. The hypervisor is responsible for managing the virtual machines access to the storage servers.

When the storage is networked in such a fashion it may provide many advantages to the cloud operator. However a typical infrastructure cloud is characterized by massive scale with hundreds or thousands of customers operating thousands of virtual machines simultaneously with each customer getting the illusion of operating physically distinct computers. To support such scale the operator needs to deploy hundreds of physical servers and the networking elements and storage to support these physical servers.

While advantageous as outlined above commercially available storage servers are not the ideal solution. The storage servers may not scale sufficiently to support such deployments due to architectural limitations. They may be prohibitively expensive or represent more capital outlay than warranted by the initial anticipated demand for the service. They may present single points of failure or increased cost due to deployment of redundant elements. Insurmountable performance bottlenecks may be present for example due to the limits of networking speed. Expensive large centralized storage may require long term technology and vendor lock in detrimental to the competitiveness of the cloud operator.

The networking elements may provide a similar challenge in large scale cloud deployments. Typically the network between the physical servers is provided by switched Ethernet since it provides performance at optimal price points. However interconnecting all physical servers using Layer 2 switching has a number of drawbacks.

First each physical server uses broadcasts and multicasts to discover services and advertise services on the network. As the number of physical servers increases to accommodate a growing number of virtual machines the amount of broadcast traffic scales accordingly. Broadcast traffic is detrimental to the performance of the network since each server is interrupted by every broadcast even if it is not relevant to the server. Commercially available network switches can often only support a few dozen physical ports each physical server is connected to one or more ports. Switches can be linked together with high speed switches but at great expense and potentially lower reliability.

Additionally previous virtualization technologies resorted to one of two approaches physical host based network virtualization using software drivers integrated in the hypervisor or physical network VLAN based network virtualization either via port based VLANs or IEEE 802.1q tagged Ethernet frames. The popular IEEE 802.1Q standard defines a 12 bit tag which allows more than 4000 VLANs to be supported within a broadcast domain. But neither of these approaches by themselves are sufficient to build a scalable cloud infrastructure.

In a cloud infrastructure physical resources are partitioned into pods within one or more zones in a scalable manner. The physical resources comprise physical compute storage and networking resources within data centers distributed across a network. Each zone comprises a subset of the pods and is physically isolated from other zones in the plurality. Each pod comprises a discrete set of physical resources in a zone which resources are tightly connected via a communications network. The physical resources across pods are weakly connected via a communications network in contrast to the physical resources within pods. Additionally the cloud infrastructure establishes one or more management server clusters each comprising one or more management servers. In one embodiment resources are strongly connected by physical and data link level protocols and weakly connected by network or higher level protocols. In another embodiment resources are strongly connected by having relatively low latency and or high bandwidth network links between them and weakly connected by having high latency and or low bandwidth network link between them.

The cloud infrastructure serves two or more customers with authenticated accounts. Each customer is associated with units of virtual resources on the cloud infrastructure. The cloud infrastructure establishes units of virtual resources by apportioning selected sets of the physical resources within the pods. The apportioned physical resources may be shared between two or more of the units of virtual resources. Each management server is configured for allocating the units of virtual resources to an account associated with each customer.

The cloud infrastructure comprises one or more data networks built from the distributed networking resources. A data network connects the pods and is configured for routing traffic to the pods from the customers of the cloud infrastructure and vice versa. The cloud infrastructure also comprises establishing one or more management networks. A management network connects the management servers to one of the zones and connects the compute and storage resources partitioned within the pod.

Syncing virtual machine states with a management server operated database facilitates the event and state management of large scale virtual network computing environments. Through the identification of possible virtual machine states and events the overall process of managing a virtual network computing environment is both simplified and scalable.

In one embodiment a number of agents report virtual machine states to a management server cluster in the form of full syncs and delta syncs operations. The sync operations move management logic to the centralized location of the management server cluster with only one currently known state for each virtual machine. With a centralized virtual machine information record scaling the architecture does not increase the probability of event errors and virtual machine failures from users operating on different virtual machine states. Thus the difficult task of administrating and operating a vast number of physical servers and virtual machines is readily achieved.

Additionally the delta sync method discussed herein reduces the overall network traffic required to manage virtual machines in a large scale implementation through the sync of a number of state updates for only virtual machines having a changed state subsequent to the last sync.

In one aspect there is provided a method for an agent to report states for virtual machines. The agent determines for each virtual machine a first and second state. The agent then determines any state changes from the first and second states and stores the state changes for virtual machines having changed states. The agent then transmits a number of stored states changes for virtual machines having changes states.

In another aspect there is provided a method for a management server to maintain states for virtual machines. The management server maintains a record of state information for each virtual machine. The management server receives state updates for a portion of the virtual machines and determines for the portion a current state based on the maintained record of state information and the received state updates. The management server then updates the record of information to reflect the current state for each of the portion of virtual machines.

In another aspect there is provided a method for a management server to perform actions for virtual machines using a maintained record of state information. The management server receives an event for a virtual machine and access the record of state information for the virtual machines. The management server then access a state table comprising possible next states from the virtual machine state in the record of state information. The management server then determines from the record of state information and state table the validity of the event. The management server then commits the event for processing and updates the record of state information with the expected state or fails the event.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures and the following description relate to preferred embodiments of the present invention by way of illustration only. It should be noted that from the following discussion alternative embodiments of the structures and methods disclosed herein will be readily recognized as viable alternatives that may be employed without departing from the principles of the claimed invention.

Reference will now be made in detail to several embodiments of the present invention s examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

The present invention improves the organization and utilization of data center hardware to provide a scalable cloud infrastructure by building a system of small blocks within data centers and connecting the physical servers across data centers using high speed networks. illustrate the overall framework for the scalable cloud infrastructure.

Each pod is a self contained physical grouping of servers that acts as a management unit for the scalable cloud infrastructure. Each pod includes a discrete i.e. non overlapping set of the physical resources in the zone . The physical resources in each pod have strong connectivity with each other and weak connectivity with the physical resources outside the pod. The strong connectivity and weak connectivity refer to the latency for traffic between connected physical resources. The latency for traffic may be determined by many different factors.

In one embodiment strong connectivity and weak connectivity may be switching of traffic between any two connected physical resources on a particular layer of a standard for instance the OSI model. As an example strong connectivity may imply Layer 2 switching. Similarly weak connectivity may imply layer 3 or higher layer switching. In another embodiment strong connectivity and weak connectivity may be based on the bandwidth available for traffic between the connected physical resources. As an example strong connectivity may be implemented by provisioning a minimum of 10 GHz links between the connected physical resources. Similarly weak connectivity may be implemented by a minimum of 1 GHz links between the connected physical resources. Additionally geographic proximity may also be used to define strong connectivity and weak connectivity. It is possible that geographically distant physical resources have a higher latency for traffic than geographically closer physical resources.

The discrete set of physical resources in a pod may be based on the anticipated processor memory network and storage requirements of potential customers of resources within a zone . For example a customer s storage and network requirements can be significant. Given a specification of resources e.g. an average and peak throughput in terms of input output operations per second IOPS and assuming that that throughput is to be divided equally amongst the devices e.g. virtual machines in a pod then the IOPS capacity of the servers determines an overall total number of virtual machines for a pod . If each server within the pod can host a specified number of virtual machines then a pod could be sized accordingly in terms of the number of servers storage and networking requirements.

The pods can be coupled with any number of other pods using Layer 3 switching thereby enabling unlimited scaling of the number of customers using the scalable cloud infrastructure. The pods allow the scalable cloud infrastructure to be built from smaller units of management and without a large up front hardware investment.

Typically the management server cluster is deployed as a primary management server cluster in a first datacenter with a back up management server cluster installation at a second datacenter

In one embodiment data stored by the first management cluster is replicated and transmitted for storage by the second management cluster . In response to a failure of the first management cluster the domain name system DNS records are updated in the servers in the zones such that network traffic that would normally be directed to the first management server cluster instead is directed to the second management server cluster . Thus operation of the servers in the zones is unaffected by failure of the first management server cluster . The two management server clusters are isolated from one another by residing in different data centers to minimize the likelihood of simultaneous failure of the management server clusters .

It is within the architectural framework of that the scalable cloud infrastructure is further described herein.

The administrator or operator of the cloud infrastructure deploys the various resources as discussed above. In one embodiment the operator of the cloud infrastructure is distinct from one or more providers of the resources e.g. a provider may own any number of virtual machines that will be used by the administrator in the cloud infrastructure. In one embodiment the provider owns a large number of servers .

One or more customers are users of portions of the resources of the cloud infrastructure. The term customer may refer to either the device or the user entity or person . Customers access the resources associated with their respective customer accounts and are connected to the resources via the network . Details of customer account resource allocation and access to those resources are discussed further in conjunction with .

The management server cluster is a cluster of management servers and their associated database . As indicated in conjunction with the management server cluster serves multiple zones and pods within data centers . The management server cluster also maintains customer account information. For example the management server cluster may establish virtual machines units of virtual resources by apportioning the physical resources within the pods to each of the units. The physical resources may be shared between two or more of the virtual machines. Although one management server cluster is depicted multiple management server clusters may be distributed throughout the cloud infrastructure each serving a plurality of data centers and zones . The details of the management server cluster are described further in conjunction with .

Each management server allocates and manages use of the physical resources within one or more zones . For example management server manages the resources in zone management server manages the resources in zone and management server manages the resources in zone . A management network may connect each of the management servers to a zone and may also connect the physical resources within the pod . A management server can allocate to and manage units of virtual resources associating customer accounts with the physical resources in a zone associated with that management server . The details of the management server are described further in conjunction with . The database can be any database commonly used for storage. According to one embodiment the database is a MySQL database.

The data centers zones and pods were described briefly in conjunction with . Switching within the zones typically is Layer 3 switching while switching within the pods typically is Layer 2 switching providing unlimited scaling of the cloud infrastructure. Zones are described in greater detail in conjunction with pods are described in greater detail in conjunction with and the servers in each pod are described further in conjunction with

The zone layer switch manages the network traffic to and from the pods within the zone and comprises one or more Layer 3 L3 i.e. network layer switches. For a zone comprising the servers in a small data center a pair of L3 switches may suffice. For large data centers high end core switches may implement core routing capabilities and include line cards that support firewall capabilities. A router redundancy protocol like VRRP also may be deployed. Traffic within the zone and or pods also is switched at other levels of either the OSI model or other networking models as described further below.

One embodiment of the zone layer switch supports two internal networks within the zone a data network and a management network . The data network is used to carry traffic to and from the zone from customers and other entities on the network . For example operation of virtual machines implemented on the servers within the pods of the zone e.g. if a virtual machine within the zone issues an HTTP request over the network both the HTTP request and any associated HTTP response will be routed via the data network .

The management network is used to carry traffic to and from the zone from the management server cluster and individual management servers within the management server cluster as well as traffic generated internally within the zone . Each pod in the zone is communicatively coupled to both the data network and the management network .

All traffic in and out of the zone passes through a firewall . The firewall may comprise one or more network firewalls specific to each internal network . The firewall provides connection to the public network space i.e. network and is configured in routing mode.

In one embodiment the firewall operates in a transparent mode for the data network such that the data network comprises the same IP address space as the public Internet. For example if the data network utilizes public IP addresses the zone is assigned a unique set of IP addresses that do not overlap with the IP addresses assigned to other zones .

In one embodiment the firewall operates in a network address translation NAT mode for the management network . For example the zone can be assigned an IP address in the 192.168.0.0 16 Class B private address space and each pod within the zone can be assigned an IP address in the 192.168. .0 24 Class C private address space the firewall remaps between the two address spaces as data is sent to or from the pods within the zone . Hence it is possible for the pods of different zones to have overlapping or identical private IP addresses. In some embodiments the firewall is outside of the zone such that it filters traffic to both the zone and the management server cluster . In some embodiments the firewall enables site to site VPN such that servers in different zones can reach each other within a virtual private network.

The routing servers are configured primarily to provide networking for computer data by the inclusion of suitable networking hardware network interfaces networking ports and the like . The routing servers can be implemented using any manner of suitable networking hardware and software and in some instances are combined with computing servers .

The storage servers are implemented as any device or combination of devices capable of persistently storing data in non transitory computer readable storage media such as a hard disk drive RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums for example. In addition the storage servers support local or distributed databases for storing customer information in one embodiment the database are MySQL databases.

Typically single uniform storage servers do not scale to more than a few dozen servers. A system architecture using pods however allows multiple smaller storage servers to be associated with each pod . Pod level shared storage delivers the benefit of shared storage such as the ability to restart virtual machines on a server different than where the virtual machine last ran which provides the ability to start up shut down and reallocate available servers.

The computing servers host the virtual machines within the pod as will be discussed further in conjunction with . The computing servers may comprise computing routing and or storage servers having different processing memory storage and networking capabilities according to various embodiments and may perform all of the functions of routing servers in embodiments that exclude separate routing servers . Additionally the computing servers can utilize different data storage systems such as direct attached storage DAS network attached storage NAS or a storage area network SAN .

The pod layer switch switches network traffic into and out of the pod . The pod layer switch may comprise one or more pod layer switches. The pod layer switch typically is a Layer 2 switch but switching is also possible at other levels of either the OSI model or other networking models. In alternate embodiments the pod may implement internal networks in addition to or distinct from the data network and the management network .

In one embodiment a public switch may be used for public traffic e.g. traffic on the data network and a private switch for management traffic e.g. traffic on the management network . Storage traffic e.g. traffic between the computing servers and the storage servers via the private switch may be isolated from other traffic to avoid packet loss and delays that are common with regular TCP IP traffic and to protect the servers from potentially malicious Internet traffic. In addition the storage traffic may be directed over a higher speed switch to meet the higher performance demands of the storage system.

In one embodiment of the pod the pod layer switch es are duplicated for redundancy with each computing server connected to multiple switches. Further it should be noted that multiple layers of switches can be coupled to effectively form a pod layer switch with an increased number of ports.

In another embodiment of the pod design Virtual LANs VLANs are used to segment traffic while using a single pod layer switch . The pod layer switch may support quality of service guarantees for virtual machines within the pod the storage VLAN is then given the appropriate share of the available bandwidth on the switch to meet the IOPS requirements of such virtual machines.

The VLANs for the management public and storage traffic may be created before the pod is deployed into production by programming the pod layer switch using the usual management interfaces. The storage server is also configured to use the storage and management VLANs using the usual management interfaces of the storage server . In other embodiments more than one traffic type can be directed over a single switch while other traffic types can have their own separate switches. For example guest traffic which refers of traffic between the virtual machines of each customer may be segmented using VLANs and directed on the same switch as management traffic.

In one embodiment the multitenant hypervisor is implemented on the computing server as a set of computer executable instructions encoded onto a non transitory computer readable storage medium included in the computing server and executed by a processor included in the computing server . The multitenant hypervisor therefore can comprise for example a software layer that manages the physical computing elements e.g. processors memory network cards and interfaces data storage disks of the computing server . The virtual machines access and use these physical computing elements as dictated by the multitenant hypervisor . The multitenant hypervisor can alter the allocation and accessibility of computing elements within the computing server over time in response to changes in the number and configurations of hosted virtual machines . The changes in the number and configurations of hosted virtual machines may occur for example because the customers associated with the hosted virtual machines made such a request or changes have occurred at other virtual machines associated with the customer .

A number of virtual machines may run on the computing server . The virtual machine comprises an allocation of the computer hardware and computer software elements of the computing server . The virtual machine simulates a physical computing device and can be configured to perform any computing task via inclusion of appropriate computer hardware and or computer software elements therein. For example a virtual machine can simulate a physical computing device having a 1 GHz processor 1 GB of memory and a 16 GB hard drive.

A virtual machine is associated exclusively with a single customer . However a computing server may host a set of virtual machines each associated with different customers . For example in one customer may be associated with virtual machine where as another customer may be associated with virtual machine and

A single computing server simultaneously can host virtual machines associated with different customers but the multitenant hypervisor along with the associated management server manages the hosted virtual machines such that each virtual machine appears to the corresponding customer as a physically distinct and self contained computing device.

In one embodiment the virtual machine comprises a processing resource a memory resource a storage resource a networking resource and a user interaction resource . The resources of the virtual machine comprise allocations of the computer hardware and or computer software elements of the computing server according to the units of virtual resources designated for a given customer account. The processing resource comprises an allocation portion of one or more computer processors. The memory resource and the storage resource can comprise an allocation of any physical device or combination of physical devices capable of persistently storing computer data such as a hard disk drive random access memory RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums. Other types of non transitory computer readable storage mediums can be used for the memory resource and or the storage resource and it is expected that as new storage mediums are developed in the future they can be configured in accordance with the teachings here. In one embodiment the memory resource provides operational memory and comprises a specified amount of RAM. The storage resource provides long term data storage and again can comprise any suitable type of non transitory computer readable storage medium such as one or more hard disk drives.

The networking resource comprises an allocation of computer networking hardware and software elements to enable the virtual machine to communicate with other networked entities over the management network . One or more IP addresses can be associated with the virtual machine and supported by the networking resource . Accordingly the networking resource can include any type of communication interface suitable for transmitting and receiving data over the network . For example the networking resource can comprise an Internet interface a serial interface a parallel interface a USB Universal Serial Bus interface an Ethernet interface a T1 interface a Bluetooth interface IEEE 802.11 interface IEEE 802.16 interface or any other type of wired or wireless communication interface.

The user interaction resource comprises hardware and software elements to enable the customer or administrator to interact with the virtual machine . For example the user interaction resource can provide display elements such as a graphical user interface GUI whereby either the customer or administrator can interact with and manage operation of the virtual machine . The user interaction resource can also support a keyboard and mouse or the like to further enable the customer or administrator to manage operation of the virtual machine .

In some embodiments the resources of the virtual machine are supported within a single computing device such as a server. In other embodiments portions of the virtual machine can be distributed among any number of physically separate computing devices that are communicatively coupled via the network . For example the storage resource can comprise multiple hard drives residing on multiple servers. Because the resources are communicatively coupled to one another the virtual machine appears to the customer to be a single computing device that includes the cumulative capabilities of the resources regardless of the actual physical location or distribution of any computer hardware or software elements associated with of the resources .

In some embodiments there is a specially designated virtual machine called the management domain that provides a standard set of commands to control the multitenant hypervisor for example to start and stop virtual machines and to control the networking stack of the multitenant hypervisor . In other embodiments the multitenant hypervisor is hosted by a host operating system and the virtual machines operate as processes of the operating system with the multitenant hypervisor providing isolation. The multitenant hypervisor ensures that the virtual machines share the physical resources of the compute host such as the processor memory network interfaces and storage. In some cases the multitenant hypervisor defers the operation and management of the network stack and storage interfaces to the management domain or host operating system.

The physical network interfaces are shared among the virtual machines by the multitenant hypervisor . In one embodiment the virtual machines get the illusion of possessing a standard physical network interface such as those provided by commercially available network interface cards. The multitenant hypervisor ensures that these virtual interfaces are connected to the underlying physical network interfaces of the compute host.

The cloud infrastructure comprises a management server interacting with agents that in turn interact with and control the multitenant hypervisor using its standard set of commands. In one embodiment there may be one agent running in each operating system or management domain on a server . In other embodiments one agent may interact with a group of servers whose multitenant hypervisors have been clustered using cluster management software. The agents are controlled by the management server .

The management server also interacts with the storage servers in order to create and destroy the virtual disks for the virtual machines. In one embodiment a special version of the agent known as the storage agent runs on the processor subsystem of the storage server to perform these activities. In another embodiment the management server uses the standard set of commands provided by the management server or its Application Programming Interface API to create and destroy virtual disks.

The storage server presents virtual disks to the computing server . In one embodiment the virtual disks are visible as networked file systems to the multitenant hypervisor . In another embodiment the virtual disks are presented as block devices to the multitenant hypervisor . The multitenant hypervisor ensures that these virtual disks are presented to the virtual machine while giving the illusion of locally attached storage to the virtual machines.

The multitenant hypervisor provides a standard set of commands that the agent uses. Some examples of the command set are start a virtual machine stop a virtual machine reboot a virtual machine add or remove a virtual disk for a virtual machine add or remove a virtual network interface for a virtual machine mount dismount a virtual disk from the storage server add or remove VLANs from the physical network interfaces of the server .

The agents collect information from the computing servers and storage servers and report to the management server . The management server maintains the reported information in database tables. The database includes for example the state of the multitenant hypervisor the state of the virtual machines the configuration of the networking stack such as configured VLANS explained subsequently in the description of IP addresses speeds and aggregations of the physical network interfaces storage resources visible from the compute server the capabilities of the multitenant hypervisor the capabilities of the storage server the capacity used and allocated size of the storage server statistics such as network traffic consumed by the virtual machine processor and memory usage of virtual machine.

The management server commands the agent to perform certain actions in response to actions by the cloud customer or cloud operator at the user interface or API. For example when a customer starts a virtual machine the management server may look up its table of servers and identify a server that has enough spare capacity to satisfy the requested processing memory and network resources for the virtual machine. The management server may also look up its table of virtual machines to verify if the virtual machine is already running or if its virtual disks already exist on a storage server . If the virtual machine is not already running or its virtual disks do not exist the management server may command the storage server or storage agent to create the disks.

The management agent then sends a start virtual machine instruction to the agent for the compute host chosen in step 1. In the start instruction are included information such as the portion of the physical processors to allocate to the virtual machine the virtual network interfaces to create for the virtual machine and their mapping to the physical interfaces and identification of the virtual disks to present to the virtual machine.

The agent may then instructs the multitenant hypervisor on the computing server or computing server in the example of to mount the virtual disks from the storage server create the virtual network interfaces and start the virtual machine with the desired processors memory network interfaces and disk. The agent verifies that the virtual machine has started using the hypervisor command set and reports the success to the management server . The management server updates its table of virtual machines with information about the virtual machine including the server it is running on.

The management network handles traffic associated with the multitenant hypervisor executed by the computing servers within the pods of the zone . Hence traffic on the management network may additionally comprise messages between a multitenant hypervisor and a virtual machine e.g. messages related to the allocation of the physical computing elements of the particular computing server to a particular virtual machine .

In an embodiment of the invention network and storage isolation may comprise isolation of data alone and not quality of service. In other embodiments the quality of service capabilities built into the multitenant hypervisor s as well as network and storage hardware may be used to support enhanced isolation.

Network bandwidth throttling is used to limit the rate of traffic from each virtual machine. The operator of the cloud infrastructure may configure the management server with the desired maximum network bandwidth for each virtual machine. The configuration can be done on a per service offering basis a per customer account basis or across the cloud. A management server includes this maximum in the start instructions sent down to the multitenant hypervisor when starting a virtual machine. The multitenant hypervisor uses a standard set of commands to limit the guest traffic from the new virtual machine.

Storage bandwidth throttling is used to limit the rate of storage traffic from each virtual machine while reading or writing to a virtual disk. The operator of the cloud infrastructure may configure the management server with the desired maximum IOPs bandwidth for each virtual machine. As before the configuration can be done on a per service offering basis a per consumer basis or across the cloud. The management server includes this maximum in the start instructions send down to the multitenant hypervisor when starting a virtual machine. The multitenant hypervisor uses a standard set of commands to limit the storage traffic from the new virtual machine to a maximum number of IOPS as defined by the operator of the cloud infrastructure.

The depicted management server cluster comprises three management servers two load balancers primary storage and backup storage . Other embodiments of a management server cluster may comprise different numbers of management servers and load balancers .

The management servers are communicatively coupled to the load balancers and the load balancers are communicatively coupled to the networks . Thus the management servers can transmit and receive data and commands via the networks through the load balancers . The load balancers distribute traffic from the networks and associated workload among the management servers to optimize utilization of the management servers . In some embodiments the load balancers comprise dedicated hardware devices e.g. multilayer hardware switching devices or severs configured to provide load balancing functionality . In other embodiments the load balancers comprise load balancing software installed on the management servers .

The primary storage and the backup storage can be implemented as any device or combination of devices capable of persistently storing data in non transitory computer readable storage media such as a hard disk drive RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums. Other types of computer readable storage mediums can be used and it is expected that as new storage mediums are developed in the future they can be configured in accordance with the teachings here. In one embodiment the primary storage and the backup storage further comprise MySQL databases. The primary storage and backup storage can also comprise one or more dedicated storage servers. The primary storage for the management server cluster is communicatively coupled to the management servers and provides data storage as required by the management servers . The backup storage is communicatively coupled to the primary storage and comprises a replicated version of the data stored by the primary storage . The devices in the management server cluster may be Layer 2 switched.

In one embodiment the management server comprises a management user interface UI a management application programming interface API a service manager and a workload manager .

In one embodiment the management UI provides the primary user interface for customers and administrators . The management UI can provide a graphical user interface GUI that is accessible over the networks via a conventional web browser using any networked computing device. A customer can for example input specifications for configuring a new virtual machine using a web GUI provided by the management UI . More particularly a customer configures a virtual machine by specifying the amount of processor storage memory and networking resources in appropriate units e.g. processor speed for processors amount in mega or giga bytes for storage and memory and throughput for networking .

A customer can also interact with a configured virtual machine using a web GUI provided by the management UI by for example inputting data for processing by the virtual machine viewing outputs computed by the virtual machine and inputting commands related to a complete or partial shutdown of the virtual machine . The management UI can provide a different web GUI for a customer than for an administrator .

One embodiment of the management API allows an administrator or a customer with appropriate access credentials to further oversee virtual machine . For example the management API can enable customization of the primary user interface provided by the management UI . The management API can also allow customization of billing policies and procedures as well as access policies e.g. granting different levels of access to a virtual machine based on credentials associated with a customer .

The service manager communicates with computing servers to oversee the creation operation and shutdown of virtual machines . For example the service manager can receive specifications for a virtual machine from the management UI select a computing server suitable for hosting the virtual machine and transmit commands to the selected computing server that case the computing server to implement the virtual machine . Once the virtual machine is configured and implemented on the computing server the service manager can monitor its operation and implement corresponding billing and access policies e.g. via routing appliance discussed further in . For example the service manager can bill a customer 20 per hour of operation for a virtual machine with processing equivalent to a 1 GHz processor memory equivalent to 1 GB of RAM and storage equivalent to a 250 GB hard drive as well as 0.10 per GB of network traffic associated with the networking resource of the virtual machine .

The workload manager interacts with the multitenant hypervisors installed on the computing servers . The workload manager monitors the status e.g. availability and workload of the different physical computing elements included in the computing servers . The workload manager can also oversee the transfer of a virtual machine from a first computing server to a second computing server upon failure of the first computing server or an imbalance of workload between computing servers .

In a cloud infrastructure serving multiple customers the administrator may ensure that accesses are secure and protected against attacks from malicious customers by allocating resources on demand for instance. Routing appliances run as virtual machines in the system to provide functionalities such as routing DNS load balancing console access etc. When they are no longer needed they are garbage collected to release any precious system resources that they are holding. The routing appliances may be hosted by the routing server .

The eth0 interface of a routing appliance serves as the gateway for the guest virtual network and has the IP address of 10.1.1.1 which is configurable. The eth1 interface of the routing appliance resides on the management network and is used to configure the routing appliance. The eth2 interface is assigned a public IP address on the data network .

As indicated in VMs associated with customers and are segmented on the same physical network. In order for the VMs associated with a customer to access the internet or to accept connections from the internet such as ssh a routing appliance may be started up for the VM. In the example of customer accesses virtual machines VM and through routing appliance hosted on computing server while customer accesses virtual machines VM and through routing appliance . While physical resources such as network and physical server are shared the networks of customers are segmented and cannot see each other.

When a customer starts a VM in a certain zone a management server determines if a routing appliance for that customer is already running within that zone . If it is not the routing appliance is started prior to the actual start of the VM. As the VM starts the routing appliance may then provide network functionalities such as DHCP DNS routing load balancing and firewall protection to the VM. After the last VM associated with customer is stopped the management server garbage may garbage collect the routing appliances after a defined interval. One routing appliance may be needed per customer account per zone .

In one embodiment each customer is assigned a guest virtual network in each zone . A guest virtual network may be configured to any private address space for example the Class A network in 10.0.0.0 8 private address space. The guest virtual network is an overlay network on top of the management network and is managed by the multitenant hypervisor .

A guest virtual network may be valid within one zone . Therefore virtual machines in different zones cannot communicate with each other using their IP addresses in the guest virtual network. Virtual machines in different zones communicate with each other by routing through a public IP address.

A routing appliance is associated with each guest virtual network. The routing appliance automatically assigns an IP address for each virtual machine associated with the customer for example in the 10.0.0.0 8 network. The customer may manually reconfigure virtual machines to assume different IP addresses as long as the customer does not introduce IP address conflicts.

Source NAT is automatically configured in the routing appliance to forward out bound traffic for all virtual machines associated with the customer . The customer may configure port forwarding rules to direct inbound public traffic to the virtual machines associated with the customer . A management server programs the routing appliance and the firewall according to the port forwarding rules specified by the customer . A customer may also configure a software load balancer running on the routing appliance to dispatch inbound traffic to multiple virtual machines associated with the customer according to customer specified load balancing rules.

The cloud infrastructure can support multiple guest virtual networks per customer . The concept of routing appliances as virtual machines may be generalized to include virtual machines with multiple virtual NIC interfaces and connected to multiple guest virtual networks. The virtual NIC interfaces are discussed further in conjunction with .

As shown in although some of the physical resources are shared by the customers traffic between the two customers and their virtual machines is segmented using two separate routing appliances as are the individual virtual machines assigned to each customer .

The customer can provide a functional specification for the virtual machine i.e. that the virtual machine be capable of performing one or more specified computing tasks while meeting specified performance criteria or the customer can provide a resource specification for the virtual machine i.e. that the virtual machine include specified computing resources such as hardware and or software elements . The virtual machine can also be configured according to any number of default specifications. Once the virtual machine is configured the customer can access the virtual machine over the network and thereby interact with the virtual machine to accomplish tasks as desired. For example the customer can utilize remote access software such as secure shell and or virtual displays to control the virtual machine .

The agent running on the computing server on behalf of the management server ordering the instantiation sets up a number of virtual networking components that co operate to achieve communication between the virtualized operating system and the hardware. The virtual NIC is an emulated network adapter that shuttles traffic back and forth between dom0 and VM . The bridge is a virtual switch that shuttles traffic back and forth between two segments in this case the network adapter of the customer virtual machine and VLAN network adapter. The bridge may also comprise a VNIC in some embodiments. The VNIC is a pseudo network adapter that tags and untags frames in the communication using a standard for example the 802.1q trunking standard.

Similarly traffic from customer goes through routing device and when it meets the physical NIC of DOM 0 it goes instead through a separate bridge 2 for customer traffic before reaching virtual NIC1 or virtual NIC3 of virtual machines and respectively. Note that even though customer has two virtual machines within the computing server it has only one bridge 2 as only one is needed for each customer . Doing so allows traffic for the same customer to be seen but not traffic to from other customers e.g. on the same computing server

The cloud infrastructure combines physical host based network virtualization and physical network VLAN based network virtualization. Each customer s virtual machine gets the illusion of participating in a physically distinct local area network with the customer s other virtual machines. It is possible for example that both customer A s private network and customer B s private network is in the IP address space 10.1.1.0 24 but they never see each other s packets. It is possible that the networks addresses are not shared as well.

A prospective customer may contact the administrator requesting resources from the cloud infrastructure. The administrator registers a customer account in the name of customer . A management server reserves and assigns a unique VLAN ID Vx for example within the 802.1q VLAN range 12 bit number totaling 4000 possible unique IDs to the customer. If no unused VLAN IDs are found the customer is informed that it is not possible to start a virtual machine.

In some embodiments this ID is stored in a database that the management server uses. The customer now starts a virtual machine within the cloud infrastructure and the management server orders the instantiation of a virtual machine within one of the computing servers .

Vy is then transmitted to the agent running on the computing server in question as part of the virtual machine instantiation procedure. The agent uses Vy to set up a tagged VLAN interface that will shuffle the correct traffic back and forth between the network and the virtual machine. In some embodiments this setup communication happens through the management network . The management network shares the same physical network but is effectively segmented from other customers because it has a different or no tag. 

Traffic coming out of the virtual machines set up in this fashion will be tagged with the VLAN number as the packet travels through the multitenant hypervisor traffic coming into that interface tagged with Vy will be unwrapped from the tagged frame and delivered to the appropriate virtual machine based on the MAC address.

When a virtual machine associated with a customer actually starts on a particularly server the virtual NIC required to provide multi tenancy is created on the server and associated with the virtual machine to provide segmented network access. When the user VM is stopped the virtual NIC is destroyed i.e. garbage collected and its resources returned to the server .

In the embodiment of for VM and VM there s only one virtual NIC and bridge created because they belong to the same customer and the virtual machines are allowed to see each other s traffic. This makes the virtual NIC garbage collection more difficult as the agent cannot terminate the bridge until all virtual machines for that customer are stopped on that server . Each bridge and virtual NIC created requires resources on the server in terms of memory. The agent may create and garbage collect bridges and virtual NICs as needed.

In the embodiment of the zone level switch comprises two layer 3 switches L3 switches . Additionally redundant pairs of layer 2 switches L2 switches are deployed in the pod layer switches . In large deployments of pods that include multiple racks a second level of pod layer switch may be deployed.

State LUT is a database structure containing current states and possible next states for managed virtual machines . The underlying states of a virtual machine are discussed with respect to below. Management servers access state LUT to determine whether a desired state change is valid. Transaction history is a database structure containing transactional history for customer administrator and virtual machine events. Management servers receive state and virtual machines information from agents and update associated data in transaction history . Customer and administrator data and events are received at management servers and stored in the transaction history .

Database may also implement business logic associated with information entries such as determining the validity of a new entry or a desired action and notifying the management server submitting the entry. Alternatively management servers may perform required business logic and simply access and update information in database . Furthermore a combination thereof may delegate logical functions according to system architecture hardware or software capability. State LUT and transaction history are also capable of being implemented as one or more tables in one or more databases depending on system architecture hardware or software capability.

Agent interacts with and controls hypervisor using a standard set of commands. Some examples of available commands are Start a virtual machine stop a virtual machine reboot a virtual machine add or remove a virtual disk for a virtual machine add or remove virtual network interfaces for a virtual machine mount or dismount a virtual disk from the storage resource and add or remove VLAN s from the physical network interfaces of the compute host.

In one embodiment at least one agent runs on each computing server and controls at least one hypervisor . Alternatively agent may operate a number of clustered hypervisors on one or more computing servers in a pod or zone . illustrates an embodiment using one agent per computing server . While only one hypervisor is shown a number of may reside on computing server and communicate with agent . Referring to agent collects virtual machine event information from hypervisor and reports the information to management server cluster . Agent also receives commands from management server and communicates with hypervisor to convert commands into virtual machine actions. Management server commands result from customer administrator and system management events requiring the manipulation of virtual machines .

In the illustrated embodiment management servers share a common database within management server cluster . In one embodiment the shared database easily enables the movement or live migration of virtual machines from one computing server to another. Thus if a virtual machine is migrated to another computing server managed by management server the last database entry for virtual machine is still applicable. Once a machine has migrated agent will receive event information regarding the virtual machine from hypervisor and report the state information to management server . Management server then accesses database and updates the state accordingly as discussed herein. In other embodiments each management server operates separate databases. Consequently virtual machine database entries may be forwarded during migration for example from one management server to another management server or management server cluster not shown to maintain current state information.

In one embodiment system management events are programmed management server operations in response to agent state reports and logic requiring the start or termination of system virtual machines . While events incurring changes of state are specifically discussed herein a number of virtual computing related events are handled in similar fashion. Such events may include for example allocated resources changes for virtual machines and system resource assignments e.g. console proxy server assignments for virtual machines .

One embodiment of virtual machine state update sequence occurs as follows. Agent determines a first state for virtual machines and determines a second state for virtual machines . Agent receives the virtual machine state information from hypervisor for a number of associated virtual machines . For each virtual machine having a first state and received second state agent determines whether the virtual machine changed states. Changed states are determined at agent by comparing the stored first states and received second states reported by hypervisor . In some embodiments agent receives information from hypervisor for virtual machines previously unmonitored. Unmonitored virtual machines are unknown to agent and thus lack stored state information. For example agent may lack state information for newly created virtual machines . In response to receiving information for an unmonitored virtual machine agent determines a state from received virtual machine information and reports the determined state as a changed state. In one embodiment the changed states for unknown virtual machines are processed as second states.

Additionally agent may receive from hypervisor the missing information for a previously monitored virtual machine . For example if a virtual machine crashes the virtual machine information received at agent may not include information about the crashed virtual machine . In response to not receiving information for a monitored virtual machine agent may determine a state from the previous virtual machine information and the lack of current state information. Agent then reports the determined state as a changed state. In one embodiment the changed states for previously monitored virtual machines are processed as second states.

Responsive to the determination of a changed state agent stores the second state as the current state and updates delta states for virtual machines having a changed state. Updated delta states include an indication of a virtual machine and its corresponding second state. The current state second state becomes the first state for determining additional updates later in time. Optionally if the first state and second state are the same agent may update not shown information associated with the first state. Associated information may include timestamps allocated resources or other information associated with virtual machine computing server hypervisor or system virtual machines .

Agent transmits a delta state or a number thereof to management server as a delta sync including only state information for virtual machines having changed states. Transmission of the delta sync may be responsive to any of a variety of operations within pod architecture. For example agent may transmit delta syncs to the management server according to virtual machine type state transition a specified time period or in response to requests from management server . Management server may also request a full sync including the current state of all virtual machines . In response to a full sync request the transmitted delta states include the most recent determined or stored states for each virtual machine reported to agent . Delta syncs and full syncs are embodiments of delta state transmissions and are discussed in further detail in conjunction with .

Responsive to successfully transmitting delta states as a delta sync or full sync to management server agent clears the delta states. Clearing delta states may include indicating one or more transmitted delta states as transmitted or deleting them completely. Responsive to receiving delta states management server updates state information for indicated virtual machines with their corresponding delta state. In one embodiment updated state information is stored in database in order to maintain a record of state information. State updates and event processing at the management server is described in greater detail in conjunction with .

States and possible next states are indicated in state LUT for vetting reported virtual machine events from agent and performing customer and administrator events. Typical events may include for example virtual machine restarts host server restarts virtual machine migration events response to management server commands and the like. In one embodiment the following table includes possible virtual machine events requiring verification at state LUT 

The states in can be implemented as a LUT one or more linked or doubly linked lists or any other data structure capable of storing a first state and possible next states in database . In one embodiment management servers determine valid events by checking whether the event leads to a state adjacent to the current state i.e. shown next to in . The state diagram of for example indicates that a stopped virtual machine can be destroyed or started as indicated in the state table thus an event requesting either is committed for processing. However for example if migration is requested for virtual machine in the stopped state state LUT indicates migration as an invalid next state. In one embodiment invalid states are simply rejected and the event requestor is notified. In other embodiments management server requests the delta states or first states from agent and determines whether the current state is outdated. The event request is then re checked against the updated state LUT to determine whether to commit the event for processing.

The states included in and embodied herein serve to illustrate the concept of virtual machine states and not to identify every state or transition within a virtual computing environment. One skilled in the art may expand upon an embodiment of managed virtual machine states to implement a number of features as desired. For example in one embodiment virtual machine in the starting state may freeze or halt. One skilled in the art may implement logic to either retry the operation default back to the previous stopped state a combination of the two or force virtual machine into an implementation based state. For example one may choose to default frozen customer virtual machines to stopped state and while defaulting frozen system virtual machines to a destroyed state.

In one embodiment events are prioritized and performed based on the current state of the virtual machines . Responsive to notification of a virtual machine changing states in the delta states management server checks the revision number and expected state stored in the transaction history to determine whether any events are occurring simultaneously. Responsive to the determination of event priority the virtual machine state is updated with a new revision number and the time of the update. If the event is not the priority event it cannot make changes due to the other process incurring a different state first in response management server fails the event and rolls back any changes. Thus only one event process for each virtual machine alters current state and revision information in database .

Management server accesses the state transition LUT and determines whether the desired event transaction results in a valid state transition from the current virtual machine state. If the transition is invalid the management server determines an action according to event type and implemented management server logic. In response to a valid state transition management server submits the desired event transaction information to transaction history . If the revision number is unchanged the desired event transaction is committed to database with an updated revision number and corresponding virtual machine information. Otherwise database rejects the transaction due to a changed revision number for example and notifies management server . Accordingly management server may determine an appropriate action depending on the event. Management server may for example fail the operation retry the operation notify customer and administrator or implement additional logic.

As illustrated in management server may also determine agent events from delta states . Management server retrieves virtual machine information and determines if the delta state was expected. For example if an event specifying the start of a virtual machine is committed transaction history should contain starting as the expected state. In some embodiments transaction history might additionally contain running as an expected state depending on the length of time between delta states. Additionally a time out retry operation or state inquiry may occur if agent never reports the virtual machine as running after a starting delta state. If the delta state information was expected the virtual machine information is updated to reflect timestamp and other associated information with the virtual machine . If the delta state was not expected a virtual machine event is identified and processed accordingly as event .

In one embodiment management server must monitor actual virtual machine state within the cloud infrastructure. As discussed in conjunction the embodiment of two types of updates a full sync and delta sync are used to communicate virtual machine states. Full syncs are performed in response to an agent first connecting to a management server or in response to a full sync request from the management server. Agent uses a full sync to communicate the state of all handled virtual machines along with the allocated resources and associated information for each virtual machine . In one embodiment the full sync includes a unique virtual machine ID virtual machine customer ID VLAN tag console proxy port and virtual machine type.

When a full sync is performed responsive to agent connecting to management server management server records and resolves reported virtual machine states and information in database . Once the management server resolves the full sync virtual machines handled by agent participate in the cloud infrastructure. Alternatively management server may request a full sync if virtual machines residing on the agent require further inquiry into their state.

According to one embodiment the state update format for management server includes the following management information for identification operation and storage in database 

The state update format includes a number of fields for virtual machine state or management information for processing at the management server . For example management server may use the vlanID or vmID to retrieve and store associated virtual machine information in database . Additionally management server may determine an event occurrence for a virtual machine based on field changes or a number of and process the event as illustrated in . A description of several fields according to one embodiment is provided below.

Type includes an indication for the type of virtual machine being reported for example i is a customer instance cp is a console proxy and r is a system routing appliance.

userID includes an indication of an individual customer administrator or server owning or managing the virtual machine.

vmID corresponds to a unique identification number for the virtual machine on a customer account computing server pod or zone. In some embodiments multiple vmID s are used to describe virtual machines .

The first two reported virtual machines i 3 45 007B Running 5 and i 3 33 007B Running 2 both belong to customer and are assigned identical VLAN tags to facilitate local network communication in the virtual computing environment. Their states are indicated as running and both have assigned console proxy servers .

Virtual machines not assigned to a console proxy server forego this indication for example virtual machine cp 7 11 007K Running is a console proxy virtual machine itself thus no ports to a console proxy server or virtual machines are necessary. In some embodiments virtual machines without current desktop browsing sessions do not require an assigned console proxy server. While the assignment of a console proxy server is indicated herein a console proxy virtual machine routing appliance or addition supporting system elements may also be indicated. In some embodiments system virtual machines such as the console proxy virtual machine may indicate for example the number of current connections.

In some embodiments a number of updated delta states are grouped together to form a delta sync and minimize reporting overhead. Delta syncs contain one or more of the updated delta states for transmission to management server in . In one embodiment delta syncs are transmitted at intervals requested by management server after full syncs or previous delta syncs. In one embodiment delta syncs follow the previously described format of the full sync but contain only virtual machines having updated delta states. In one embodiment management server need only request delta syncs from agent after an initial full sync unless a connection interruption occurs or additional state inquiry is required. In other embodiments agents may transmit delta syncs to management server responsive to event priority or storing a plurality of delta states for the next delta sync. In another embodiment expected state transitions may be reported to management server less frequently than unexpected ones or only on sync requests. For example management server may regularly request delta sync updates based on an established time interval while agent pushes syncs containing priority state changes such as an unexpected virtual machines deaths on occurrence.

On example of a full sync and delta sync exchange sequence between agent and management server is illustrated in . In response to the re established connection agent sends a full sync to management server indicating the state of each handled virtual machine. In one embodiment management server requests the start of stopped virtual machine and agent starts virtual machine via commands to hypervisor . In response to successfully starting the virtual machine agent updates the state of virtual machine to running . On the next delta sync agent sends a delta sync reflecting the virtual machine state change from stopped to running to management server . In one embodiment Agent may also detect virtual machine events for example such as a virtual machine dying unexpectedly . In response to virtual machine dying unexpectedly agent stores the stopped state as a changed state in the delta sync and transmits the delta sync indicating the stopped state. Depending on the embodiment agent may transmit the delta sync to management server automatically or wait for a delta sync update request.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising computer program code stored on a non transitory tangible computer readable storage medium which is configured to be executed by a computer system for performing any or all of the steps operations or processes described. A computer system is understood to include one or more computers each computer including one or more hardware based processors primary memory devices e.g. RAM ROM secondary storage devices e.g. hard discs or solid state memory and networking devices e.g. networking interface cards . The computers in a computer system can be interconnected by wired medium e.g. Ethernet fiber optic or wireless medium e.g. radio based networks such as 802.11 802.16 or combination thereof.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer.

Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

