---

title: Bypass mechanism for virtual computing infrastructures
abstract: In accordance with one embodiment of the present disclosure, a system includes one or more computer systems including a memory, one or more processors, and a bypass switch with an open position and a closed position. The one or more computer systems further include computer-executable program code. The computer-executable program code includes one or more virtual machines modules including computer-executable instructions configured, when executed, to cause the one or more processors to implement one or more virtual machines that host one or more guest operating systems and one or more applications. The computer-executable program code further includes a virtual bypass switch module including computer-executable instructions configured, when executed, to cause the one or more processors to, responsive to the availability of the one or more applications, forward packets received on the first physical network interface to at least one of the one or more virtual machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08547972&OS=08547972&RS=08547972
owner: Blue Coat Systems, Inc.
number: 08547972
owner_city: Sunnyvale
owner_country: US
publication_date: 20110128
---
Application traffic management devices and a variety of other network devices are often deployed physically and or logically at the edges of enterprise networks to control bandwidth utilization for example across an access link to a wide area network WAN to filter network traffic for security related purposes to optimize or accelerate network traffic and the like. Such network devices typically include one or more inside or LAN ports and one or more outside or WAN ports. When the traffic management device is situated at that single gateway between one and other networks it will logically be able to process all inbound and outbound traffic. As a result the device can effectively classify flows and maintain rate control policies on specific partitions.

However application traffic management devices can sometimes become non functional due to hardware or software failures. Typically a bypass switch is utilized to physically shunt network traffic away from a packet processing section of the non functioning application traffic management device in order to maintain network connectivity. For example upon the failure of a network device a short circuit is created between the inside or LAN port and the outside or WAN port to allow signals carrying network traffic to bypass the processing path of the network device. Such functionality is sometimes referred to as fail to wire. U.S. Pat. No. 6 327 242 for example discloses one possible fail to wire implementation.

In accordance with one embodiment of the present disclosure a system includes one or more computer systems including a memory one or more processors a bypass switch a first physical network interface and a second physical network interface. The bypass switch has an open position and a closed position and the first physical network interface has a first port and the second physical network interface has a second port. The closed position corresponds to the bypass switch forming a direct connection between the first and second ports of the first and second physical network interfaces thus bypassing processing of the data signals by the first and second physical network interfaces. In the open position the first and second physical network interfaces are operative to process data signals received at the first and second ports. The bypass switch is responsive to control signals to move from the open position to the closed position. The one or more computer systems further include computer executable program code stored in the memory and executable by the one or more processors. The computer executable program code includes one or more virtual machines modules including computer executable instructions configured when executed to cause the one or more processors to implement one or more virtual machines that host one or more guest operating systems and one or more applications. The computer executable program code further includes a virtual bypass switch module including computer executable instructions configured when executed to cause the one or more processors to monitor availability of the one or more applications hosted by the one or more virtual machines. The computer executable instructions are further configured when executed to cause the one or more processors to responsive to the availability of the one or more applications forward packets received on the first physical network interface to at least one of the one or more virtual machines. The computer executable instructions are further configured when executed to cause the one or more processors to responsive to unavailability of the one or more applications forward the packets received on the first physical network interface to the second physical network interface.

Numerous technical advantages are provided according to various embodiments of the present disclosure. Particular embodiments of the disclosure may exhibit none some or all of the following advantages depending on the implementation. In certain embodiments a computer system may include both a bypass switch and a virtual bypass switch module. As such the bypass switch may cause data signals to bypass processing by the computer system when it has been determined that the computer system has failed and the virtual bypass switch module may cause packets to bypass a virtual machine implemented on the computer system when it has been determined that an application on the virtual machine is unavailable e.g. such as when the application running on the virtual machine fails or crashes .

In another embodiment a first computer system may include both a bypass switch and a virtual bypass switch module and one or more other computer systems may implement one or more virtual machines. As such the virtual bypass switch module may provide forwarding functionalities even though the virtual machines are implemented on different computer systems than the first computer system that includes the virtual bypass switch module.

Other technical advantages of the present disclosure will be readily apparent to one skilled in the art from the following figures descriptions and claims. Moreover while specific advantages have been enumerated above various embodiments may include all some or none of the enumerated advantages.

Embodiments of the present invention and its advantages are best understood by referring to of the drawings like numerals being used for like and corresponding parts of the various drawings.

Included in the schematic is the computer system a first physical network interface a second physical network interface an incoming connector port an outgoing connector port the bypass switch various switches and various switch points and the virtual bypass switch module various packet forwarding decisions and the virtual machine virtual machine network interfaces and various PCB traces and and various communication paths and

It should be noted that is a fairly high level block diagram. As such the traces and are only meant to be illustrative of a connection e.g. such as an electrical connection optical connection or any other suitable connection between various components and should not necessarily be interpreted as a direct connection as other components may be interspersed along the traces. Furthermore the communication paths are only meant to be illustrative of logical and or physical communication paths between various applications and virtual machines implemented in the computer system and should not necessarily be interpreted as a direct connection as other components may be interspersed along the communication paths.

The computer system may include the bypass switch . Furthermore the computer system may implement the virtual bypass switch module and the virtual machine on one or more processors not shown in the computer system . The computer system may be for example an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Further details of example embodiments of the computer system are described in .

The first and second physical network interfaces may process signals perform other functionality to process signals to resolve packets e.g. such as by converting the signals to packets using for example a software device driver and may read packets into a memory of a device such as the computer system . In one embodiment the first and second physical network interfaces are the network communications interfaces that receive and transmit packets over the computer network environment. In one implementation the first and second physical network interfaces and reside on separate network interface cards operably connected to the system bus of the computer system . In another implementation the first and second physical network interfaces and reside on the same network interface card. In addition the first and second physical network interfaces and can be wired network interfaces such as Ethernet IEEE 802.3 or synchronous optical network SONET interfaces and the like. Although illustrates two physical network interfaces may include additional network interfaces beyond the physical network interfaces and to support additional network paths or other functionality. Furthermore U.S. application Ser. No. 10 843 185 provides a description of the operation of various modules according to one possible implementation of the claimed embodiments such as network interface drivers and data structures for receiving into memory and processing packets encountered at the physical network interfaces and

According to the illustrated embodiment the first physical network interface includes the incoming connector port for receiving data signals from another device such as a router or another computer system . Furthermore the second physical network interface includes the outgoing connector port for sending data signals from the computer system to another device. Although illustrates the incoming connector port as receiving data signals and the outgoing connector port as sending signals each connector port may both receive and send the data signals. As such the data signals may be received at the computer system through outgoing connector port and subsequently sent from the computer system through the incoming connector port . Connector ports may be configured according to any physical configuration suitable to the environment such as but not limited to RJ 45 or RJ 11 connectors.

The bypass switch may form connections e.g. electrical optical etc. so as to cause data signals to be processed by the physical network interfaces and or to cause the data signals to bypass processing e.g. signal demodulation frame packet detection etc. by the physical network interfaces and . According to the illustrated embodiment the bypass switch may include switches and for forming connections. The bypass switch may cause the switches and to be in an open position when the computer system is determined to be operational. In the open position the switch may form a connection e.g. electrical optical etc. between the incoming port the trace the switch point and the communication path and the switch may form a connection e.g. electrical optical etc. between the outgoing port the trace the switch point and the communication path . As such when the computer system is determined to be operational incoming signals bearing network traffic packets enter computer system at incoming connector port and travel through the trace and the switch . This may allow the first physical network interface to process the data signals and send the packets to system memory of the computer system for further processing. When processing of the packets as is discussed below has finished the packets may be logically forwarded to the second physical network interface for transmission along a network communications path. The second physical network interface may process the packets and then send the packets as data signals through the switch the trace and the outgoing connector port

The bypass switch may also cause the switches and to be in a closed position when the computer system is determined to be not operational e.g. failed . In a closed position the switch may form a connection e.g. electrical optical etc. between the incoming connector port the trace the switch point and the trace and the switch may form a connection e.g. electrical optical etc. between the outgoing connector port the trace the switch point and the trace . As such when the computer system is determined to be not operational incoming signals electrical optical etc. bearing network traffic packets enter computer system at the incoming connector port and travel through the trace the switch the trace the switch the trace and the outgoing communication port . As such the received data signals may bypass processing by the physical network interfaces and and may further bypass being sent to the processor of the computer system .

The bypass switch may determine whether to cause the switches and to be in either the open or closed position based on a firmware or software module of the computer system . For example during normal operation of the computer system the firmware or software module not shown of the computer system may be operative to assert a control signal which is routed to a general purpose input output GPI O pin to maintain the open position of the switches and . Restated the asserted control signal may cause the switches and to be connected to points and respectively which forwards packet bearing signals to be processed by the physical network interfaces and

When a failure condition occurs for example a software or hardware failure in the computer system the control signals may no longer be asserted and the switches and may move to points and respectively. By default e.g. when no control signal is asserted the switch the switch and the trace may create a fail to wire short circuit between the physical network interfaces and . Accordingly the control signal may not be asserted when the computer system is powered off being powered off or powered on but booting and not yet initialized. In addition the control signal may be de asserted in response to a system crash even though the computer system is still powered on. For example a watchdog module may be employed to address system software crashes or failures. During normal operation a timer monitored by the watchdog module may continually reset. During a system crash however the watchdog module may time out causing a non maskable interrupt NMI to be generated. As such the computer system generates a crash log and resets the system. During the system reset such as a re boot the control signal is de asserted resulting in the fail to wire bypass mode discussed herein. Still further the control signal can be de asserted and asserted based on explicit commands transmitted by an application or an administrator e.g. such as the system administrator for the computer system . For example in response to a link status error indicating a broken link for example the application or administrator can cause the control signal to be de asserted during the error condition.

The virtual bypass switch module may forward a packet to the virtual machine or may forward the packet back to the physical network interfaces and thereby causing the packet to bypass the virtual machine . The virtual bypass switch module may include one or more computer executable programs that may be executed by the processor of the computer system . For example the virtual bypass switch module may include computer executable instructions that may cause the processor to forward the packet to the virtual machine or forward the packet back to the physical network interfaces and

According to the illustrated embodiment the virtual bypass switch module may include the packet forwarding decision logic and . The packet forwarding decision logic and may be embodied in computer executable instructions that may cause the processor to forward a packet in the computer system . When an application is available on the virtual machine the packet forwarding decisions and may cause the packets to be forwarded to the virtual machine . For example the packet forwarding logic and may cause the processor of the computer system to forward the packets to the virtual machine . On the other hand when an application hosted on the virtual machine is unavailable the packet forwarding decisions and may cause the packets to be forwarded via communication path back to the physical network interfaces and . For example the packet forwarding decisions and may cause the processor of the computer system to forward the packets back to the physical network interfaces and

In particular when a packet is received at the processor of the computer system from the communication path the processor may execute the computer executable program code of the virtual bypass switch module to determine where the packet should be forwarded. When the application hosted on the virtual machine is available the virtual bypass switch module may cause via the packet forwarding logic the processor to forward the packet over the communication path to the virtual machine . As such the packet may be sent to the virtual machine for processing by the application running on the virtual machine . On the other hand when the application hosted on the virtual machine is unavailable e.g. such as when the application running on the virtual machine fails or crashes the virtual machine fails etc. the virtual bypass switch module may cause via the packet forwarding decision the processor to forward the packet to the second physical network interface through the communication path the packet forwarding decision and the communication path . As such the packet may bypass being processing by the application running on the virtual machine . In other implementations the forwarding decision may cause the packet to bypass a first application hosted on a first virtual machine and to be forwarded to a second virtual machine for processing by a second application.

The virtual bypass switch module may determine whether the application running on the virtual machine is available in any suitable manner. For example the virtual bypass switch module may determine whether the application is available based on passive failure detection or active failure detection. In the passive failure detection the virtual bypass switch module may cause the processor to monitor for a heartbeat from the virtual machine . For example while an application on the virtual machine is available the virtual machine may emit a heartbeat signal. This heartbeat signal may be emitted by the virtual machine at predetermined times. For example the heartbeat signal may be emitted every second every minute or any other period of time. As such as long as the processor continues to detect the heartbeat signal the virtual bypass switch module may assume that the application is still available. However if the virtual bypass switch module fails to detect the heartbeat signal from the virtual machine after a certain period of time e.g. such as a time period that is longer than the predetermined time period between heartbeat signals the virtual bypass switch module may assume that the application is no longer available. Accordingly the virtual bypass switch module may cause any received packets to be forwarded back to the physical network interfaces and or another virtual machine bypassing the virtual machine .

In active failure detection the virtual bypass switch module may cause the processor to probe the virtual machine for certain capabilities. For example the processor may send a ping to the virtual machine causing the virtual machine to respond. If the virtual machine responds the virtual bypass switch module may assume that the application is available. However if the virtual machine does not respond or the signal fails for any other reason the virtual bypass switch module may assume that the application is not available. Accordingly the virtual bypass switch module may cause any received packets to be forwarded back to the physical network interfaces and bypassing the virtual machine .

In one embodiment the virtual bypass switch module may further include computer executable program code for determining which physical network interface or to forward a packet. For example if the packet was received from the first physical network interface the virtual bypass switch module may determine that the packet needs to be sent back to the second physical network interface so that the packet can continue traveling over the network towards its destination. In one embodiment the virtual bypass switch module may determine which physical network interface to forward the packet to based on a data field in the wrapper structure associated with the packet as stored in system memory. For example the virtual machine or the physical network interfaces may tag the wrapper of the packet to indicate where the packet originated from and or where the packet should be forwarded to.

The virtual machine may be a running instantiation of a device such as a computer system that can execute or operate in a virtualized execution environment. For example the virtual machine may emulate the hardware such as the microprocessor or controller of the device and may further emulate an operating system that may run one or more applications installed on the virtual machine . In a particular implementation the virtual machine fully simulates the complete hardware of the device allowing a guest operating system to run in connection with the virtual machine and one or more applications to run in connection with the guest operating system.

The virtual machine can be implemented using a Type 1 or Type 2 hypervisor. A Type 1 hypervisor runs directly on the hardware a Type 2 hypervisor runs on another operating system such as Linux. The virtual machine can run any operating system supported by the virtual hardware and can also run any application. For example the virtual machine may host one or more guest operating systems and one or more applications. In one embodiment the virtual machine may include a hardware emulation layer and a software emulation layer.

The hardware emulation layer usually includes various hardware emulation components or modules each of which correspond to one or more pieces of hardware of a device. For example the hardware emulation layer may include a processor emulator that emulates the processor of the device a memory emulator that emulates the memory storage or subsystem of the device a network interface emulator that emulates the one or more network interfaces e.g. WiFi Bluetooth etc. of the device an input output I O emulator that emulates the one or more I O devices e.g. keypads wheels sliders buttons etc. of the device a display emulator that emulates the display screen on the device etc. Each emulator imitates or duplicates the behavior of the piece of hardware it emulates. It generally maintains the look feel operations characteristics behavior etc. of an actual physical component of hardware even when that actual physical component is not present in computer system .

There are a variety of different ways to implement the individual emulators or modules included in the hardware emulation layer. According to one implementation the emulators or modules are implemented as computer executable programs represented by computer program instructions stored in various forms of computer readable media. For example one way to emulate the processor of a device is to use an interpreter which follows the execution flow of the program code and for every machine code instruction encountered executes operations on the processor s of the computer system that are semantically equivalent to the original instruction. Some pre packaged CPU simulators may also be incorporated into the process emulator.

To emulate the software components of a device according to one implementation the virtual machine includes a software emulation layer which includes a copy of an operating system one or more device drivers and or one or more applications. The software may be executed within the context of the hardware emulation layer of the virtual machine as described above. For example to emulate a specific piece of application software the computer system first causes the hardware emulation layer to be loaded and executed and then causes the copy of the piece of application software from the software emulation layer to be executed on top of the hardware emulation layer e.g. interacting with the hardware emulation layer .

The virtual machine may run any suitable application. For example the virtual machine may run an application corresponding to a network application traffic management device. In such an example the network application traffic management device application is operative to classify and manage data flows traversing a network path to which the computer system is operably connected. In one implementation the network application traffic management device application also includes functionality operative to monitor the performance of the network such as network latency and or network applications. As a further example the virtual machine may run an application corresponding to a security gateway or proxy a firewall a packet capture device WAN optimization and the like.

According to the illustrated embodiment when the application running on the virtual machine is available the packets received at the processor from physical network interfaces and may be forwarded to the virtual machine for processing by the application. The packets may be forwarded to the virtual machine through the communication paths and respectively and may be received by the virtual machine at the virtual machine network interface or emulated on the virtual machine . Once the application is finished processing a packet e.g. such processing may include modification of the packet or replacement of the original packet with one or more different packets or any other suitable processing the packet may be sent by the virtual machine network interface or back to the virtual bypass switch module . As such the virtual bypass switch module may cause the processor to forward the packet back to either the first physical network interface or the second physical network interface in order to forward the packet out of the computer system as a data signal.

Accordingly as is discussed above the bypass switch of the computer system may cause data signals to bypass processing by the computer system when it has been determined that the computer system has failed and the virtual bypass switch module of the computer system may cause packets to bypass a virtual machine implemented on the computer system when it has been determined that an application on the virtual machine in unavailable.

As is noted above the virtual machine emulates two virtual machine network interfaces virtual machine network interface and virtual machine network interface . In particular implementations virtual machine network interface may comprise an inside or LAN interface while virtual machine network interface may comprise an outside or WAN interface. Accordingly in certain implementations packets received from communication path may be forwarded to the virtual machine through the virtual machine network interface and after processing may exit the virtual machine through the virtual machine network interface . Furthermore in certain implementations packets received from communication path may be forwarded to the virtual machine through the virtual machine network interface and after processing may exit the virtual machine through the virtual machine network interface . In further implementations the virtual bypass switch module may determine which of the virtual machine network interfaces and to forward the packet to.

Included in schematic is the computer system a first physical network interface a second physical network interface an incoming connector port an outgoing connector port the bypass switch various switches and various switch points and the virtual bypass switch module various packet forwarding decisions and the virtual machines and various virtual machine network interfaces and various PCB traces and and various communication paths and . According to the illustrated embodiment the computer system of may be similar to the computer system of the first physical network interface of may be similar to the first physical network interface of the second physical network interface of may be similar to the second physical network interface of the incoming connector port of may be similar to the incoming connector port of the outgoing connector port of may be similar to the outgoing connector port of the bypass switch of may be similar to the bypass switch of the switches and of may be similar to the switches and of the switch points and of may be similar to the switch points and of the virtual machines and of may be similar to the virtual machine of the virtual machine network interfaces and of may be similar to the virtual machine network interfaces and of the traces and of may be similar to the traces and of and the communication paths and of may be similar to the communication paths and of .

As is discussed above the schematic includes the virtual bypass switch module and the virtual machines and . The virtual bypass switch module of may be similar to the virtual bypass switch module of . As such the virtual bypass switch module may cause packets to be forwarded to one or more virtual machines or thereby forwarding the packets to be processed by one or more applications running on the virtual machines and when it has been determined that applications running on the virtual machines and are available. Furthermore the virtual bypass switch module may further cause the packets to be forwarded via communication path to the physical network interfaces and thus bypassing the virtual machines and when it has been determined that applications running on the virtual machines and are not available.

Since the computer system is implementing more than one virtual machine and the virtual bypass switch module may further determine which of the virtual machine and to forward a packet to. For example the virtual bypass switch module and packet forwarding decisions and may determine that a particular packet received at the processor of the computer system should be forwarded to for example the virtual machine as opposed to the virtual machines and . The virtual bypass switch module may determine which of the virtual machines and to forward the packet to in any suitable manner. For example the virtual bypass switch module may determine to send a packet to a certain virtual machine based on one or more indications from the virtual machines and one or more instructions received at the virtual bypass switch module from a system administrator of the computer system e.g. such as a human administrator overseeing the computer system or one or more particular aspects of the computer system one or more computer executable instructions included in the virtual bypass switch module or any combination of two or more of these.

The virtual bypass switch module may determine which of the virtual machines to send certain packets to based on an indication from the virtual machines . For example each of the virtual machines and may specify a subset of packets they are operable to process. For example the virtual machine may prompt the virtual bypass switch module to only forward user datagram protocol UDP packets to the virtual machine . As another example the virtual machine may prompt the virtual bypass switch module to only forward transmission control protocol TCP packets to the virtual machine . Based on such indications from the virtual machines and themselves the virtual bypass switch module may determine to send certain packets to for example the virtual machine and also may determine to send other packets to the virtual machines and . In one embodiment the indications from the virtual machines may be provided to the virtual bypass switch module based on packet capture pcap or any suitable application programming interface API .

The virtual bypass switch module may determine which of the virtual machines to forward a packet to based on instructions from a system administrator of the computer system such as instructions embodied in a config file. For example the system administrator may utilize an API in order to designate what type of packets should be forwarded to each of the virtual machines . For example if a first virtual machine such as the virtual machine is already being used by the system administrator to perform certain processes unrelated to packet processing the system administrator may designate that none of the packets received at the processor of the computer system should be forwarded to the virtual machine . Based on such an indication the virtual bypass switch module may forward all of the received packets to only the virtual machines and . As another example the system administrator may designate the type of packets that may be forwarded to each of the virtual machines . For example similar to the indications that may be made by the virtual machines themselves the system administrator may designate that a certain virtual machine for example the virtual machine receive only TCP packets. In other embodiments the system administrator may determine which of the virtual machines receive certain packets based on any other suitable criteria.

The virtual bypass switch module may determine which of the virtual machines to forward a packet to based on computer executable code included in the virtual bypass switch module . As an example the virtual bypass switch module may include computer executable code for determining where to forward a packet to based on load balancing. For example if certain packets may be forwarded to more than one of the virtual machines such as for example the virtual machine and the virtual machine the virtual bypass switch module may forward the packets in order to balance the load of each of the virtual machines and in a parallel fashion. In such an example the virtual bypass switch module may determine to forward 50 of the packets to the virtual machine and 50 of the packets to virtual machine . Furthermore in order to balance the loads the virtual bypass switch module may determine to send any suitable percentage of packets to the virtual machines . As an example if a certain virtual machine such as the virtual machine is conducting other processes the virtual bypass switch module may determine that that the virtual machine should receive a smaller percentage of the packets such as only 10 . The virtual bypass switch module may also determine which virtual machine to forward the packets to based on failure of one or more of the virtual machines . For example if an application in for example the virtual machine is not available the virtual bypass switch module may determine that the packets should be forwarded to the virtual machine instead of the virtual machine . In another implementation one of the virtual machines such as may operate in a standby mode and essentially operate as a redundant backup to virtual machine . Virtual bypass switch module may operate to forward all or a given subset of traffic to virtual machine and switch future traffic to virtual machine if a failure of virtual machine is detected or some other condition such as a software upgrade or the like requires the deactivation of virtual machine

As another example the virtual bypass switch module may determine which of the virtual machines to forward a packet to based on the need to forward the packet to multiple virtual machines in a serial fashion. For example the computer system may process certain packets by first forwarding the packet to as one example the virtual machine and then subsequently forwarding the packet to the virtual machine for further processing. The virtual bypass switch module may make this determination based on the wrapper of the packet or based on a tag applied to the packet. In one embodiment the tag may be applied by a process hosted on the virtual machines . For example after the virtual machine has finished processing a packet the virtual machine may apply a tag to the packet to indicate to the virtual bypass switch module that the packet should subsequently be forwarded to another virtual machine such as for example the virtual machine . As such when the packet is forwarded back to the virtual bypass switch module from the virtual machine the virtual bypass switch module may determine that the packet should be subsequently forwarded to the virtual machine for further processing. Based on such a determination the virtual bypass switch module may forward the packet in a serial fashion to any suitable number of virtual machines .

The virtual machines and of may be similar to the virtual machine of . As such each of the virtual machines and may emulate the hardware such as the microprocessor or controller of a device and may further emulate an operating system that may run one or more applications installed on the respective virtual machine . The hardware and operating systems being emulated on each of the virtual machines and may be the same or may be different. Furthermore each of the applications running on the virtual machines and may be the same or may be different. Although illustrates three virtual machines any suitable number of the virtual machines may be included in the computer system . For example the computer system may include less than three virtual machines or more than three virtual machines .

Accordingly as is discussed above the bypass switch of the computer system may cause data signals to bypass processing by the computer system when it has been determined that the computer system has failed and the virtual bypass switch module of the computer system may cause packets to bypass one or more of the virtual machines implemented on the computer system when it has been determined that an application on the virtual machines is unavailable.

At step a packet is received. At step a virtual machine VM that may process the packet is determined. For example if there are more than one virtual machines that may process the packet one of those virtual machines is determined to be the virtual machine that may process the packet. As another example if only a single virtual machine may process the packet that particular machine is determined to be the virtual machine that may process the packet. As a further example if the packet is to be processed by both a first virtual machine and a second virtual machine it may be determined that the first virtual machine is the virtual machine that may process the packet at this time. In one embodiment this determination may be made based on indications from the virtual machine indications made by a system administrator of the computer system or by computer executable code included in the virtual bypass switch module.

If there is a virtual machine that may process the packet the method moves to step where it is determined whether that particular virtual machine and the application running on that virtual machine is available. The determination of whether or not an application is available may be made through active monitoring of the virtual machine e.g. such as probing the virtual machine to determine whether or not it is available or through a passive method e.g. such as waiting to receive a heartbeat signal from the virtual machine . If the virtual machine and the application running on the virtual machine is determined to be available the packet is forwarded to the virtual machine for processing at step . On the other hand if the virtual machine and the application running on the virtual machine is determined to be unavailable the method moves back to step where it is determined whether there is another virtual machine that may process the packet.

If there is another virtual machine that may process the packet steps and may be repeated. For example there may be another virtual machine that may process the packet if more than one virtual machine is capable of processing the packet but the first virtual machine s application was unavailable. As another example there may be another virtual machine that may process the packet if the packet is to be processed by both a first virtual machine and a second virtual machine.

On the other hand if there is no other virtual machine that may process the packet the packet is forwarded to the physical network interface at step . For example there may be no other virtual machine that may process the packet if the packet has already been processed by a virtual machine. In such an example by forwarding the packet to the physical network interface the packet may be sent back along a network so that it may reach its destination. As another example there may be no other virtual machine that may process the packet if only a single virtual machine was capable of processing the packet but that particular machine s application was unavailable. In such an example by forwarding the packet to the physical network interface the packet may bypass any processing of the packet by the virtual machines.

Included in the schematic is the computer system the bypass switch the virtual bypass switch module a network the computer systems and the virtual machines and and various communication paths and . According to the illustrated embodiment the computer system of is similar to the computer system of the bypass switch of is similar to the bypass switch of the virtual bypass switch module of is similar to the virtual bypass switch module of and the one or more virtual machines and of are similar to the virtual machines and of .

As is discussed above the computer system of is similar to the computer system of . The computer system may further include a tunneling module operative to establish and maintain tunnels over a communications path e.g. such as communication paths and through the network and between the computer system and the computer systems and . The tunneling module includes tunneling functionality based on one or more transport and encapsulation protocols. In one embodiment the tunneling module includes a variety of tunnel capabilities including the ability to employ different transport and encapsulation protocols.

The tunneling module is also operative to handle the path between the computer system and the computer systems and using encapsulation and transport technologies such as Generic Routing Encapsulation GRE protocol RFC 2890 IP in IP Tunneling protocol RFC 1853 and or any other suitable protocol such as link layer encapsulation . The tunneling module is operative to support one or more reliable transport protocols e.g. TCP and one or more unreliable transport layer protocols e.g. UDP . Further information regarding tunneling capabilities may be found in patent application Ser. No. 11 834 576 entitled System and Method of Traffic Inspection and Stateful Connection Forwarding Among Geographically Dispersed Network Appliances Organized as Clusters which is incorporated herein by reference.

The network may connect the computer system to the computer systems and transporting one or more signals to and from the computer system and the computer systems and . The network may refer to any interconnecting system capable of transmitting audio video signals data messages or any combination of the preceding. The network may comprise all or a portion of a server backplane a high speed switch fabric a public switched telephone network PSTN a public or private data network a local area network LAN a metropolitan area network MAN a wide area network WAN a local regional or global communication or computer network such as the Internet a wireline or wireless network an enterprise intranet other suitable communication link or any combination of the preceding.

The computer systems and may implement the one or more virtual machines and respectively. The computer systems and may each be for example an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Further details of example embodiments of the computer systems and are described in . Although the schematic illustrates three computer systems the schematic may include any suitable number of computer systems. For example the schematic may include less than three computer systems or more than three computer systems .

Furthermore although the schematic illustrates the bypass switch and the virtual bypass switch module on a single computer system in other implementations the bypass switch may be located on a first computer system and the virtual bypass switch module may be executed on a second computer system that is completely separate from the first computer system. In such an embodiment the first and second computer systems may each include tunneling modules such as is described above. As such encapsulated packets may be forwarded from the first computer system to the virtual bypass switch module on the second computer system and encapsulated packets may also be forwarded to the virtual machines and implemented on the computer systems and respectively.

Additionally although the schematic illustrates the virtual machines being implemented on only computer systems and in other implementations the computer system may implement one or more virtual machines also. As such the virtual bypass switch module may providing forwarding functions e.g. such as either forwarding the packets to the virtual machines or bypassing the virtual machines for virtual machines implemented on the computer system and also the virtual machines and implemented on the computer systems and respectively.

In such an embodiment the computer system may act as an intermediate network device that receives the data signals carrying network traffic packets while they are being transported to the network devices connected to the network cloud from the network devices connected to network cloud . When the computer system receives the packets the computer system may cause the packets to be processed by the application such as a network application traffic management device application and or the application such as a security gateway application. For example when the applications and are available on implemented virtual machines in the computer system the virtual bypass switch module may forward the received packets to the applications and for processing. On the other hand if the applications and are unavailable the virtual bypass switch module may forward the received packets back to the physical network interfaces not shown in the computer system resulting in the packets bypassing the applications and

After the packets have been processed by the applications and or after the packets have bypassed processing by the applications and the packets may be forwarded along their path to their destination network devices. Accordingly the virtual bypass switch module may forward packets for processing by applications and when the applications are available and may bypass the applications and and the virtual machines that are implementing such applications when the applications and are unavailable.

While the methods and systems of the present invention have been described above with reference to specific embodiments some or all of the elements or operations thereof may be implemented using a computer system having a general purpose hardware architecture. illustrates an example computing system architecture which may be used to implement one or more of the operations or elements described herein. In one implementation a hardware system comprises a processor a cache memory and one or more software applications and drivers directed to the functions described herein.

Additionally the hardware system includes a high performance input output I O bus and a standard I O bus . A host bridge couples the processor to the high performance I O bus whereas an I O bus bridge couples the two buses and to each other. A system memory and network communication interface modules are coupled to the bus . The hardware system may further include video memory not shown and a display device coupled to the video memory. A mass storage and an I O ports are coupled to the bus . The hardware system may optionally include a keyboard and pointing device and a display device not shown coupled to the bus . Collectively these elements are intended to represent a broad category of computer hardware systems including but not limited to general purpose computer systems based on the Pentium processor manufactured by Intel Corporation of Santa Clara Calif. as well as any other suitable processor.

The elements of the hardware system are described in greater detail below. In particular the network interface modules provide communication between the hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network etc. The mass storage provides permanent storage for the data and programming instructions to perform the above described functions whereas the system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by the processor . The I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to the hardware system .

The hardware system may include a variety of system architectures and various components of the hardware system may be rearranged. For example a cache may be on chip with the processor . Alternatively the cache and the processor may be packed together as a processor module with the processor being referred to as the processor core. Furthermore certain implementations of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to the standard I O bus may couple to the high performance I O bus . In addition in some implementations only a single bus may exist with the components of the hardware system being coupled to the single bus. Furthermore the hardware system may include additional components such as additional processors storage devices or memories. As discussed above in one embodiment the operations of the virtual bypass switch module described herein are implemented as a series of software routines run by the hardware system . These software routines comprise a plurality or series of instructions to be executed by a processor in a hardware system such as the processor . Initially the series of instructions are stored on a storage device such as the mass storage . However the series of instructions can be stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via the network communication interface modules . The instructions are copied from the storage device such as the mass storage into the memory and then accessed and executed by the processor .

An operating system manages and controls the operation of the hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. According to one embodiment of the present invention the operating system is the Windows 95 98 NT XP operating system available from Microsoft Corporation of Redmond Wash. However the present invention may be used with other suitable operating systems such as the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems LINUX operating systems and the like. In one embodiment the hardware system may include any suitable hypervisor. For example the hardware system may include a Type I hypervisor such as vmware ESX or ESXi.

The above described embodiments advantageously provide various methods systems and apparatuses for bypassing an application running on a virtual machine when the application is unavailable and forwarding a packet to the application when the application is available. While a number of exemplary aspects and embodiments have been discussed above those of skill in the art will recognize certain modifications permutations additions and sub combinations thereof. It is therefore intended that the following appended claims and claims hereafter introduced are interpreted to include all such modifications permutations additions and sub combinations as are within their true spirit and scope

