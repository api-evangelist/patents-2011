---

title: Hierarchical routing and interface selection for multi-processor multimode network devices
abstract: The embodiments simplify the development of applications for current and future wireless communication devices, resolving the deficiencies of current methods by providing a hierarchical routing layer which abstracts the actual proximity of the network connection. An application can request and receive a type of network connection without having to address details of the actual connection established. A hierarchical routing layer is provided within the software architecture of each processor within the computing device. The hierarchical routing layer abstracts the actual proximity of the network connectivity on the modem from the applications using proxy network interfaces. The hierarchical routing layers on each processor cooperate to identify a best network interface for an application network request. The routing layer enables response to an application request for a network interface in a simple manner regardless of whether the network interface is provided on the application host processor or another processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411647&OS=09411647&RS=09411647
owner: QUALCOMM Incorporated
number: 09411647
owner_city: San Diego
owner_country: US
publication_date: 20110120
---
This application claims the benefit of priority to U.S. Provisional Patent Application 61 297 338 entitled Hierarchical Routing and Interface Selection for Multi processor Multimode Network Devices filed Jan. 22 2010 the entire contents of which are hereby incorporated by reference.

The present invention relates generally to the networking in computing devices and more particularly to methods and devices for selecting network interfaces in multi processor multimode network devices.

Historically wireless communication devices such as data cards cellular telephones wireless dongles etc. have been built using a single processor which acts both as a modem and to provide processing power for user interfaces and applications. As a result there has been no need to select a particular network interface to support an application since the basic architecture provided only a single alternative. However as network speeds have increased and as portfolios of applications available for execution on mobile computing devices have expanded conventional architectures for managing network connections have become inefficient.

Most modern wireless communication devices now feature a separate applications processor. This separate application processor is required to handle the increased central processor unit computing requirements of advanced applications that are becoming increasingly popular for use on mobile multimedia computing devices such as smart phones. Thus wireless communication devices featuring an application processor and at least one modem processor are now quite common such as smart phones personal digital assistants PDA net books etc.

As new wireless technologies continue to evolve traditional wireless communication devices are expected to include various types of network technologies in order to support seamless user roaming and mobility across multiple communication networks. Different wireless technologies can be integrated in a number of different ways including in multi modem device architectures to enable faster development and product integration. Consequently wireless communication devices are becoming increasingly complex in terms of number of modem processors and their various interconnections which complicates the development of applications for use on such devices.

Embodiments include systems and methods for selecting a network connection for an application within a computing device. Various embodiments include a hierarchical procedure among several processors to select a best network interface in response to a network access request.

Further embodiments include a first or local processor receiving a network access request from an application and forwarding to the network access request to secondary or remote processors via a proxy interface. Each secondary or remote processor may select a network interface that best satisfies the network access request and return information on this network interface to the first processor. The first processor may evaluate its own interfaces and the interfaces selected by any secondary processors to determine a best network interface overall.

Further embodiments involve the secondary processors forwarding the network access request to tertiary processors. Tertiary processors similar to the secondary processors may select a network interface that best satisfies the network access request and return information on this network interface to the secondary processor s . The secondary processors may consider the information returned from the tertiary in the secondary processor s selection process. This hierarchical selection process may be extended through multiple levels of processors.

Further embodiments may involve initiating a network configuration between the local processor and the selected best overall network interface. Connection setup may be initiated by an application or manager or may be initiated automatically. The resulting data path between the local processor and the selected best network interface may be a chain of interfaces across multiple processors.

The various embodiments will be described in detail with reference to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. References made to particular examples and implementations are for illustrative purposes and are not intended to limit the scope of the invention or the claims.

The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

As used herein the terms mobile device and computing device refer to any one or all of personal computers laptop computers cellular telephones personal data assistants PDA s palm top computers wireless electronic mail receivers e.g. the Blackberry and Treo devices multimedia Internet enabled cellular telephones e.g. the Blackberry Storm Global Positioning System GPS receivers wireless gaming controllers and similar personal electronic devices which include a programmable processor memory and one or more network interfaces.

As new wireless technologies continue to evolve traditional wireless communication devices are expected to include various types of network technologies in order to support seamless user roaming and mobility across multiple communication networks. Different wireless technologies can be integrated in a number of different ways including multi modem device architectures to enable faster development and product integration. Consequently wireless communication devices are becoming increasingly complex which complicates the development of applications for use on such devices. Using current application design techniques and software architectures application developers face a daunting task of keeping track of multiple modem interfaces that can provide an optimum connection for particular application networking requirements. Further changes to the architecture of the computing device such as the addition of new communications technologies or modems may require extensive application rewriting and testing. This is especially true for networking applications which rely on different network technologies to provide a multitude of communication services for applications.

The complexity that is possible in modern and future computing devices is illustrated in which shows a computing device architecture including an application processor connected to three modem processors i.e. modem processors . Each of the modem processors may include an internal modem and may be connected to a secondary modem such as secondary modems . A variety of peripheral devices such as peripheral devices may be connected to the computing device through a variety of connections such as to the application processor as in the case of peripheral device to a modem processor as in the case of peripheral device connected to modem processor or to secondary modems such as peripheral device connected to secondary modem . Such flexibility in coupling modem processors to the application processor enables a wide variety of different kinds of computer architectures to be constructed. Consequently application developers cannot anticipate all possible computer architectures that may be implemented for an application requiring network connectivity.

The various embodiments simplify the development of applications for current and future wireless communication devices resolving the deficiencies of current methods described above by providing a hierarchical routing layer which abstracts the actual proximity of the network connection. Using the various embodiments an application can be configured so that it is able to request and receive a particular type of network connection without having to address or otherwise be concerned with the details of the actual connection established or the configuration of the computing device.

In the various embodiments the hardware architecture and processor topology of the computing device is kept hidden from the applications. From the perspective of an application an application can access a network connection using the same application programming interfaces API and assuming the same interface behavior as with current policy based network access routing methods such as typical in single modem computing devices. From the perspective of the networking application the application manages a network interface which connects to a specific network and reads writes data into sockets associated with that network interface. A hierarchical routing layer is provided within the software architecture of each of the processors within the computing device i.e. the application processor and the one or more modem processors .

The hierarchical routing layer abstracts the actual proximity of the network connectivity on the modem from the applications using proxy network interfaces. The hierarchical routing layers on each device processor cooperate to identify a best network interface for a particular application network request. The hierarchical routing layer also enables connection of an application request to a network interface in a simple manner regardless of whether the network interface is provided on the application host processor another processor e.g. a modem processor or even on another processor via an intermediary processor.

A proxy network interface is an application that is located on the main application processor and represents a real network interface located on another processor. There can be one or more proxy interfaces each representing a different real interface on a secondary processor. Typically a proxy interface replicates the same Internet Protocol IP configuration and allows the same network operations as supported by the corresponding real network interface.

For ease of reference the processor on which an application is executing is referred to herein as the local processor because the processor is local from the application s perspective. Thus when a network interface is located on the same processor as the application the network interface is said to be available on the local processor.

In the various embodiments when an application requests a connection to a certain network type e.g. communication network technology the routing layer on the application processor performs a hierarchical interface selection procedure in order to select the best match interface for the application s needs. This interface selection procedure which is described more fully below with reference to enables the application processor to return the one interface among a plurality of interfaces available on multiple processors that provides the best match to the application s identified network parameters.

The connection of the application to the selected best interface depends upon whether the selected interface is local or available on another processor. If this network connectivity is directly accessible from the local processor i.e. the network interface is located on the same processor as the application a handle to the real network interface is returned to the application. If the network connectivity is accessible from a different processor i.e. the interface is located on a different processor a handle to a proxy interface is returned to the application. This proxy interface represents and connects to the same physical network that the application originally requested although the network connectivity is available on a remote processor. In other words if the network is connected through a local processor the application directly connects to the real network interface. However if the network is connected through a remote processor the application will connect to a proxy interface. In either case the application is oblivious to the actual location of the network connectivity and continues to use the network interface provided to it without necessarily knowing the proximity of the connection.

As is well known processors may have two types of interfaces an Rm type interface and an Um type interface. An Um type interface connects to a wireless network such as a wireless WAN LAN MAN network which provides connectivity to the Internet or other local or global service domains. The Rm type interfaces are interfaces that connect to peripheral devices over different types of interconnections. Such Rm type interconnections may be serial wired connections such as Universal Serial Bus USB Serial Peripheral Interface SPI Universal Asynchronous Receiver Transmitter UART Secure Digital Input Output SDIO etc. serial wireless connections such as a Bluetooth BT interface or shared memory. The Rm type interface can also be used for other wireless connectivity such as BT PAN and WiFi. Rm interfaces can be used to extend the network connectivity to a peripheral device such as Universal Integrated Circuit Cards UICC laptops other co hosted processors etc. Each Rm interface connects to a unique Um interface in order to obtain an IP configuration although multiple Rm interfaces may be served by one Um type interface using Network Address Translation NAT or IP routing mechanisms. If an Um type interface is exclusively connected to an Rm type interface the interfaces can be bridged together for efficient packet forwarding rather than routing packets through the packet routing module.

Proxy interfaces may connect to Rm interfaces and hence pose as a peripheral device to the connecting modem processor. On the other side of the interface the proxy interface may pose as an Um type interface serving an active and usable IP configuration. These proxy interfaces can be used directly by an application executing on the local processor or by another peripheral device outside the local processor such as a laptop or another modem. Hence it is possible with the various embodiments to build a whole network of processor topology in the computing device. This processor topology can allow any number of peripheral devices to connect to any number of available modem processors in order to access different network technologies. The processor topology also enables any number of modem application processors to be connected together in serial or parallel fashion. Thus applications can run on any processor within the computing device either modem processors or application processor while having access to wireless networks accessible through remote processors.

Thus the various embodiments enable applications to request and obtain network interfaces in any of the device architecture configurations shown in without further complicating application development or requiring the applications to be developed for specific device configurations.

Referring to the various embodiments may be implemented in the form of a routing layer which is included within the software protocol stack of the application processor and each modem processor within the computing device.

When an application on a local processor requests a network interface the routing layer on the local processor may implement a hierarchical routing algorithm to select a particular network interface to be returned to the application. The hierarchical routing algorithm may be implemented in the form of a hierarchical routing module HRM within the routing layer of each processor within the computing device. Example operations that may be executed within the hierarchical routing algorithm by an HRM in each of the processor routing layers are illustrated in which are described below.

In a loop spanning steps to the local processor may obtain network interface suitability information from each connected processor that can be used to select a best interface for the application. Specifically in step the local processor may select one x of the available directly connected processors for evaluation. In step the local processor may forward the interface selection request including all of the network selection policy parameters to the selected processor x via one g of the proxy interfaces in Ipx. The selected proxy interface may be any interface that is currently available i.e. the proxy interface may be randomly selected from the set Ipx . If there are no processors coupled to the local processor i.e. the list of available processors Pr is a null set steps and will be skipped. In step the local processor will receive back from the selected processor x information regarding the interface best matching the network selection policy parameters available on that processor. This information may include a best match interface Mi which is an interface identifier that is mapped to the corresponding proxy interface Mpi which is one of the interfaces among the set Ipx and a match index I which may be an integer value indicating how well the network interface can support the requested network policy. In an embodiment the better the identified network interface matches the network selection policy parameters the higher the value of the match index I. Providing a match index value facilitates identifying an available network interface among a plurality of network interfaces available through a plurality of modem processors that best matches the application s network policy parameters under the existing network conditions.

The information reported back to the local processor in step may be generated by the selected processor x in a similar routing layer routing algorithm as described below with reference to . The information reported back to the local processor step may be stored by the local processor routing layer as a four tupple x Mpi Mi I in step . This four tupple x Mpi Mi I value indicates that the selected processor x can provide the desired network connectivity via proxy interface Mpi with a match index I and that the interface Mi on the remote processor x will be used to provide this connectivity.

In determination step the local processor determines whether the selected processor is the last processor within the list Pr. If there is another processor to evaluate i.e. determination step No the processor may return to step to select the next processor x within the list Pr.

If all processors have been evaluated i.e. determination step Yes the processor may evaluate each real interface i.e. the interfaces available in the local processor in list Ir in a loop spanning steps to . Specifically in step the local processor may select one h interface within the list Ir of real interfaces connected to the local processor. In step the network selection policy parameters are evaluated against the selected interface h characteristics to determine a match index I value for the selected interface. The evaluation of local interfaces against the desired network capabilities and network policy parameters can be accomplished using any of a variety of methods well known to one of skill in the art. Information regarding the degree to which a local interface satisfies the interface selection request may be stored in a four tupple 0 Null h I value. This four tupple 0 Null h I indicates that the local processor indicated by the value 0 can support the desired network connectivity with a real interface h that has a match index value of I. In determination step the local processor determines whether the selected local interface h is the last local interface within the list Ir. If there is another local interface to evaluate i.e. determination step No the processor may return to step to select the next local interface h within the list Ir.

If all local interfaces have been evaluated i.e. determination step Yes local processor evaluates the stored four tupple values to identify the interface with the highest match index I which is selected for use in step . Information within the four tupple of the selected interface is recalled from memory as part of step .

In determination step the local processor determines whether the selected interface is a remote or local interface such as by determining whether the processor ID i.e. the first value in the four tupple is equal to 0 which indicates that the selected interface is local. If the selected interface is a local interface i.e. determination step Yes the network configuration of the selected interface is initiated in the network defined manner in step .

If the selected interface is a remote interface i.e. determination step No and the processor ID is a value other than 0 the proxy interface Mpi is configured to associate with the remote processor in step . This configuration of the proxy interface Mpi may be accomplished by configuring the proxy interface and establishing a connection to the selected interface of the remote processor i.e. the remote modem .

Various embodiments may implement different methods for initiating the connection setup between the proxy interface Mpi and the selected interface Mi in step . In a first method an application or connection manager may initiate the connection setup. Based on a selected interface Mi returned by the hierarchical routing module HRM the application or connection manager may issue a network connect request. Configuration of the interface may happen as part of this process. In a second method the connection setup may occur automatically as soon as the best match interface is available or based on another triggering event. Configuration of the interface then happens after that.

In both cases the connection setup and configuration process may proceed in step as further illustrated in . After a connection setup has begun the interface on the remote processor corresponding to the proxy interface Mpi may be configured by the proxy interface Mpi binding to a corresponding Rm interface on the remote processor in step . In step this Rm interface binds to a Um interface on the same remote processor which may be a real interface or another proxy interface. If the Um interface is real i.e. determination step Real the remote processor may send the interface configuration information to the local processor in step and the proxy interface Mpi on the local processor may be configured based upon configuration information sent to the local processor by the remote processor in step . This will complete the network connection setup step .

As illustrated in this configuration process may be hierarchical and repeated along a chain of multiple connected processors. Thus if the proxy interface Mpi binds to a proxy Um interface i.e. determination step Proxy the process may be repeated by returning to step in to select the next interface to the next processor x. The selected interface may then be bound in this manner with the proxy Um interface i.e. the corresponding Rm interface of another remote processor binding to another Um interface by repeating steps through . This chain of binding interfaces may continue until a real Um interface is reached that may provide connectivity to a real physical network and thus complete the data path setup. Once a real Um interface is bound i.e. determination step Real each remote processor may send the interface configuration information to the preceding local processor in step and the proxy interface Mpi on the local processor may be configured based upon configuration information in step with the process of sending of interface configuration information and configuring each proxy interface continuing until all proxy interfaces in the chain of interfaces have been configured. This will complete the network connection setup step . Thereafter all packets transmitted from an application may travel through the chain of interfaces established in this data path.

The same basic hierarchical routing algorithm may be implemented on each processor in a routing layer. This embodiment will support an arbitrary network of processors connected to together in a computer architecture and allow applications running on any one of the processors to access any network via any modem. Thus when a network selection request is forwarded to the next processor in step the same basic algorithm is executed again over the set of local and proxy interfaces on that next i.e. remote processor. The interface selection request will arrive over an Rm link connected to the proxy interface g. The Rm interface will forward the request to the routing layer and invoke the hierarchical routing algorithm. From the Rm interface perspective this process is how the interface supports peripheral connectivity in single modem devices e.g. or dual processor devices e.g. . As the same routing interface selection algorithm is repeated on each processor the network interface can proceed in a recursive manner or other tree traversal method from processor to processor through the computing device architecture.

Since applications may run on any processor within a computing device architecture such as the computer architectures illustrated in the various embodiments may be implemented using routing layers that implement the same basic process of selecting a best network interface regardless of whether the request for the interface is received from a local application or from a connected processor i.e. regardless of whether the processor is a local processor or a connected processor . This is illustrated in which shows an example method which may be implemented on a remote processor x to respond to the interface selection request forwarded by the local processor in step described above.

Referring to in response to receiving the interface selection request with policy parameters in step the remote processor may evaluate the processor s configurations and enumerate a list Pr of available processors that are directly connected to the remote processor in step . This list of processors available to the remote processor will not include the processor from which the interface selection request was received. In step the remote processor may enumerate a list of available network interfaces on the remote processor. This list may include a list of the real interfaces Ir and the proxy interfaces Ip available on the remote processor. In a loop spanning steps to the remote processor may for each processor x within the list of available processors Pr enumerate a list of all proxy interfaces representing an interface on each directly connected i.e. doubly remote processor referred to as Ipx. In other words in step the remote processor may select a particular one x of the available directly connected doubly remote processors for evaluation enumerate a list Ipx for that processor of all proxy interfaces representing an interface in step and repeat these operations until the last doubly remote processor x has been evaluated i.e. determination step Yes .

In a loop spanning steps to the remote processor may obtain network interface suitability information from each connected doubly remote processor that can be used to select a best interface for responding to the interface selection request. Specifically in step the remote processor may select one x of the available directly connected doubly remote processors for evaluation for receiving interface suitability information. In step the remote processor may forward the interface selection request including all of the network selection policy parameters to the selected doubly remote processor x via one g of the proxy interfaces in Ipx. The selected proxy interface may be any interface that is currently available i.e. the proxy interface may be randomly selected from the set Ipx . If there are no doubly remote processors coupled to the remote processor i.e. the list of available processors Pr is a null set step will be skipped. In step the remote processor will receive back from the selected doubly remote processor x information regarding the interface best matching the network selection policy parameters available on that processor. This information may include a best match interface Mi which is an interface identifier that is mapped to the corresponding proxy interface Mpi which is one of the interfaces among the set Ipx and a match index I which may be an integer value indicating how well the network interface can support the requested network policy. The information reported back to the remote processor step may be stored by the remote processor routing layer as a four tupple x Mpi Mi I in step . In determination step the remote processor determines whether the selected doubly remote processor is the last processor within the list Pr. If there is another doubly remote processor to evaluate i.e. determination step No the processor may return to step to select the next processor x within the list Pr.

If all doubly remote processors have been evaluated i.e. determination step Yes the remote processor may evaluate each real interface i.e. the interfaces available in the remote processor in list Ir in a loop spanning steps to . Specifically in step the remote processor may select one h interface within the list Ir of real interfaces connected to the remote processor. In step the network selection policy parameters are evaluated against the selected interface h characteristics to determine a match index I value for the selected interface. The evaluation of local interfaces against the desired network capabilities and network policy parameters can be accomplished using any of a variety of methods well known to one of skill in the art. Information regarding how well a local interface satisfies the interface selection request may be stored in a four tupple 0 Null h I value. This four tupple 0 Null h I indicates that the remote processor indicated by the value 0 can support the desired network connectivity with a real interface h that as a match index value of I.

In determination step the remote processor determines whether the selected local interface h is the last local interface within the list Ir. If there is another local interface to evaluate i.e. determination step No the remote processor may return to step to select the next local interface h within the list Ir.

When all local interfaces have been evaluated i.e. determination step Yes the remote processor evaluates the stored four tupple values to identify the interface with the highest match index I which is selected in step . In step the remote processor returns to the local processor i.e. the processor that issued the interface selection request the interface selection information including the proxy interface identifier Mpi and the interface match index I. If the selected interface is local i.e. on the remote processor the interface identifier h is returned as the proxy interface identifier Mpi.

By implementing the various embodiments in a distributed hierarchical decision making architecture using similar routing layer modules on all processor within or connected to the computing device as described above the various embodiments can be employed with computing devices that have any number of different layers of processors. Further applications written for one computing device architecture may be implemented on computing devices with much more complex multiprocessor architectures without the need for changes to the code or testing for configuration compatibility. Additionally the various embodiments operate the same regardless of which processor hosts the application which issues the network connection request.

The various embodiment procedures are hierarchical and can span all processors within a computer s architecture. In general the hierarchical routing algorithm allows for the device topology to be represented as a tree like structure as illustrated in to include any level of complexity while allowing the process to function correctly. The foregoing embodiment descriptions presume an implementation in which the polling of processors proceeds in a sequential manner moving from interface to interface and from coupled processor to coupled processor. However this is but one example of how processors may be queried and any number of other methods may be used. For example the interface selection request may be issued by the local processor to all attached processors in parallel so that the attached processors may perform their own evaluation of available interfaces in parallel and report back results when complete. In another embodiment that may be suitable for complex computer architectures such as illustrated in the hierarchical routing algorithm can be implemented using one of several tree traversal algorithms without diverting from the basic procedure described herein.

The various embodiments support implementations in which applications may be running on various modem processors and not on a main application processor. This may occur for a number of reasons. For one an application may have been developed and tested for a specific modem processor which is now connected to an application processor. When other processors have been added over time to support additional network connectivity enabling the application to continue to run on the specific modem processor may avoid the need to reintegrate existing applications on new processor environments. Additionally specific radio functionality may be only available on certain modem processors or the more optimally accessible through a particular modem processor. Further system applications that need to run on the modem processor for interface management and configuration may be hosted on the modem s processor rather than the application processor.

In certain scenarios applications running on modem processors may desire to use radio connectivity provided by other modem processors. The hierarchical routing algorithms of the various embodiments can be used to solve such scenarios. As shown in an application app operating on modem processor may desire to use a wireless network connected through modem processor . In this example there is no direct connection between modem processor and modem processor . In order to provide the requested network access to app another proxy interfaces may be added which connects back to the applications processor. Beyond that the connection may be set up in the same way that a peripheral device connects to the application processor. As long as all of the modem processors in the system are uniquely indexed the hierarchical routing algorithm can be executed without modification in order to find a suitable interface for the application even though it is operating on modem processor .

By implementing the embodiments in a hierarchical decision making architecture each processor within the computing device can make its own determination of a local best connected interface for the requested network connection and relay its local best connection characteristics to the application making the request or processor forwarding the request i.e. the next higher layer processor . This distributed decision making may be explained by way of an example with reference to . In the computer architecture illustrated in the application processor is coupled to two modem processors i.e. modem processor and modem processor each of which is connected to another modem processor i.e. modem processor is connected to modem processor and modem processor is connected to modem processor . Implementing the hierarchical routing algorithm on each processor results in forwarding the interface selection request parameters to each processor so that each can identify its best available interface. Thus in response to an interface selection request modem processor may identify to modem processor that Um interface can satisfy the interface request for accessing WWAN with a particular match index value I. In turn modem processor will evaluate its own local Um interface for accessing WWAN to determine its match index value I and compare that value to the received match index I for interface on modem processor in order to select the better of the two interfaces for reporting to the application processor . Similarly the modem processor will provide a match index value I for interface for accessing WWAN to modem processor which will select the better of its local interface and proxy interface to report to the applications processor . Thus the application processor may select a best interface in response to an application request from among the match index I received from modem processor via proxy interface the match index I received from modem processor via proxy interface and local interface .

The configuration and setup of a data path may also follow a hierarchical approach. For example again with reference to if Um interface of modem processor has been selected as the best interface in response to an application request from application processor the connection setup and configuration operations may begin. The connection setup operation may be initiated by an application or automatically but either way the proxy interface and its corresponding Rm interface may be configured based on information sent between the application processor and modem processor . The configuration process may be repeated down a chain of interfaces to establish a data path to the selected Um interface . Thus the proxy interface may bind with the Rm interface which may in turn bind with interface . Because interface is a proxy and not a real interface interface may bind with the Rm interface which may bind with the selected Um interface . The selected Um interface may provide the connection to the real physical network and thereby complete the data path.

Additionally interface chains may be established in a similar manner in a reverse direction from one requesting processor to another processor having a real interface to a desired network or resource. Thus a second processor in one chain of interfaces may establish a proxy interface connection with a third processor that may already have a different proxy interface connection established with the second processor as part of a second chain of interfaces. In such a situation both proxy interface connections between the second and third processors may be established using the same operations as described above with reference to with each chain of interfaces initiated by a different initiating processor specifying similar or different network selection policy parameters.

The embodiments can be applied to a vast array of computing architectures and application scenarios and thus are not limited to the foregoing descriptions of example embodiments. Further the number of proxy interfaces and real Rm interfaces that need to be supported in each processor will vary from system to system and can be statically or dynamically configured. In one embodiment a static configuration table may be input to the modem during the boot up process and the modem processor can create a desired number of interfaces based on such configuration information. In an alternative embodiment Rm interfaces can be created on an as needed basis dynamically. Proxy and Um interfaces are typically created up front to represent all of the possible connectivity options available in the particular computer device.

Even though applications are oblivious to the proximity the network connections applications may observe additional delays if the connections span multiple processors. To accommodate this embodiments may minimize the impact by reducing the inter processor communication delays as much as possible.

To support the various embodiments a signaling mechanism or signaling channel is required to support communication between the various hierarchical routing modules or routing layers of the different processors for transmitting interface selection request and receiving back the results. Any suitable signaling mechanism or signaling channel can be used for this purpose such as the QMI messaging protocol. It should be noted that the signaling mechanism may be accomplished over the same physical interconnect with signaling occurring via the signaling mechanism and data transmissions via IP traffic as is provided in USB interfaces.

The various embodiment procedures described herein should function irrespective of the types of interconnections used between different processors which can vary within the same computing device. Thus the embodiments are not tied or limited to any particular computing architecture inter processor communication protocol or connection or wireless communication technology.

In a further embodiment the best interface selection decision or interface match index values and four tupples may be stored in memory of the application processor in order to support subsequent application network access requests. This embodiment may be useful to save processing time when no changes to device configuration network characteristics or network selection policy parameters have occurred since a last time the hierarchical routing algorithm was accomplished. In this embodiment the application processor may compare the network selection policy parameters to parameters from a previously completed network selection to determine if they are the same and configure a network connection according to a stored selected interface configuration information.

Typical mobile devices suitable for use with the various embodiments will have in common the components illustrated in . For example an exemplary wireless receiver may include an application processor coupled to internal memory and a display . Additionally the mobile device may have an antenna for sending and receiving electromagnetic radiation that is connected to one or more wireless transceivers coupled to the application processor . As described above some modem processors may be indirectly coupled to the application processors as illustrated for processors which are coupled to the application processor the processor and respectively. Wireless mobile device typically also includes a key pad or miniature keyboard and menu selection buttons or rocker switches for receiving user inputs. The wireless mobile device may also include a wired network interface such as USB or FireWire connector socket for connecting to external networks and other computing devices such as a laptop computer .

The various aspects of the present invention described above may be implemented on any of a variety of mobile computing devices such as a laptop computer . Typically such computing devices will have in common the components illustrated in . For example a laptop computer may include a processor coupled to internal memory e.g. hard disc memory and a display such as a liquid crystal display LCD all included within a case or housing . A laptop computer will typically include a pointing device in keyboard coupled to the processor . The processor may further be connected to a wired network interface such as USB or FireWire connector socket for interconnecting the processor with an external modem or processor via a cable such as to a wireless mobile device as described above connected to its wired network interface . Additionally the laptop computer may include an internal modem for establishing wireless network communications such as via an antenna . This internal wireless communication modem may be configured according to the architecture illustrated in in which the connection between the processor and the modem is the internal interconnect .

The various processors may be any programmable microprocessor microcomputer or multiple processor chip or chips that can be configured by software instructions applications to perform a variety of functions including the functions of the various embodiments described herein. In some mobile devices multiple processors may be provided such as one processor dedicated to wireless communication functions and one processor dedicated to running other applications. Typically software applications may be stored in the internal memory before they are accessed and loaded into the processor . In some mobile devices the processor may include internal memory sufficient to store the application software instructions. In many computing devices the internal memory may be a volatile or nonvolatile memory such as flash memory or a mixture of both. For the purposes of this description a general reference to memory refers to all memory accessible by the processor including internal memory removable memory plugged into the wireless receiver and memory within the processor itself.

The various embodiments provide a number of benefits for computing devices. Any computer architecture or processor apology can be supported using a single distributed implementation of the hierarchical routing algorithm. Applications may reside on any processor within the computing device and may be able to access networks via any other processor without requiring the application to know the proximity of the network radio. Existing applications do not need to be changed rewritten or reintegrated in order to adapt to new emerging network technologies and computing device architectures. Device manufacturers can add additional network capabilities by adding new modems without significantly impacting existing network and communication applications. Processors from different manufacturers can be combined and joined together for faster device integration and quicker time to market implementation of new communication technologies. All of these benefits are in addition to the significant savings in application development time enabled by freeing the application developer from having to keep track of and manage network interfaces within a complex computing device.

The foregoing method descriptions and the process flow diagrams are provided merely as illustrative examples and are not intended to require or imply that the steps of the various embodiments must be performed in the order presented. As will be appreciated by one of skill in the art the order of steps in the foregoing embodiments may be performed in any order. Words such as thereafter then next etc. are not intended to limit the order of the steps these words are simply used to guide the reader through the description of the methods. Further any reference to claim elements in the singular for example using the articles a an or the is not to be construed as limiting the element to the singular.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The hardware used to implement the various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Alternatively some steps or methods may be performed by circuitry that is specific to a given function.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in hardware the functionality may be implemented within circuitry of a wireless signal processing circuit that may be suitable for use in a wireless receiver transceiver or mobile device. Such a wireless signal processing circuit may include circuits for accomplishing the signal measuring and calculating steps described in the various embodiments. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a processor readable medium. The steps of a method or algorithm disclosed herein may be embodied in a processor executable software module which may reside on a processor readable storage medium. A storage media may be any available tangible storage media that may be accessed by a processor or computer. By way of example and not limitation such processor readable media may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to store desired program code in the form of instructions or data structures and that may be accessed by a processor or computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of processor readable media. Additionally the operations of a method or algorithm may reside as one or any combination or set of codes and or instructions on a machine readable storage medium and or processor readable storage medium which may be incorporated into a computer program product.

The preceding description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the following claims and the principles and novel features disclosed herein.

