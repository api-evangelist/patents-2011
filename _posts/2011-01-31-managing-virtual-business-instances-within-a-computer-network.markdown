---

title: Managing virtual business instances within a computer network
abstract: Methods and apparatus, including computer program products, implementing and using techniques for orchestrating a business process in a computer network. A script describing a business process is received from a client machine over the computer network. The script is compiled into executable program instructions. A reference to the script and data to be operated on by the script is received from the client machine over the computer network. The data is processed in accordance with the script. The result of the data processing is returned to the client machine over the computer network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09338214&OS=09338214&RS=09338214
owner: salesforce.com, inc.
number: 09338214
owner_city: San Francisco
owner_country: US
publication_date: 20110131
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 10 951 405 for MANAGING VIRTUAL BUSINESS INSTANCES WITHIN A COMPUTER NETWORK by Paul Hinks filed Sep. 27 2004 which claims priority under 35 U.S.C. 119 from U.S. Provisional Patent Application No. 60 512 601 for APPARATUS AND METHODS FOR MANAGEMENT OF VIRTUAL BUSINESS INSTANCES WITHIN A COMPUTER NETWORK filed Oct. 16 2003 the entire disclosures of which are incorporated herein by reference for all purposes. The present application is also related to U.S. Pat. No. 7 689 711 for SYSTEM AND METHOD FOR ROUTING MESSAGES BETWEEN APPLICATIONS filed Mar. 30 2001 to U.S. Pat. No. 7 788 399 for SYSTEM AND METHOD FOR MAPPING SERVICES filed Mar. 30 2001 and to U.S. Pat. No. 7 516 191 for SYSTEM AND METHOD FOR INVOCATION OF SERVICES the entire disclosures of which are incorporated herein by reference for all purposes.

The present invention relates to techniques for enabling communication between web services in a network environment.

The web service provider market is one of the fastest growing segments of the software industry. Web service providers make enterprise applications such as human resources administration recruiting travel and expense management sales force automation and so on available to customers over the web on a subscription basis or for free. These enterprise applications are fully managed and hosted by the web service providers which results in significant cost savings for enterprises using the web services and eliminates many of the issues requiring individual enterprise application integration EAI solutions.

Some web service providers merely host and manage third party packaged software for their customers i.e. managed hosters . Others build new applications from the ground up to take advantage of the benefits and cost savings of the web service provider model.

Client applications can locate the web services using a UDDI Universal Description Discovery and Integration service which is based on XML eXtended Markup Language and SOAP Single Object Access Protocol . XML is a markup language for documents containing structured information that is the information and an indication of its role and is a common way to provide information over wide area networks such as the Internet. SOAP is an XML based protocol for exchanging information in a decentralized distributed environment. SOAP can be used in combination with a variety of protocols but its most frequent use is in conjunction with HTTP Hyper Text Transfer Protocol . Web service providers can register contact addresses and descriptions of the provided web services in a UDDI directory and prospective clients can use the UDDI directory as a phone book for web services and look up web services that fit the clients needs.

Web services are typically described in a Web Service Description Language WSDL which is an XML based language format. WSDL enables separation of the description of the abstract functionality offered by a web service from concrete details of a service description such as where and how the functionality is offered. WSDL describes web services starting with the messages that are exchanged between the web service provider and a requestor. The messages are first described abstractly and are then bound to a concrete network protocol and message format. A message consists of a collection of typed data items. A message exchange between the web service provider and the requestor is referred to as an operation. A collection of operations is a portType. Collections of portTypes are grouped and referred to as a service. A web service represents an implementation of a service and contains a collection of ports where each port is an implementation of a portType which includes all the concrete details the requestor needs in order to interact with the web service.

In many cases a client may need to contact several web services to obtain information that is needed by the client for a particular purpose. For example a client can send out a request for quote RFQ message to several web services to obtain quotes for a particular product or service that the client would like to obtain and based on the results select the most affordable product or service supplier or the supplier that offers the shortest delivery time and so on. Another example is a client that sends a loan application to a risk assessment web service which evaluates the application. Clients with a low risk assessment are automatically accepted whereas clients with a medium or high risk assessment are initially denied and asked to contact a second web service for further evaluation. The second web service returns a final result such as yes or no to the client. In most cases where several web services are used to gather information the client is responsible for coordinating the contacting of them and making sure that the web services are addressed in a proper sequence for example as outlined in the above loan application example. A further complication is that the different web services may use different communication models such as synchronous communication or asynchronous communication. The web services may also request different input values such that the client must modify the request for each individual web service that is being contacted. Thus it would be desirable to further automate processes in which the results from several web services are used.

In general in one aspect the invention provides methods and apparatus including computer program products implementing and using techniques for orchestrating a business process in a computer network. A script describing a business process is received from a client machine over the computer network. The script is compiled into executable program instructions. A reference to the script and data to be operated on by the script is received from the client machine over the computer network. The data is processed in accordance with the script. The result of the data processing is returned to the client machine over the computer network.

Advantageous implementations can include one or more of the following features. The business process can involves one or more web services that are accessible over the computer network and processing the data can include passing the data to at least one web service and obtaining a response from the web service. Any responses received from the one or more web services can be aggregated into an aggregated response and the aggregated response can be transmitted back to the client machine over the computer network. An error message can be returned to the client machine if one or more of the following conditions occur the data has an incorrect format for the script a compilation error occurs during the compilation of the script and the reference identifies an invalid script. The script and the data to be operated on by the script can be received in a single message from the client machine. The script can be received in a first message from the client machine and the compiled script can be stored in a business process engine and be made available for multiple invocations with different sets of data received from different client machines. The script can be expressed in a business process execution language format. The script and the data can be received asynchronously from the client machine over a push handler in the computer network. The response can be transmitted to the client machine asynchronously over a post handler in the computer network.

The resources used in the processing of the data can be monitored and the processing can be terminated if the resource usage exceeds a predetermined threshold value. An extension functionality can be provided for facilitating the interaction between the client machine the network and the one or more web services where the extension functionality includes one or more of activities describing actions to be performed during the processing of the data expressions for extracting computer network specific information and correlations for associating instances of scripts with messages that fulfill specific criteria. Fault catchers can be provided that identify errors during the orchestration of the business process of one or more of the following types errors encountered during the receipt of a message from a client machine errors encountered during processing of a message inside the computer network errors encountered during delivery of a message inside the computer network errors encountered during routing of a message inside the computer network and errors indicating that a message has expired before it was delivered to a web service or before a response was received from a web service. The computer network can be a local area network or a wide area network.

In general in another aspect the invention provides a business process engine. The business process engine receives a script describing a business process from a client machine over the computer network compiles the script into executable program instructions receives a reference to the script and data to be operated on by the script from the client machine over the computer network processes the data in accordance with the script and returns the result of the data processing to the client machine over the computer network.

In general in another aspect the invention provides a message routing system. The message routing system includes one or more client computers one or more web services a business process engine and an integration service network. The client computers send and receive messages including business process orchestration instructions and data to be operated on by the business processes. The web services receive and process messages in accordance with the business process orchestration instructions. The business process engine receives a message including business process orchestration instructions from a client machine receives a message including data to be operated on by the business process orchestration instructions from a client machine and orchestrates the business process in accordance with the received business process orchestration instructions. The orchestration includes passing the received data to at least one web service and obtaining a response from the web service aggregating any responses received from the at least one web service and passing the aggregated response to the client computer. The integration service network routes messages between the client computers and the business process engine and between the business process engine and the one or more web services

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

The invention relates to a Business Process Engine BPE for orchestrating business processes that involve multiple services in a computer network. The BPE allows complex business processes to be created and run inside a computer network such as an integration services network which will be described in further detail below. The BPE adds logic and flow control to the routing capabilities of the integration services network while at the same time leveraging the integration service network s reliability once only delivery and correlation features. Without the BPE the integration services network can perform simple point to point messaging such as from a client computer to a web service. With the BPE included in the integration services network the integration services network can support powerful business process choreography such as delivering a message from a client computer to multiple web services and aggregating the obtained responses before transmitting them to the client computer that sent the original message.

In use the business process engine BPE allows a user to orchestrate a business process that involves calls across multiple processes. A client computer sends a single message to the BPE which can in turn invoke many services over a long period of time correlate all of the requests and responses to and from the services and then return a response representing the aggregated results of the processing to the client that issued the message. This greatly simplifies the tasks the client computer is requested to perform. All the invocations of the services occur through the integration services network. Thus it is completely opaque to the client what services within the integration services network are addressed and what communication format the different services support. It is also not necessary for the clients to provide additional headers for correlation or process management which would typically be necessary outside the integration services network. The messaging within the integration services network and the BPE services and clients is performed asynchronously but can appear to the client as being synchronous or asynchronous. The messages can be any XML formatted messages such as purchase orders that might require several other processes to be invoked such as checking the suppliers availability and price of individual parts needed for a product . Messages within the integration services network can be automatically resent which takes away the burden from the client to keep a record of which services have received the message and which services have not received the message.

The invention will now be described by way of example with reference to specific implementations that are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific implementations it will be understood that this description is not intended to limit the invention to the described implementations. On the contrary this detailed description is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the claims.

The system further includes an integration services network for enabling the requestors to communicate with the web services irrespective of the communication methods supported by the individual requestors and web services. The integration services network is accessible for the requestors and the web services over a local area network such as an intranet or over a wide area network such as the Internet. The integration services network facilitates interoperability using a wide variety of web services technologies and standards including for example SOAP WSDL WS Security WS Policy and Business Process Execution Language BPEL and mediates the technology differences in data formats communications protocols and business policies through a set of established and defined policies. The system can be either an open system or a closed system. In an open system typically the requestors and web services are owned and or managed by entities distinct from each other and distinct from the owner of the integration services network . In the closed system the requestors and web services are typically owned and or managed by the owner of the integration services network . Combinations of open and closed system are also possible in which there are some commonly owned and or managed components and some components that are owned and or managed by different entities.

As can be seen in the integration services network acts as an intermediary for a message that is sent from a requestor to one or more web services . The message can for example be a request for information that is sent by a specific requestor to a specific web service that is hosted at a remote location.

In some implementations the integration services network can specify which requestors have permission to access the web services . For example the integration services network can provide security management including authentication authorization and security policy enforcement at various points in a message s lifecycle inside the integration services network for example when a message is sent into the integration services network from a requestor and when the message is routed to its destination web service . In one implementation the policies needed for the integration services network to perform security management operations are stored securely in a policy repository in the integration services network . According to various implementations the requestors and the providers of the web services need not be aware of the message format requirements of the party to which the message is sent nor of any message format translation taking place in the integration services network .

In addition to providing mechanisms for mediating messages sent between requestors and web services the integration services network also preferably includes a web service directory for storing various information regarding the web services that are accessible through the integration services network . Such information can include for example information similar to the UDDI information which facilitates locating web services for requestors WSDL files for the different web services and policies that control which requestors and web services can interact and how the interaction occurs. The integration services network preferably also includes mechanisms for creating and combining web services registering requestors and their identifying information and handling messages routed between web services and or requestors . The directory can be created from one or more databases stored on one or more memory devices on one or more computing platforms. Implementations of the integration services network can also include components enabling complex routing and business process management which both have been described in the above referenced patent applications.

The integration services network also contains a business process engine BPE . In one implementation the BPE allows a client to orchestrate business processes written in IBM s Business Process Execution Language BPEL within the integration services network . Information on developing the BPEL processes can be found in the document Business Process Execution Language for Web Services version 1.1. It should be noted that BPEL is merely used herein as an example of a language suitable for expressing business processes. Other implementations of the BPE can use other languages such as JAVA or JavaScript and otherwise operate according to similar principles as the BPE implementation using the BPEL language described herein.

In addition to supporting the BPEL language the BPE provides extensions that facilitate the orchestration of the business process within the integration services network . As will be discussed in further detail below in one implementation the BPE can be invoked in one of two ways using a direct or a virtual mode. In both cases the invocation message is sent to the BPE through the integration services network . In this implementation the BPE processes reference web services that are registered on the integration services network and can therefore be expressed in a simplified way as will be seen below.

In the direct mode the BPE receives both its instructions and its data in a single message that is the message contains a header or body telling the BPE where to find the instructions needed by the BPE to operate on the received message as well as the data to be orchestrated. The BPE creates an instance of a router that exists in the context of that message only. The message is orchestrated according to the instructions and at the termination of the orchestration sequence the router instance is destroyed. All messages created by the router are addressed from and preferably seen in reporting as from the BPE itself.

In the virtual mode the BPE creates an instance of the BPEL instructions which can be invoked multiple times with different sets of data. The invocation message containing the data to be orchestrated is sent to a network address for the BPE process in the integration services network and results in a new instance of the route being created to orchestrate that message . All messages that are subsequently created by the BPE during its operation are addressed from and shown in reporting as being from the BPEL process associated with the orchestration instructions. As will be described in further detail below the exact behavior of the BPE varies according to whether the message is a request or notification. In some cases the BPE returns a response while in others no response is returned.

Additional mechanisms and techniques for provisioning services and for enabling disparate entities to interact according to the invention are described in U.S. patent application Ser. Nos. 09 820 964 09 820 965 09 820 966 10 727 089 10 728 356 and 10 742 513 which are incorporated herein by reference for all purposes. Any of the mechanisms described in these referenced applications can easily be applied with the techniques described herein.

In one implementation the BPE receives its messages from the push handler and replies asynchronously through the post handler of the integration services network . In another implementation the BPE does not communicate with the integration services network through the push and post handlers but is instead integrated into the core router of the integration services network such that the business processes are executed in line with the transfer of messages through the integration services network . That is the BPE gets invoked if requested at the point at which routing of the received messages is performed. In both implementations the BPE only receives its messages from the integration services network . The BPE can also be invoked with either notifications or requests for example with important consequences on behavior as will be discussed below. The BPE automatically extends the session of the message it was invoked with when the BPE performs further service invocations.

In one implementation the BPE monitors the amount of resources used by the BPE and terminates should the resources exceed a level defined in the configuration file for the BPE . This constraint can define the limit for operations such as the multicast so that the limit on the number of messages that can be multicast is dependent on the messages size.

Should an error occur in the execution of a Business Process script the error can be handled by a defined handler for that error if there is one. In the implementation where the BPE is invoked through the push and post handlers should an error occur while trying to post a message to the integration services network the post can be re tried a number of times after a defined time interval. These values can be defined in a configuration file. After the retry limit is reached the last synchronous error returned by the post attempt is returned to the script for handling according to the normal error handling rules. In the implementation where the BPE is integrated into the core router of the integration services network if an error occurs the error is handled by a defined error handler for that particular error type if there is such an error handler. If no error handler has been defined for the particular error type the error is returned to the invoker of the business process that is to the client machine sending the request to the integration services network .

In all invocation modes the BPE can return errors. The errors can be messages themselves and can be part of the automatic correlation extensions tying the errors to the overall process context. These errors can include expected errors unexpected errors and or runtime errors. Expected errors are returned to the BPE from a sub invocation which may be an expected part of a business process. Unexpected errors are returned to the BPE from a sub invocation which can be returned if a handler for that error is not found causing the process to terminate abnormally. Runtime errors typically result from an invalid operation such as referencing an uninitialized variable. Several examples of runtime errors are defined in the BPEL specification. In addition in each mode various other errors can be returned as will be described below. All the errors can be returned as SOAP faults.

The direct invocation mode is used when a SOAP request or notification message is sent directly to the BPE and contains an element in the header or body of the message. The element contains details of a script that the BPE must load as its instructions and the remainder of the message to be acted upon by the script. The script can be provided in the message or the message can contain a hypertext reference href attribute describing where the script to be instantiated can be found. The exact behavior of the BPE varies according to whether the message is a request or a notification and whether the element is in the body or a header of the message . In some cases the BPE process returns a response to the client while in other cases no response is returned. All connection security levels supported by the integration services network are also supported by the BPE in the direct invocation mode.

The BPE reads the script from the message or from the reference location provided in the message and processes the data in the message in accordance with the script step . Depending on the type of message and where the element is located within the message the BPE behaves differently. When the element is in the header the BPE assumes that it is not the final recipient of the message . If there is a response from the BPE when the data in the message is processed in accordance with the defined script however the BPE will return that response to the client. If there is no response the header is removed from the message and the remainder of the message is returned to the client . If the invoking message is a notification no response is returned in either case. When the element is in the body of a notification message no response is returned. On the other hand if the element is in the body of a request message a response is always returned. The returned response includes the response from the orchestration activity that is from the web services contacted by the BPE during the orchestration of the message or if the orchestration activity does not have a response an element in the body of the response. Thus the response is either a return activity of the script or a compile or runtime error generated by compiling or running the script.

Depending on the placement of the element and the type of message as has been described above the BPE determines whether a response to the message is expected by the client step . If no response is expected the process ends. If a response is expected the BPE returns the response to the client step before the process ends.

The BPE provides error handling capabilities for example if the href is invalid or cannot be found or if the referenced script cannot be compiled. If a request has incorrectly formed XML then a SOAP fault is returned with the fault string orchestrationEngine unknownRequest. If an error occurs while compiling a script then the return is a SOAP fault with the fault string orchestrationEngine compileFailure. The details field can optionally be filled in with further details of the compilation error. If the href is valid but no script is found then the return is a SOAP fault with the fault string orchestrationEngine compileFailure. If the href is invalid then the return from the getOrchestrationScript call is a SOAP fault with the fault string orchestrationEngine invalidHref.

The element can refer to message resources in multiple ways. Attachments include file contents and various attachment properties. The properties are used by clients to determine the nature of the content stored in the attachment and to locate specific attachments among a set of attachments. The property used to distinguish one attachment from another is the Content Id. In order to reference an attachment by its Content Id the URL is prepended with a cid . For example cid mycontentid references an attachment with a Content Id of mycontentid .

Some implementations of the integration services network include a document manager that acts as a repository for documents that can be accessed by clients and web services that are connected to the integration services network . References to files stored in the document manager are read only and use the format file . The refers to the organization that owns the file and the file name assigned to the file being referenced in the document manager. For example if a company Acme Inc. with a local integration service network domain of acme.com would like to refer a file labeled foo.txt that is stored in the document manager the company would use the URL file acme.com foo.txt . If the local domain is omitted then the organization name defaults to the local domain of the sender of the message. Therefore the URL in this example could alternatively be file foo.txt . The caller referencing the file in the document manager must have sufficient access privileges to that file.

If data is stored within the SOAP envelope a custom URL statement is used to reference the message part. The URL syntax can only identify XML parts elements inside the SOAP envelope. The URL can identify either an element in the SOAP Body or the SOAP Header. The syntax is as follows 

Occasionally a request will specify a URL intending to reference a single message part but the URL corresponds to more than one message part. This is for example the case if two attachments in the same message have identical Content Id header values. In such an event the integration service network will use the first encountered message part and ignore all other matching message parts. Attachments and message parts referenced as inputs will be consumed by the integration service network and will not be present in the response message.

If a client specifies a message part to store information and that message part does not exist then the message part will be created by the integration service network in the response. If a client specifies a message part for output and a message part with the same properties already exists in the request then the existing message part will be replaced by the integration service network in the response.

To use the BPE in the virtual mode a BPEL process with BPEL instructions is first created and uploaded to the BPE . Any number of messages subsequently addressed to the uploaded BPEL process will be processed and orchestrated according to the uploaded set of instructions. Each invoking message sent to the BPEL process results in a new instance of the router being created to orchestrate that message . All messages created by the BPE are addressed from and shown in reporting as being from the BPEL process associated with the orchestration instructions. The exact behavior of the BPE varies according to whether the message is a request or notification. In some cases the BPEL process itself returns a response while in others none is sent. Also in the virtual mode all connection security levels supported by the integration services network are also supported. The BPEL script uploaded to the BPEL process must be well formed XML in the provision script call format expected by the BPE and the web services .

Next a message is received from the client that contains a reference to a particular BPEL script and some data to be acted upon by the script specified in the message step . The message can be either a notification or a request. The BPE invokes the specified script with the data provided in the message and processes the data in the message in accordance with the script step .

The process then checks whether the received message is a request step . If the message is not a request then the client is not expecting any response from the BPE and the process ends. If the message is a request a response is sent from the BPE to the client that issued the message step before the process ends.

The BPE provides error handling capabilities and referencing capabilities in the virtual mode that are similar to the error handling capabilities and referencing capabilities that have been described above for the direct invocation mode.

A number of extensions to the BPEL standard are recognized by the BPE to simplify interaction with the web services that are connected to the integration services network . The extensions fall into the categories activities expressions and correlations. Activities are actions to be taken by the BPEL process expressions are used to extract information that is specific to the integration services network and correlations are used to associate instances of scripts with messages that fulfill specific criteria.

In accordance with the BPEL specification all BPEL extensions have a particular namespace that is specific to the integration services network . In the method descriptions that follow many parameters are described as strings and then illustrated with something like bpws getVariableData variable part . In this case the string is evaluated by calling the method getVariableData defined in the bpws namespace and the result is used as the string argument. The interpretation of a string as a method is entirely dependent on the existence of the namespace definition so should the literal string bpws getVariableData variable part be required to appear then defining the bpws namespace with a different prefix would be required. All BPEL extensions may be used by either the direct or virtual mode with the exception of the correlation extension which can only be used in the virtual service mode.

Activities describe actions to be taken by the orchestration process. The activities described below are described in a similar format to that of the descriptions of other activities in the core BPEL specification.

The InvokeService activity allows the business process to invoke a one way or request response operation on an arbitrary web service connected to the integration services network . Unlike the standard invoke activity no WSDL is required for the service because the entire message referenced by the inputVariable attribute is sent. The operation behaves similarly to the call operation in existing routing programs. The message is sent to a web service whose name is specified in a serviceName attribute. The serviceName is specified in the integration service s web service directory . The type of the call made to the service is determined from the existence of an outputVariable attribute. No outputVariable implies a notification otherwise the call is a request. If there is no outputVariable specified a network acknowledgement nack attribute may be set to true setting the corresponding element in the Post header of the notification message to the name of the integration services network . Specifying nack true for a request message results in a compilation error. A duration attribute sets a timeout or expiration field in the Post header of the call to the integration services network . This also implies a blocking limit for requests and nack messages. Neither nack nor duration are used directly by the BPEL service but merely expose the underlying behavior of the integration services network . Correlations catch catchall and compensationHandler values are specified as defined in the BPEL specification. The invokeService call blocks until a response or nack is returned if applicable.

The invokeMulticast activity allows the business process to invoke a one way or request response operation on a number of arbitrary web services that are connected to the integration services network . The behavior of the call is identical to the behavior of the invokeService call except that the recipients parameter is an array of organization service names rather than just one organization service name. The type of the call made to the service is determined from the existence of an outputVariable attribute. No outputVariable implies a notification otherwise the call is a request. If there is no outputVariable specified the nack attribute may be set to true setting the corresponding element in the Post headers of the notification messages to the integration services network . Specifying nack true for a request message will generate an orchestrationEngine compileFailure failure. The duration attribute sets the timeout or expiration field in the Post header of the call to integration services network . This also implies a blocking limit for requests and nack messages. Neither nack nor duration are used directly by the BPEL service but merely expose the underlying behavior of the integration services network . The inner activity allows processing of responses and is invalid if no responses are expected. No blocking activities are allowed at this point. Specifying this activity when no response is expected generates a fault. Correlations catch catchall and compensationHandler values are specified as defined in the BPEL specification. The invokeMulticast call blocks until all responses or nacks are returned if applicable.

The InvokeSMTP activity allows a business process to invoke an SMTP Web service connected to the integration services network . The message is sent to a specified recipient email address from a specified email address and with the specified body as the email content. Optionally a subject can be specified. Correlations catch catchall and compensationHandler values are specified as defined in the BPEL spec. This call is non blocking.

In order to allow processing of elements in an array the ForEach activity has been added. This activity iterates through the sibling children of a named array variable copying each element into another named variable that can be accessed using normal variable expressions.

Again to facilitate interacting with the integration services network a number of additional expressions are defined. These expressions usually extract information that is specific to the integration services network and that may help process invocations. As is the case with standard BPEL expressions any attempt during process execution to use any part of a variable before the variable is initialized will result in an uninitialized variable fault.

This expression adds a specified first variable as an attachment to a specified second variable and returns the specified second variable. An optional parameter can be specified to give the attachment a particular identifier.

This expression adds a first specified variable as a header to a specified second variable and returns the specified second variable. The optional values of soap actor mustUnderstand will be added if supplied otherwise the values will default to null and false respectively. If the attachment identifier is unique the standard selection failure fault is thrown.

This expression deletes the attachment with a specified identifier from a named variable and returns the named variable. If no attachment is found or if the attachment identifier is not unique a standard selection failure fault is thrown.

This expression deletes an attachment with a specified number from a named variable and returns the named variable. If no attachment is found the standard selection failure fault is thrown.

This expression returns the event code if any in the fault string of a named variable assuming the variable is a network generated SOAP fault. If the variable is not generated by the integration services network or if there is no referenced service name the expression returns 0 .

This expression returns the referenced service name if any in the error string of the named variable assuming the variable is a network generated SOAP fault. The expression returns null if the variable is not network generated or if there is no referenced service name.

This expression returns the network address organization service of the service that invoked the current instance of this process.

This expression returns an attachment with a specified number zero based from the named variable. If no such attachment is found a standard selection failure fault is thrown.

This expression returns an attachment with a specified identifier from the named variable. If no such attachment is found the standard selection failure fault is thrown. If multiple attachments have the same attachment ID the first such attachment is returned.

This expression returns an array of strings containing the identifiers of all attachments of a named variable. The array is empty if there are no attachments.

This expression returns a network call identifier of the named variable. The value is read from the delivery header of the referenced variable.

This expression returns a network address organization service of the service that sent a named variable. The value is read from the delivery header of the referenced variable.

This expression returns a network session identifier of the named variable. The value is read from the delivery header of the referenced variable.

This expression returns a network token identifier of the named variable. The value is read from the delivery header of the referenced variable.

This expression returns the topic of the named variable. The value is read from the delivery header of the referenced variable.

This expression returns the message type of the named variable. The value is read from the delivery header of the referenced variable.

This expression sets the expiration of the named variable. The value is inserted into the post header of the referenced variable the next time the variable is used in an invoke activity.

This expression sets the timeout of a named variable. The value is inserted into the post header of the referenced variable the next time the variable is used in an invoke activity.

This expression sets the topic of a named variable. The value is inserted into the post header of the referenced variable the next time the variable is used in an invoke activity.

Correlations in BPEL allow an instance of a script to be associated with all messages that fulfill a specified criterion. For example an invocation call can be given an Xpath query to determine the correct response to be matched to the request. This functionality is unnecessary in the context of the integration services network since all responses have a correlation to their respective requests through a token in the delivery header. Therefore correlation sets that are specified in terms of activities are ignored. A new correlation specifier is allowed at the global process level as a correlationSet element. GCCorrelation allows the topic or the session of a message to be specified as a correlation identifier. If either the topic or the session is set then all messages sent to the virtual service associated with that script with the same session or topic will be processed by the same instance of the script. No other correlation specifiers are recognized at this level. No correlation specifiers are allowed for scripts in direct invocation mode.

Table 1 below lists the SOAP faults returned by the integration services network during invocation of the BPE and during BPEL script processing. BPEL fault catchers are found using the qualified name of the fault type and a message type. Since usually the only faults returned by the integration services network are either soap Server or soap Client it would be hard to differentiate between say a delivery failure and a timeout message. In order to enable finer grained fault handling than would be possible with the default errors the BPEL service maps errors generated in the integration services network to different qualified names. All the faults have a namespace URL that is specific to the integration services network and a local name that is one of post routing delivery response or timeout .

This example demonstrates how to use the BPE to broadcast a single message to multiple recipients such as web services with a retry capability. Additionally the only way the client sending out the message wants to be alerted to any failures and be given the opportunity to re send the message is by email. This is achieved by having the catch block of the multicast message send an email that contains a link to the web based messaging screen of the initiating service. The web based messaging page generates a notification containing the name of the service whose delivery failed that is sent to the BPE . The BPE handles the notification as an asynchronous event and resends the original request to the service that failed delivery. shows a flowchart of the multicast process . The actual multicast WSDL file and the multicast BPEL script will also be presented and discussed below.

As can be seen in the process starts with the BPE receiving a multicast script from the client step . The multicast script will be discussed in detail below. Next the BPE receives a message from the client with data such as an email message to be sent to multiple recipients and a reference to the BPEL multicast script step . The BPE then invokes the multicast process with the received data and sends the message to the specified recipients step .

The process then checks whether the messages have been received by all the intended recipients step . If the messages have been properly received the process proceeds to step where the result of the multicast process such as a combined response from all the recipients or a confirmation is sent back to the originating client step upon which the process ends. If the any of the recipients have not received a copy of the message from the BPE the BPE notifies the client about which recipients did not receive the message by sending an email containing a retry link to the client step . The client can then decide whether to try to resend the message to the failed recipients step . If the client decides not to resend the message the process ends but otherwise the message is resent step . Optionally the messages that could be received can be resent automatically a certain number of times or during a certain time period. Finally the process sends the result of the multicast process back to the client step .

Table 2 below shows a WSDL file that defines two messages. The first message invokes the initial multicast process and contains the recipients how long the multicast message should live and details on where to send an email message in the event of failure and how long to wait for a retry request. The other message contains a service address and tells the BPE to re send the initial message to that service only. Note that there is no binding for the retryPT port type since it is called from web based messaging which does not require such a binding.

The process is defined by the Business Process script of Table 3 below immediately preceding the claims section.

In Table 3 the BPEL script starts with a process definition of the multicastProcess and a listing of XML namespaces xmlns that are used by the multicast process. The next element describes a set of variables that are used by the process. The variables map internal variable names to external message variables that are defined in WSDL by this BPEL process and other processes that get invoked by this process.

The main logic of the process is defined inside the sequence element. The event handler defines asynchronous message handling and in particular the generation of the retry email message that is sent to the client in the event of a non responsive recipient of the message . The receive element that follows the event handler contains instructions for receiving the message from the client and creating an instance of the BPEL multicast process.

The next action is invoke multicast which receives the list of recipients from the message and sends a copy of the message to each of the recipients . A number of fault handlers are included so that if any of the recipients fail to receive the message the various fault handlers are invoked. The copying of strings creates an email that is sent to the client to tell the client that a recipient failed to receive the message . As a result of clicking on that email the message is brought back into the integration services network and an asynchronous message is generated that goes back into the event handlers which causes the original message to be resent to the recipients . This can occur multiple times either until a time out occurs or until a certain number of attempts has been made or until the intended recipient receives the message.

The invention can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. Each computer program can be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language can be a compiled or interpreted language. Suitable processors include by way of example both general and special purpose microprocessors. Generally a processor will receive instructions and data from a read only memory and or a random access memory. Generally a computer will include one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the invention can be implemented on a computer system having a display device such as a monitor or LCD screen for displaying information to the user. The user can provide input to the computer system through various input devices such as a keyboard and a pointing device such as a mouse a trackball a microphone a touch sensitive display a transducer card reader a magnetic or paper tape reader a tablet a stylus a voice or handwriting recognizer or any other well known input device such as of course other computers. The computer system can be programmed to provide a graphical user interface through which computer programs interact with users.

Finally the processor optionally can be coupled to a computer or telecommunications network for example an Internet network or an intranet network using a network connection through which the processor can receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using the processor can be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave. The above described devices and materials will be familiar to those of skill in the computer hardware and software arts.

It should be noted that the present invention employs various computer implemented operations involving data stored in computer systems. These operations include but are not limited to those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. The operations described herein that form part of the invention are useful machine operations. The manipulations performed are often referred to in terms such as producing identifying running determining comparing executing downloading or detecting. It is sometimes convenient principally for reasons of common usage to refer to these electrical or magnetic signals as bits values elements variables characters data or the like. It should remembered however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.

The present invention also relates to a device system or apparatus for performing the aforementioned operations. The system can be specially constructed for the required purposes or it can be a general purpose computer selectively activated or configured by a computer program stored in the computer. The processes presented above are not inherently related to any particular computer or other computing apparatus. In particular various general purpose computers can be used with programs written in accordance with the teachings herein or alternatively it can be more convenient to construct a more specialized computer system to perform the required operations.

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications can be made without departing from the spirit and scope of the invention. For example the above processes have all been defined in terms of XML and BPEL but any suitable language for expressing business processes such as JAVA or JavaScript can be used. Accordingly other embodiments are within the scope of the claims.

