---

title: Designing task execution order based on location of the task icons within a graphical user interface
abstract: A method, system and computer program product for designating the order in which a plurality of tasks are to be executed on a computer system. In one embodiment, a plurality of task icons, each of which represents a respective one task, are shown in defined positions in a view on the computer system, and these defined positions of the task icons are used to determine the order in which the tasks are to be executed by the computer system. In an embodiment, the task icons are shown in a grid pattern, having rows and columns. Tasks represented by task icons shown in successive rows of the grid pattern are executed in series, and tasks represented by task icons shown in the same row of the grid pattern are executed in parallel. In an embodiment, at least one of the task icons represents an embedded executable workflow folder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311061&OS=09311061&RS=09311061
owner: International Business Machines Corporation
number: 09311061
owner_city: Armonk
owner_country: US
publication_date: 20110210
---
This invention generally relates to determining the order in which to execute tasks in a computer system and more specifically to using a graphical user interface to determine that order.

Desktop graphical user interfaces GUI in most common workstation operating systems provide views of folder content in several different formats including the placement of large icons representing objects contained in the folder. For example one system folder used in the Windows Operating System contains applications to be initiated or executable tasks to be processed during workstation bootup operations. These applications and tasks are typically initiated in an unspecified sequence executing in parallel until all are completed. Because certain applications have prerequisite background services which must be started up before the applications can initiate these applications requiring the background services cannot be included in the default Startup folder and must be manually initiated after the required background services are available.

For example a user of a computer workstation might wish to have an email client and an instant messaging client automatically initiated when the workstation is started up. These applications will fail to initiate unless a connection has been previously made to access the Internet and that connection client may also fail if particular network services have not yet been established. Thus a simple method is needed to designate particular sequential and parallel processing of all executable tasks contained within a graphical user interface.

Known solutions include an automatic parallel only execution of programs included in the system startup folder with no way to designate conditional or sequential execution of tasks. Full featured workflow management software exists such as i2 Corporation s Informatica tool but these require extremely complicated setup configurations including identifying a specific fixed logical link between parent and child tasks. No solution currently exists in which the execution sequence of tasks within a folder can be identified more simply and efficiently by the geometric location of the icons in the GUI representation.

Embodiments of the invention provide a method system and computer program product for designating the order in which a plurality of tasks are to be executed on a computer system. In one embodiment the method comprises showing a plurality of task icons in defined positions in a view on the computer system each of the task icons representing a respective one task and using said defined positions to determine the order in which the tasks are to be executed by the computer system.

In an embodiment the task icons are shown in a defined spatial order and this defined spatial order is used to determine the order in which the tasks are to be executed by the computer system.

In one embodiment some of the tasks are executed in parallel and others of the tasks are executed in series.

In an embodiment the task icons are shown in a grid pattern having rows and columns. Tasks represented by task icons shown in successive rows of the grip pattern are executed in series and tasks represented by task icons shown in the same row of the grid pattern are executed in parallel.

For example in an embodiment different rows of the grid pattern may be located at different heights in the view. All the tasks represented by task icons in the same row are executed in parallel and all of the tasks represented by the task icons in a higher row are executed before any of the tasks represented by the task icons in a lower row are executed.

In one embodiment each of the task icons is shown in a defined geometric position. To determine the order in which the tasks are to be executed a list is obtained of these geometric positions of the task icons the geometric positions on this list are sorted according to defined rules to obtain a sorted list and this sorted list is used to determine the order in which the tasks are to be executed.

In one embodiment the task icons are shown in a graphical user interface and this interface may be used to configure the positions of the task icons in the interface.

In one embodiment data for rendering the task icons are stored in a specified file and this file is designated as executable.

In an embodiment a call is made to the Operating System of the computer system to obtain data for determining the positions of the task icons in the view and the tasks are executed in the designated order upon startup of the Operating System.

Embodiments of the invention provide a method of grouping executable icons in a GUI operating system desktop folder and designating an action during which every executable program in the folder is to be initiated in a combination of sequential and parallel tasks based on the geometric location of the task icons within the folder. This is a significant advantage over tasks in the default operating system startup folder which are executed only in parallel and is also an advantage over commercially available workflow management software products in that the relationship between tasks is based on the geometric position of icons within the folder instead of depending on explicit relationships between individual programs.

As will be appreciated by one skilled in the art embodiments of the present invention may be embodied as a system method or computer program product. Accordingly embodiments of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore embodiments of the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The present invention relates to using a graphical user interface to determine the order in which tasks are executed in a computer system. An embodiment of the invention designates a desktop folder as a collection of objects including one or more executable objects each of which is to be executed in relation to the geometric appearance of the icons within the folder. An embodiment of the invention provides a method for designating a folder to have this executable workflow. In the Windows Operating System platform this may be done for example by a right click selection on the folder to designate it as executable or by setting a specified value in the folder s properties.

In an embodiment in the UNIX AIX or Linux Operating System platforms the invention may be used to give meaningful context to assigning the Executable global or local permission to a directory folder. Currently a folder in these platforms can be designated executable without having any specific meaning attached to it. One specific use of this invention as an example would be to a system startup folder which in the Windows Operating System environment executes all included tasks in a single parallel step. As will be apparent to those of ordinary skill in the art though this invention can be extended to other folders not executed at system startup time.

A folder designated as an executable workflow based on geometric positioning of the icons may be limited to display only in icon format preferably in an auto grid arrangement so that tasks to be executed in parallel may be found in the same row of icons and subsequent tasks in later rows may be executed only after successful completion of all tasks in the previous rows. Display of objects in any other fashion thumbnail list or detail list for example may not be applicable or permitted.

Once the folder is designated as an executable workflow and a method is provided to initiate execution of the workflow a determination of the order of execution is made based on the file types of the objects included in the folder and the positions of the icons in the GUI display of the folder. This information is available via API Application Programming Interface calls to the operation system. The vertical position of each executable program application icon relative to the rectangular grid of the folder window is collected and sorted. All tasks represented by icons with the same vertical height which will be the case in auto arranged grids of icons would appear in the same row and each would be executed in parallel. Icons with different vertical heights relative to the folder GUI view would occur in different rows the applications and programs in a higher row would be executed sequentially before the applications and programs in a lower row.

The following discussion exemplifies the use of this invention in the startup folder in a Windows platform.

When a workstation is booted up it is desirable to have all the standard background services start as they usually do then after those tasks are successfully completed applications depending on the presence of those background services can be initiated. In the following example the two applications Lotus Notes and an Instant Messaging client product are to be opened as part of the normal startup. These applications can successfully complete only after the AT T Network Dialer executes successfully to access for example a corporate intranet. AT T Dialer is a global network client for remoter access. Once a connection is made to the Internet the AT T Dialer can be used to gain access through a corporate firewall to a corporate intranet by way of passwords and configured authentication. The term intranet is a well known term describing a company s private network protecting its digital assets by means of Internet Protocol technologies to store and share data among users with common authentication credentials. Intranets are typically owned by single companies or corporations and data security is a big concern.

In order for the Network Dialer to work it needs to execute after successful completion of the Access Connections task by executing the LEAP Template to connect a workstation to the wireless network . One way to ensure this sequence is to write a script executing the applications in the desired order check the return code status and reporting any problems. Another way is to designate a formal workflow via a workflow management package requiring designation of predecessor tasks successor tasks and exception handling.

 LEAP Template is a configuration scheme to detect and access network connections. The main function is to establish connection between a workstation and the Internet or a workstation and a local internal network. A configuration file referred to as LEAP Template includes information such as a default network connection using the best available installed network hardware i.e. use Ethernet instead of wireless if both are installed and available whether networks or locations should be switched automatically and what authentication terms should be used for encrypted network or Internet access i.e. WEP or WPI authentication keys . In the context of embodiments of this invention it s the information and program required to make simple connection to the Internet from a workstation which has to happen successfully before any other programs requiring an Internet connection can be started.

The present invention removes these requirements and establishes a task execution capability based on the position of the executable program or application icon within the folder GUI of the executable workflow folder. In embodiments of the invention documentation data files or other non executable objects within the folder are ignored.

In embodiments of the invention instances of other executable workflow folders are also included in this starting executable folder. The icons might look as shown in . Suppose for example once the AT T Network Client is active and running in addition to the two applications in the next row it is desirable to execute a group of programs called Program Group . When that is done processing is to continue to execute another group of programs called Program Group .

If a commercially available workflow management software package was employed to have the same sequential and parallel processing effect as in the previous example the inclusion of separate documentation or data file non executable objects like ReadMe.doc DataFile1.dat and DataFile2.dat would not be relevant or in most cases even possible but the main advantage is that a workflow management software package would require the designation of Access Connections to be executed initially and the designation of seven explicit relationships between the tasks to be included in the workflow. These seven relationships are represented as illustrated in by the arrows overlaying the icons of and would need to be designated explicitly as in the following table 

The graphic illustration of the custom configured workflow is given in . Embodiments of this invention based on geometric positioning of the icons in the folder GUI display do not require any of the explicit relationship definitions and enable relevant documentation and data files to be included in the same folder workflow as the executable objects. This advantage becomes more significant with the inclusion of two folders representing two additional groups of executable programs and other non executable objects. Embodiments of this invention likewise do not require any specific relationship definitions within the sub folders which may become numerous.

At step the folder is activated. The folder can be activated by any of several different means. For example the folder may be activated by automatic execution if the workflow folder is designated to execute at the time of workstation bootup right click on a workflow folder icon on the desktop or other GUI display selecting an Execute workflow option from the actions list double click on an icon representing a workflow folder initiating execution as a default action on the folder and including the executable folder as an object within another executable folder.

Step is a decision point whether to open a regular folder not marked as executable workflow folder or to initiate execution of the objects in an executable workflow folder in the sequence and grouping order determined by the geometric position of the icons within the folder GUI.

As represented at in embodiments of the invention a normal folder does not have the capabilities taught in this invention and a folder not marked as an executable workflow would be opened normally when initiated.

At step an application programming interface API can be used by application programs to query the operating system for folder object parameter values such as object name object type and position of the icon associated with the object within the GUI display of the folder. An API call for the workflow depicted in might return the following information 

At step the information is sorted by the third column geometric position of icon within folder and the result table in Table 3 is used as the list of tasks to be sequentially processed.

At step the top most object on the list is assigned as the current object. Objects represented by icons which are the same relative distance from the top of the GUI folder are to be executed in parallel so the processing as represented at in loops through the sorted list initiating all executable tasks that have the same or very similar perhaps within 5 pixels relative distance from the top of the folder frame.

As represented at step all objects in the folder which are not identified as executable are bypassed. These objects are presumed to contain documentation data or are unrelated system control files which are not to be executed as a program which is part of the workflow. In the example presented here and shown in the first three objects ReadMe.doc DataFile1.dat and DataFile2.dat would be bypassed. The first program initiated as part of this workflow would be Access Connections.

At step a program application or another embedded executable workflow folder can be initiated and the process flow proceeds immediately to the next step if any at the same geographic distance from the top of the workflow folder while the previous program executes in parallel with any other programs on the same level row in the grid of icons. If the object to be executed is another embedded workflow folder then the process flow depicted by the entire flowchart is applied recursively to this object.

As represented at step execution of all programs applications or embedded workflow folders which are at the same level icons are at the same geometric distance from the workflow folder top border continues in parallel until all these applications have either concluded successfully or have abended with a non zero return code. Abend refers to an abnormal program end an error code indicating a program did not complete as expected. For example a program attempting an Internet connection might abend abnormally end with a non zero error code returned if a modem or router is non functional. If a program fails the entire workflow fails so that the workstation user can intervene and correct any problems that may arise. For example a prerequisite program for Lotus Notes Basic would be Access Connections as it is assumed an Internet connection and firewall security access programs must finish successfully before Lotus Notes can initiate. It could also be the case that an application may be waiting for user input such as AT T Network Dialer may prompt for a password. The workflow will wait until this information is provided and will continue to execute once this information is provided.

As represented at steps and when all executable objects represented by icons in the same relative horizontal position in the workflow folder have completed successfully the next row group of objects represented by icons with the next larger geometric distance from the workflow folder top frame can be processed.

A computer based system in which a method embodiment of the invention may be carried out is depicted in . The computer based system includes a processing unit which houses a processor memory and other systems components not shown expressly in the drawing that implement a general purpose processing system or computer that may execute a computer program product. The computer program product may comprise media for example a compact storage medium such as a compact disc which may be read by the processing unit through a disc drive or by any means known to the skilled artisan for providing the computer program product to the general purpose processing system for execution thereby

The computer program product may comprise all the respective features enabling the implementation of the inventive method described herein and which when loaded in a computer system is able to carry out the method. Computer program software program program or software in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form.

The computer program product may be stored on hard disk drives within processing unit as mentioned or may be located on a remote system such as a server coupled to processing unit via a network interface such as an Ethernet interface. Monitor mouse and keyboard are coupled to the processing unit to provide user interaction. Scanner and printer are provided for document input and output. Printer is shown coupled to the processing unit via a network connection but may be coupled directly to the processing unit. Scanner is shown coupled to the processing unit directly but it should be understood that peripherals might be network coupled or direct coupled without affecting the performance of the processing unit .

While it is apparent that the invention herein disclosed is well calculated to fulfill the objectives discussed above it will be appreciated that numerous modifications and embodiments may be devised by those skilled in the art and it is intended that the appended claims cover all such modifications and embodiments as fall within the true spirit and scope of the present invention.

