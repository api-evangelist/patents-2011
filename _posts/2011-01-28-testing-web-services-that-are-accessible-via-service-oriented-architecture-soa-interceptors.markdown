---

title: Testing web services that are accessible via service oriented architecture (SOA) interceptors
abstract: Systems, methods, and computer program products are disclosed for testing web service-related elements, where the instructions of a web service-related element are statically analyzed to identify a characteristic of an output of the web service-related element, and where it is determined from a received response to a web service request that the web service request was processed by the web service-related element if at least a portion of the response matches the characteristic of the output of the web service-related element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949991&OS=08949991&RS=08949991
owner: International Business Machines Corporation
number: 08949991
owner_city: Armonk
owner_country: US
publication_date: 20110128
---
Computer software applications are often tested to determine whether they are vulnerable to malicious attacks or otherwise show signs of security vulnerabilities. One such type of testing known as black box testing involves executing a computer software application and attacking the application using known forms of malicious attacks. When performing black box testing on a computer software application it is important to determine which part of the computer software application is vulnerable to a particular black box attack. This is particularly challenging when performing black box testing on web services such as web services that expose one or more Application Programming Interfaces APIs that are accessible via Hypertext Transfer Protocol HTTP for execution on one or more computers where the web services are accessible via a layer of one or more Service Oriented Architecture SOA interceptors. For example where a black box attack is intended to test a particular web service API for vulnerabilities such as a web service API that contains business logic the attack may first have to go through several layers of SOA related interceptors such as those that are related to authentication authorization session management etc. Thus when a response is received to the black box attack on a web service API it is important to determine whether the attack indeed reached its intended target or whether the attack never made it past an intermediate web service request interceptor.

In one aspect of the invention a method is provided for testing web service related elements the method including statically analyzing instructions of a web service related element to identify a characteristic of an output of the web service related element receiving a response to a web service request and determining that the web service request was processed by the web service related element if at least a portion of the response matches the characteristic of the output of the web service related element.

In other aspects of the invention one or more systems and computer program products are also provided.

The invention is now described within the context of one or more embodiments although the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical data storage device a magnetic data storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Reference is now made to which is a simplified conceptual illustration of a system for testing web services that are accessible via Service Oriented Architecture SOA interceptors constructed and operative in accordance with an embodiment of the invention. In the system of a static analyzer is configured to statically analyze one or more web service APIs generally designated such as may be hosted by one or more computers accessible via a computer network not shown . Web service APIs may for example contain logic embodying the core functions of a business application. Static analyzer is additionally or alternatively configured to statically analyze one or more SOA interceptors generally designated such as may be hosted by one or more computers accessible via a computer network not shown . SOA interceptors may be layered with respect to each other and to web service APIs such as where web service APIs logically reside on top of a layered stack of SOA interceptors such as in the form of SOA handlers related to authentication authorization and session management. Where SOA interceptors are layered in this manner a web services request that is intended by a requestor to be processed by a particular one of web service APIs may first have to go through several layers of SOA interceptors . Web service APIs and SOA interceptors are collectively referred to herein as web service related elements.

Static analyzer is configured in accordance with conventional techniques to statically analyze one or more web service related elements such as where the instructions are in the form of source code or byte code to identify the characteristics of one or more outputs of the web service related elements such as return values or exception values as may be provided in response to a web service request. Such characteristics preferably include the conditions that give rise to a particular output as well as the output value itself and or a template thereof. Examples of such outputs and their characteristics that are identified by static analyzer are described in greater detail hereinbelow with reference to .

A black box tester is shown in and is configured to synthesize one or more attacks in accordance with conventional techniques using the output characteristics of one or more web service related elements such as those that are identified by static analyzer . In certain embodiments the black box tester may be described as performing dynamic analysis to build web service requests that are able to exercise different layers in the SOA and obtain validation signals. Black box tester preferably presents an attack in the form of a web service request in an attempt to reach a target web service related element among the web service related elements such as where an attack is designed to test for security vulnerabilities in a particular one of web service APIs that contains a particular business related function. Black box tester is also preferably configured to receive a response to such a web service request based attack and to determine if the web service request was processed by the target web service related element if at least a portion of the response matches the characteristics of any of the outputs of the target web service related element such as were previously identified by static analyzer . If no portion of the response matches the characteristics of any of the outputs of the target web service related element then the web service request most likely was not processed by the target web service related element. Furthermore if at least a portion of the response matches the characteristics of any of the outputs of a web service related element other than the target web service related element then the web service request most likely was prevented by the non target web service related element from reaching the target web service related element.

Any of the elements shown in are preferably executed by or otherwise made accessible to a computer such as by implementing any of the elements in computer hardware and or in computer software embodied in a physically tangible non transitory computer readable medium in accordance with conventional techniques.

The operation of is illustrated with reference to which shows an example of user name token handler instructions of a SOA interceptor that provides security for peer authentication. Static analyzer determines that for the instructions to complete their task normally a received token should not be empty and a password should be found for a given user. Static analyzer identifies the output text Token should not be null as associated with an argument null exception. Using this information black box tester preferably synthesizes one or more web service requests using conventional techniques in an attempt to reach a target web service API by providing inputs that satisfy all necessary pre conditions of any intermediate SOA interceptors like the SOA interceptor shown in such as are identified by static analyzer . Black box tester determines whether a web service request reached its intended target web service API by analyzing a response to the web service request. Thus if a response includes the message Token should not be null black box tester determines that the web service request did not reach the target web service API and was instead prevented from reaching the target web service API by the SOA interceptor shown in . Thus the black box tester validates behavior of each layer based on observable indications of failure or success.

Reference is now made to which is a simplified flowchart illustration of an exemplary method of operation of the system of operative in accordance with an embodiment of the invention. In the method of the instructions of one or more web service related elements are statically analyzed to identify characteristics of one or more of their outputs block . One or more web service requests are synthesized in an attempt to reach a target web service related element among the statically analyzed web service related elements block . A response to a web service request is received block . If at least a portion of the response matches the known characteristics of any of the outputs of the target block then it is determined that the web service request was processed by the target block which information may be presented via a computer output device such as a computer display otherwise it is determined that the web service request was not processed by the target block . After blocks or processing is finished.

Reference is now made to which is a simplified flowchart illustration of an exemplary method of operation of the system of operative in accordance with another embodiment of the invention. The method of is substantially similar to the method of but may be employed where different web service related elements provide one or more of the same outputs such as where two or more web service related elements provide the same ID is incorrect message. In the method of the instructions of one or more web service related elements are statically analyzed to identify characteristics of one or more of their outputs block . If two or more of the web service related elements have an output that is the same block the input conditions that result in the outputs are determined block otherwise the processing of is performed block . One or more web service requests are synthesized in accordance with the input conditions in an attempt to reach a target web service related element among the statically analyzed web service related elements block . A response to a web service request is received block . If at least a portion of the response matches the known characteristics of any of the outputs of the target block then it is determined that the web service request was processed by the target block which information may be presented via a computer output device such as a computer display otherwise it is determined that the web service request was not processed by the target block . After blocks or processing is finished.

Thus for example if static analysis determines that both an authentication SOA interceptor and a business transaction web service API return an ID is incorrect message where the authentication SOA interceptor returns the ID is incorrect message if a received ID contains one or more letters and where the business transaction web service API returns the ID is incorrect message if a received ID does not start with a letter then this information may be used to formulate a web service request having the characteristics to trigger a response from the web service API rather than the SOA interceptor whereupon the received response may be analyzed to determine whether or not the web service request reached the target web service API.

Referring now to block diagram illustrates an exemplary hardware implementation of a computing system in accordance with which one or more components methodologies of the invention e.g. components methodologies described in the context of may be implemented according to an embodiment of the invention.

As shown the techniques for controlling access to at least one resource may be implemented in accordance with a processor a memory I O devices and a network interface coupled via a computer bus or alternate connection arrangement.

It is to be appreciated that the term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other processing circuitry. It is also to be understood that the term processor may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.

The term memory as used herein is intended to include memory associated with a processor or CPU such as for example RAM ROM a fixed memory device e.g. hard drive a removable memory device e.g. diskette flash memory etc. Such memory may be considered a computer readable storage medium.

In addition the phrase input output devices or I O devices as used herein is intended to include for example one or more input devices e.g. keyboard mouse scanner etc. for entering data to the processing unit and or one or more output devices e.g. speaker display printer etc. for presenting results associated with the processing unit.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be appreciated that any of the elements described hereinabove may be implemented as a computer program product embodied in a computer readable medium such as in the form of computer program instructions stored on magnetic or optical storage media or embedded within computer hardware and may be executed by or otherwise accessible to a computer not shown .

While the methods and apparatus herein may or may not have been described with reference to specific computer hardware or software it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.

While the invention has been described with reference to one or more specific embodiments the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

