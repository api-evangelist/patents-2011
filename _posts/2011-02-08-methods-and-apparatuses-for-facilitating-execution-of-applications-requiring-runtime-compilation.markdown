---

title: Methods and apparatuses for facilitating execution of applications requiring runtime compilation
abstract: Methods and apparatuses are provided for facilitating execution of kernels requiring runtime compilation. A method may include implementing a driver for a framework for handling kernels requiring runtime compilation. The method may further include receiving, by the driver, code for a kernel requiring at least partial runtime compilation for execution using the framework. The method may additionally include obtaining, by the driver, a compiled executable version of the kernel. The obtained compiled executable version of the kernel may not have been locally compiled. The method may also include causing, by the driver, the compiled executable version of the kernel to be provided for execution. Corresponding apparatuses are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762972&OS=08762972&RS=08762972
owner: Nokia Corporation
number: 08762972
owner_city: Espoo
owner_country: FI
publication_date: 20110208
---
Example embodiments of the present invention relate generally to computing technology and more particularly relate to methods and apparatuses for facilitating execution of applications requiring runtime compilation.

The modern computing era has brought about a tremendous expansion in computing power as well as increased portability and affordability of computing devices. This expansion has resulted in a wide variety of computing platforms being used by consumers from all walks of life in their everyday lives. These computing platforms have a wide variety of hardware and software configurations each of which may present a unique execution platform for software applications. Accordingly a software application developed for one execution platform may not function properly when executed on a second execution platform.

A simultaneous ongoing trend is that end user applications are increasingly moving to the web. A variety of previously mentioned computing platforms are often used to access the web including web based applications. It may be impractical for web developers to generate a set of executable versions of an application including an executable version for each computing platform that may be used to access the application. Accordingly a web developer may distribute a web application as source code requiring interpretation or runtime compilation.

Systems methods apparatuses and computer program products are herein provided for facilitating execution of applications requiring runtime compilation. Systems methods apparatuses and computer program products in accordance with various example embodiments may provide several advantages to computing devices computing device users application developers and application distributors. In this regard some example embodiments provide a driver for a framework configured to handle kernels requiring runtime compilation. In this regard a kernel may comprise a portion or component of a larger application. A kernel may for example comprise a computationally intensive portion of an application such as computation functions included in an application that may be described in a language such as Open Computing Language . A driver in accordance with some example embodiments may be implemented on an apparatus that does not include a compiler for the framework or on an apparatus that does not include a full compiler for the framework. The driver of some such example embodiments may leverage a remote compiler which may be implemented in thin client mode. Embodiments utilizing a remote compiler may advantageously extend support for runtime compilation of applications so as to enable execution of such applications even on devices that may not include a compiler.

In a first example embodiment a method is provided which comprises implementing a driver for a framework configured to handle kernels requiring runtime compilation. The method of this example embodiment further comprises receiving by the driver code for a kernel requiring runtime compilation for execution using the framework. The method of this example embodiment additionally comprises obtaining by the driver a compiled executable version of the kernel. The compiled executable version of the kernel obtained in this example embodiment was not locally compiled. The method of this example embodiment also comprises causing by the driver the compiled executable version of the kernel to be provided for execution.

In another example embodiment an apparatus comprising at least one processor and at least one memory storing computer program code is provided. The at least one memory and stored computer program code are configured with the at least one processor to cause the apparatus of this example embodiment to at least implement a driver for a framework configured to handle kernels requiring runtime compilation. The at least one memory and stored computer program code are configured with the at least one processor to further cause the apparatus of this example embodiment to receive by the driver code for a kernel requiring at least partial runtime compilation for execution using the framework. The at least one memory and stored computer program code are configured with the at least one processor to additionally cause the apparatus of this example embodiment to obtain by the driver a compiled executable version of the kernel. The compiled executable version of the kernel obtained in this example embodiment was not locally compiled on the apparatus. The at least one memory and stored computer program code are configured with the at least one processor to also cause the apparatus of this example embodiment to cause by the driver the compiled executable version of the kernel to be provided for execution.

In another example embodiment a computer program product is provided. The computer program product of this example embodiment includes at least one computer readable storage medium having computer readable program instructions stored therein. The program instructions of this example embodiment comprise program instructions configured to cause an apparatus to perform a method. The method of this example embodiment comprises implementing a driver for a framework configured to handle kernels requiring runtime compilation. The method of this example embodiment further comprises receiving by the driver code for a kernel requiring at least partial runtime compilation for execution using the framework. The method of this example embodiment additionally comprises obtaining by the driver a compiled executable version of the kernel. The compiled executable version of the kernel obtained in this example embodiment was not locally compiled. The method of this example embodiment also comprises causing by the driver the compiled executable version of the kernel to be provided for execution.

In another example embodiment an apparatus is provided that comprises means for implementing a driver for a framework configured to handle kernels requiring runtime compilation. The apparatus of this example embodiment further comprises means for receiving by the driver code for a kernel requiring at least partial runtime compilation for execution using the framework. The apparatus of this example embodiment additionally comprises means for obtaining by the driver a compiled executable version of the kernel. The compiled executable version of the kernel obtained in this example embodiment was not locally compiled on the apparatus. The apparatus of this example embodiment also comprises means for causing by the driver the compiled executable version of the kernel to be provided for execution.

The above summary is provided merely for purposes of summarizing some example embodiments of the invention so as to provide a basic understanding of some aspects of the invention. Accordingly it will be appreciated that the above described example embodiments are merely examples and should not be construed to narrow the scope or spirit of the invention in any way. It will be appreciated that the scope of the invention encompasses many potential embodiments some of which will be further described below in addition to those here summarized.

Some embodiments of the present invention will now be described more fully hereinafter with reference to the accompanying drawings in which some but not all embodiments of the invention are shown. Indeed the invention may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like reference numerals refer to like elements throughout.

As used herein the terms data content information and similar terms may be used interchangeably to refer to data capable of being transmitted received displayed and or stored in accordance with various example embodiments. Thus use of any such terms should not be taken to limit the spirit and scope of the disclosure. Further where a computing device is described herein to receive data from another computing device it will be appreciated that the data may be received directly from the another computing device or may be received indirectly via one or more intermediary computing devices such as for example one or more servers relays routers network access points base stations and or the like.

The term computer readable medium as used herein refers to any medium configured to participate in providing information to a processor including instructions for execution. Such a medium may take many forms including but not limited to a non transitory computer readable storage medium for example non volatile media volatile media and transmission media. Transmission media include for example coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Examples of computer readable media include a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a compact disc read only memory CD ROM compact disc compact disc rewritable CD RW digital versatile disc DVD Blu Ray any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a random access memory RAM a programmable read only memory PROM an erasable programmable read only memory EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media. However it will be appreciated that where embodiments are described to use a computer readable storage medium other types of computer readable mediums may be substituted for or used in addition to the computer readable storage medium in alternative embodiments.

Additionally as used herein the term circuitry refers to a hardware only circuit implementations for example implementations in analog circuitry and or digital circuitry b combinations of circuits and computer program product s comprising software and or firmware instructions stored on one or more computer readable memories that work together to cause an apparatus to perform one or more functions described herein and c circuits such as for example a microprocessor s or a portion of a microprocessor s that require software or firmware for operation even if the software or firmware is not physically present. This definition of circuitry applies to all uses of this term herein including in any claims. As a further example as used herein the term circuitry also includes an implementation comprising one or more processors and or portion s thereof and accompanying software and or firmware. As another example the term circuitry as used herein also includes for example a baseband integrated circuit or applications processor integrated circuit for a mobile phone or a similar integrated circuit in a server a cellular network device other network device and or other computing device.

Compilation of an application is a processing intensive task especially for a mobile device which may have more limited computing resources when compared with a personal computer. However runtime compilation must be performed relatively quickly in order to provide a quality end user experience. Open Computing Language OpenCL kernel compilation requires a significant amount of time compared to execution even when performed on modern powerful state of the art personal computers. Compilation may additionally be a quite power intensive operation which may result in significant battery drain when performed on mobile devices. Further in order to obtain a good and power efficient end result the compilation may require performance of analysis and optimization operations that may impose an even heavier computing load. As such there might be insufficient computing resources to support runtime compilation in many mobile devices.

Further many mobile computing devices do not include platform specific in device compilers. While OpenCL does require an OpenCL compiler the OpenCL embedded profile does not require it. However OpenCL embedded profile does not provide a working approach for WebCL which provides an interpreted computer programming language e.g. JavaScript application programming interface API including OpenCL API bindings to manage processing of kernels described using OpenCL C programming language so as to enable usage of OpenCL kernels in web content. Web applications may include kernels which may require runtime compilation in order to achieve good portability. In this regard precompilation of the kernels of web applications may not be feasible given the large number of platform variations accessing the web. In this regard a quality user experience may require that a web application works on all devices. Accordingly runtime compilation of a kernel may be required given the impracticality of anticipating what platforms will be used to access and execute a web application and providing a targeted compiled executable version of the kernel for each of the platforms.

Referring now to illustrates a block diagram of a system for a system for facilitating execution of applications requiring runtime compilation according to an example embodiment. In this regard some example embodiments of the system of may facilitate execution of applications including kernels or components requiring compilation. Such kernels may for example comprise computational portions of an application which may for example be described in a language such as Open Computing Language . It will be appreciated that the system as well as the illustrations in other figures are each provided as an example of one embodiment and should not be construed to narrow the scope or spirit of the disclosure in any way. In this regard the scope of the disclosure encompasses many potential embodiments in addition to those illustrated and described herein. As such while illustrates one example of a configuration of a system for a system for facilitating execution of applications requiring runtime compilation numerous other configurations may also be used to implement embodiments of the present invention.

The system may include one or more execution apparatuses . An execution apparatus may be embodied as any computing device such as for example a desktop computer laptop computer mobile terminal mobile computer mobile phone mobile communication device game device digital camera camcorder audio video player television device radio receiver digital video recorder positioning device wrist watch portable digital assistant PDA a chipset an apparatus comprising a chipset any combination thereof and or the like. In this regard the execution apparatus may comprise any computing device providing a platform for execution of an application and or a portion thereof e.g. a kernel such as with the facilitation of a driver implemented in accordance with one or more embodiments disclosed herein.

The system may further comprise one or more compilation apparatuses . A compilation apparatus may be embodied as one or more servers a server cluster a cloud computing infrastructure one or more desktop computers one or more laptop computers one or more mobile computers one or more network nodes multiple computing devices in communication with each other a chipset an apparatus comprising a chipset any combination thereof and or the like. More particularly an compilation apparatus may be embodied as any computing device implementing a compiler configured to compile a kernel and provide the kernel to the execution apparatus to enable execution of the kernel by the execution apparatus as will be described further herein below.

In some example embodiments an execution apparatus and compilation apparatus may be configured to communicate via the network . For example the execution apparatus may send source code for a kernel to the compilation apparatus over the network for compilation by the compilation apparatus . The compilation apparatus may send a compiled executable version of the kernel to the execution apparatus over the network . The network may comprise one or more wireless networks for example a cellular network wireless local area network wireless personal area network wireless metropolitan area network and or the like one or more wireline networks or some combination thereof and in some embodiments comprises at least a portion of the internet.

The system may further comprise one or more application sources . An application source may be embodied as one or more servers a server cluster a cloud computing infrastructure one or more desktop computers one or more laptop computers one or more mobile computers one or more network nodes multiple computing devices in communication with each other a chipset an apparatus comprising a chipset any combination thereof and or the like. More particularly an application source may comprise any computing device that may send an application a kernel source code for a kernel and or the like to an execution apparatus such as in response to a request by the execution apparatus . In some example embodiments an application source may be embodied as a web server. Although illustrated as separate entities in some example embodiments an application source and a compilation apparatus may be co located.

The system may further comprise one or more information sources from which the compilation apparatus may obtain information about an execution platform of an execution apparatus to enable the compilation apparatus to compile source code to generate a compiled executable targeted for execution on an execution platform of a given execution apparatus . An information source may accordingly comprise any computing device configured to store and or provide information about an execution apparatus a user of an execution apparatus a service used by an execution apparatus a software configuration of an execution apparatus a hardware configuration of an execution apparatus network capabilities of a network used by the execution apparatus and or the like.

In an example embodiment the execution apparatus is embodied as a mobile terminal such as that illustrated in . In this regard illustrates a block diagram of a mobile terminal representative of one embodiment of an execution apparatus . It should be understood however that the mobile terminal illustrated and hereinafter described is merely illustrative of one type of execution apparatus that may implement and or benefit from various example embodiments and therefore should not be taken to limit the scope of the disclosure. While several embodiments of the electronic device are illustrated and will be hereinafter described for purposes of example other types of electronic devices such as mobile telephones mobile computers portable digital assistants PDAs pagers laptop computers desktop computers gaming devices televisions and other types of electronic systems may employ various embodiments of the invention.

As shown the mobile terminal may include an antenna or multiple antennas in communication with a transmitter and a receiver . The mobile terminal may also include a processor configured to provide signals to and receive signals from the transmitter and receiver respectively. The processor may for example be embodied as various means including circuitry one or more microprocessors with accompanying digital signal processor s one or more processor s without an accompanying digital signal processor one or more coprocessors one or more multi core processors one or more controllers processing circuitry one or more computers various other processing elements including integrated circuits such as for example an ASIC application specific integrated circuit or FPGA field programmable gate array or some combination thereof. Accordingly although illustrated in as a single processor in some embodiments the processor comprises a plurality of processors. These signals sent and received by the processor may include signaling information in accordance with an air interface standard of an applicable cellular system and or any number of different wireline or wireless networking techniques comprising but not limited to Wi Fi wireless local access network WLAN techniques such as Institute of Electrical and Electronics Engineers IEEE 802.11 802.16 and or the like. In addition these signals may include speech data user generated data user requested data and or the like. In this regard the mobile terminal may be capable of operating with one or more air interface standards communication protocols modulation types access types and or the like. More particularly the mobile terminal may be capable of operating in accordance with various first generation 1G second generation 2G 2.5G third generation 3G communication protocols fourth generation 4G communication protocols Internet Protocol Multimedia Subsystem IMS communication protocols for example session initiation protocol SIP and or the like. For example the mobile terminal may be capable of operating in accordance with 2G wireless communication protocols IS 136 Time Division Multiple Access TDMA Global System for Mobile communications GSM IS 95 Code Division Multiple Access CDMA and or the like. Also for example the mobile terminal may be capable of operating in accordance with 2.5G wireless communication protocols General Packet Radio Service GPRS Enhanced Data GSM Environment EDGE and or the like. Further for example the mobile terminal may be capable of operating in accordance with 3G wireless communication protocols such as Universal Mobile Telecommunications System UMTS Code Division Multiple Access 2000 CDMA2000 Wideband Code Division Multiple Access WCDMA Time Division Synchronous Code Division Multiple Access TD SCDMA and or the like. The mobile terminal may be additionally capable of operating in accordance with 3.9G wireless communication protocols such as Long Term Evolution LTE or Evolved Universal Terrestrial Radio Access Network E UTRAN and or the like. Additionally for example the mobile terminal may be capable of operating in accordance with fourth generation 4G wireless communication protocols and or the like as well as similar wireless communication protocols that may be developed in the future.

Some Narrow band Advanced Mobile Phone System NAMPS as well as Total Access Communication System TACS mobile terminals may also benefit from embodiments of this invention as should dual or higher mode phones for example digital analog or TDMA CDMA analog phones . Additionally the mobile terminal may be capable of operating according to Wi Fi or Worldwide Interoperability for Microwave Access WiMAX protocols.

It is understood that the processor may comprise circuitry for implementing audio video and logic functions of the mobile terminal . For example the processor may comprise a digital signal processor device a microprocessor device an analog to digital converter a digital to analog converter and or the like. Control and signal processing functions of the mobile terminal may be allocated between these devices according to their respective capabilities. The processor may additionally comprise an internal voice coder VC an internal data modem DM and or the like. Further the processor may comprise functionality to operate one or more software programs which may be stored in memory. For example the processor may be capable of operating a connectivity program such as a web browser. The connectivity program may allow the mobile terminal to transmit and receive web content such as location based content according to a protocol such as Wireless Application Protocol WAP hypertext transfer protocol HTTP and or the like. The mobile terminal may be capable of using a Transmission Control Protocol Internet Protocol TCP IP to transmit and receive web content across the interne or other networks.

The mobile terminal may also comprise a user interface including for example an earphone or speaker a ringer a microphone a display a user input interface and or the like which may be operationally coupled to the processor . In this regard the processor may comprise user interface circuitry configured to control at least some functions of one or more elements of the user interface such as for example the speaker the ringer the microphone the display and or the like. The processor and or user interface circuitry comprising the processor may be configured to control one or more functions of one or more elements of the user interface through computer program instructions for example software and or firmware stored on a memory accessible to the processor for example volatile memory non volatile memory and or the like . Although not shown the mobile terminal may comprise a battery for powering various circuits related to the mobile terminal for example a circuit to provide mechanical vibration as a detectable output. The user input interface may comprise devices allowing the mobile terminal to receive data such as a keypad a touch display not shown a joystick not shown and or other input device. In embodiments including a keypad the keypad may comprise numeric 0 9 and related keys and or other keys for operating the mobile terminal.

As shown in the mobile terminal may also include one or more means for sharing and or obtaining data. For example the mobile terminal may comprise a short range radio frequency RF transceiver and or interrogator so data may be shared with and or obtained from electronic devices in accordance with RF techniques. The mobile terminal may comprise other short range transceivers such as for example an infrared IR transceiver a Bluetooth BT transceiver operating using Bluetooth brand wireless technology developed by the Bluetooth Special Interest Group a wireless universal serial bus USB transceiver and or the like. The Bluetooth transceiver may be capable of operating according to ultra low power Bluetooth technology for example Wibree radio standards. In this regard the mobile terminal and in particular the short range transceiver may be capable of transmitting data to and or receiving data from electronic devices within a proximity of the mobile terminal such as within 10 meters for example. Although not shown the mobile terminal may be capable of transmitting and or receiving data from electronic devices according to various wireless networking techniques including Wi Fi WLAN techniques such as IEEE 802.11 techniques IEEE 802.15 techniques IEEE 802.16 techniques and or the like.

The mobile terminal may comprise memory such as a subscriber identity module SIM a removable user identity module R UIM and or the like which may store information elements related to a mobile subscriber. In addition to the SIM the mobile terminal may comprise other removable and or fixed memory. The mobile terminal may include volatile memory and or non volatile memory . For example volatile memory may include Random Access Memory RAM including dynamic and or static RAM on chip or off chip cache memory and or the like. Non volatile memory which may be embedded and or removable may include for example read only memory flash memory magnetic storage devices for example hard disks floppy disk drives magnetic tape etc. optical disc drives and or media non volatile random access memory NVRAM and or the like. Like volatile memory non volatile memory may include a cache area for temporary storage of data. The memories may store one or more software programs instructions pieces of information data and or the like which may be used by the mobile terminal for performing functions of the mobile terminal. For example the memories may comprise an identifier such as an international mobile equipment identification IMEI code capable of uniquely identifying the mobile terminal .

Referring now to illustrates a more detailed block diagram of an execution apparatus according to an example embodiment. In the example embodiment the execution apparatus includes various means for performing the various functions herein described. These means may comprise one or more of a processor memory communication interface user interface or driver control circuitry . The means of the execution apparatus as described herein may be embodied as for example circuitry hardware elements for example a suitably programmed processor combinational logic circuit and or the like a computer program product comprising computer readable program instructions for example software or firmware stored on a computer readable medium for example memory that is executable by a suitably configured processing device for example the processor or some combination thereof.

In some example embodiments one or more of the means illustrated in may be embodied as a chip or chip set. In other words the execution apparatus may comprise one or more physical packages for example chips including materials components and or wires on a structural assembly for example a baseboard . The structural assembly may provide physical strength conservation of size and or limitation of electrical interaction for component circuitry included thereon. In this regard the processor memory communication interface user interface and or driver control circuitry may be embodied as a chip or chip set. The execution apparatus may therefore in some example embodiments be configured to implement embodiments of the present invention on a single chip or as a single system on a chip. As another example in some example embodiments the execution apparatus may comprise component s configured to implement embodiments of the present invention on a single chip or as a single system on a chip. As such in some cases a chip or chipset may constitute means for performing one or more operations for providing the functionalities described herein and or for enabling user interface navigation with respect to the functionalities and or services described herein.

The processor may for example be embodied as various means including one or more microprocessors with accompanying digital signal processor s one or more processor s without an accompanying digital signal processor one or more coprocessors one or more multi core processors one or more controllers processing circuitry one or more computers various other processing elements including integrated circuits such as for example an ASIC application specific integrated circuit or FPGA field programmable gate array one or more other hardware processors or some combination thereof. Accordingly although illustrated in as a single processor in some embodiments the processor comprises a plurality of processors. The plurality of processors may be in operative communication with each other and may be collectively configured to perform one or more functionalities of the execution apparatus as described herein. The plurality of processors may be embodied on a single computing device or distributed across a plurality of computing devices collectively configured to function as the execution apparatus . In embodiments wherein the execution apparatus is embodied as a mobile terminal the processor may be embodied as or comprise the processor . In some example embodiments the processor is configured to execute instructions stored in the memory or otherwise accessible to the processor . These instructions when executed by the processor may cause the execution apparatus to perform one or more of the functionalities of the execution apparatus as described herein. As such whether configured by hardware or software methods or by a combination thereof the processor may comprise an entity capable of performing operations according to embodiments of the present invention while configured accordingly. Thus for example when the processor is embodied as an ASIC FPGA or the like the processor may comprise specifically configured hardware for conducting one or more operations described herein. Alternatively as another example when the processor is embodied as an executor of instructions such as may be stored in the memory the instructions may specifically configure the processor to perform one or more algorithms and operations described herein.

The memory may comprise for example volatile memory non volatile memory or some combination thereof. In this regard the memory may comprise a non transitory computer readable storage medium. Although illustrated in as a single memory the memory may comprise a plurality of memories. The plurality of memories may be embodied on a single computing device or may be distributed across a plurality of computing devices collectively configured to function as the execution apparatus . In various example embodiments the memory may comprise a hard disk random access memory cache memory flash memory a compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM an optical disc circuitry configured to store information or some combination thereof. In embodiments wherein the execution apparatus is embodied as a mobile terminal the memory may comprise the volatile memory and or the non volatile memory . The memory may be configured to store information data applications instructions or the like for enabling the execution apparatus to carry out various functions in accordance with various example embodiments. For example in some example embodiments the memory is configured to buffer input data for processing by the processor . Additionally or alternatively the memory may be configured to store program instructions for execution by the processor . The memory may store information in the form of static and or dynamic information. This stored information may be stored and or used by the driver control circuitry during the course of performing its functionalities.

The communication interface may be embodied as any device or means embodied in circuitry hardware a computer program product comprising computer readable program instructions stored on a computer readable medium for example the memory and executed by a processing device for example the processor or a combination thereof that is configured to receive and or transmit data from to another computing device. In an example embodiment the communication interface is at least partially embodied as or otherwise controlled by the processor . In this regard the communication interface may be in communication with the processor such as via a bus. The communication interface may include for example an antenna a transmitter a receiver a transceiver and or supporting hardware or software for enabling communications with one or more remote computing devices. The communication interface may be configured to receive and or transmit data using any protocol that may be used for communications between computing devices. In this regard the communication interface may be configured to receive and or transmit data using any protocol that may be used for transmission of data over a wireless network wireline network some combination thereof or the like by which the execution apparatus and one or more computing devices or computing resources may be in communication. As an example the communication interface may be configured to enable communication between the execution apparatus and the compilation apparatus over a network for example the network . The communication interface may additionally be in communication with the memory user interface and or driver control circuitry such as via a bus.

The user interface may be in communication with the processor to receive an indication of a user input and or to provide an audible visual mechanical or other output to a user. As such the user interface may include for example a keyboard a mouse a joystick a display a touch screen display a microphone a speaker and or other input output mechanisms. In embodiments wherein the user interface comprises a touch screen display the user interface may additionally be configured to detect and or receive an indication of a touch gesture or other input to the touch screen display. The user interface may be in communication with the memory communication interface and or driver control circuitry such as via a bus.

The driver control circuitry may be embodied as various means such as circuitry hardware a computer program product comprising computer readable program instructions stored on a computer readable medium for example the memory and executed by a processing device for example the processor or some combination thereof and in some embodiments is embodied as or otherwise controlled by the processor . In embodiments wherein the driver control circuitry is embodied separately from the processor the driver control circuitry may be in communication with the processor . The driver control circuitry may further be in communication with one or more of the memory communication interface or user interface such as via a bus.

Referring now to illustrates a more detailed block diagram of a compilation apparatus according to an example embodiment. In the example embodiment the compilation apparatus includes various means for performing the various functions herein described. These means may comprise one or more of a processor memory communication interface or compilation circuitry . The means of the compilation apparatus as described herein may be embodied as for example circuitry hardware elements for example a suitably programmed processor combinational logic circuit and or the like a computer program product comprising computer readable program instructions for example software or firmware stored on a computer readable medium for example memory that is executable by a suitably configured processing device for example the processor or some combination thereof.

In some example embodiments one or more of the means illustrated in may be embodied as a chip or chip set. In other words the compilation apparatus may comprise one or more physical packages for example chips including materials components and or wires on a structural assembly for example a baseboard . The structural assembly may provide physical strength conservation of size and or limitation of electrical interaction for component circuitry included thereon. In this regard the processor memory communication interface and or compilation circuitry may be embodied as a chip or chip set. The compilation apparatus may therefore in some example embodiments be configured to implement embodiments of the present invention on a single chip or as a single system on a chip. As another example in some example embodiments the compilation apparatus may comprise component s configured to implement embodiments of the present invention on a single chip or as a single system on a chip. As such in some cases a chip or chipset may constitute means for performing one or more operations for providing the functionalities described herein and or for enabling user interface navigation with respect to the functionalities and or services described herein.

The processor may for example be embodied as various means including one or more microprocessors with accompanying digital signal processor s one or more processor s without an accompanying digital signal processor one or more coprocessors one or more multi core processors one or more controllers processing circuitry one or more computers various other processing elements including integrated circuits such as for example an ASIC application specific integrated circuit or FPGA field programmable gate array one or more other hardware processors or some combination thereof. Accordingly although illustrated in as a single processor in some embodiments the processor comprises a plurality of processors. The plurality of processors may be in operative communication with each other and may be collectively configured to perform one or more functionalities of the compilation apparatus as described herein. The plurality of processors may be embodied on a single computing device or distributed across a plurality of computing devices collectively configured to function as the compilation apparatus . In some example embodiments the processor may be configured to execute instructions stored in the memory or otherwise accessible to the processor . These instructions when executed by the processor may cause the compilation apparatus to perform one or more of the functionalities of the compilation apparatus as described herein. As such whether configured by hardware or software methods or by a combination thereof the processor may comprise an entity capable of performing operations according to embodiments of the present invention while configured accordingly. Thus for example when the processor is embodied as an ASIC FPGA or the like the processor may comprise specifically configured hardware for conducting one or more operations described herein. Alternatively as another example when the processor is embodied as an executor of instructions such as may be stored in the memory the instructions may specifically configure the processor to perform one or more algorithms and operations described herein.

The memory may comprise for example volatile memory non volatile memory or some combination thereof. In this regard the memory may comprise a non transitory computer readable storage medium. Although illustrated in as a single memory the memory may comprise a plurality of memories. The plurality of memories may be embodied on a single computing device or may be distributed across a plurality of computing devices collectively configured to function as the compilation apparatus . In various example embodiments the memory may comprise a hard disk random access memory cache memory flash memory a compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM an optical disc circuitry configured to store information or some combination thereof. The memory may be configured to store information data applications instructions or the like for enabling the compilation apparatus to carry out various functions in accordance with various example embodiments. For example in some example embodiments the memory is configured to buffer input data for processing by the processor . Additionally or alternatively the memory may be configured to store program instructions for execution by the processor . The memory may store information in the form of static and or dynamic information. The stored information may for example include one or more data resources. This stored information may be stored and or used by the compilation circuitry during the course of performing its functionalities.

The communication interface may be embodied as any device or means embodied in circuitry hardware a computer program product comprising computer readable program instructions stored on a computer readable medium for example the memory and executed by a processing device for example the processor or a combination thereof that is configured to receive and or transmit data from to another computing device. In an example embodiment the communication interface is at least partially embodied as or otherwise controlled by the processor . In this regard the communication interface may be in communication with the processor such as via a bus. The communication interface may include for example an antenna a transmitter a receiver a transceiver and or supporting hardware or software for enabling communications with one or more remote computing devices. The communication interface may be configured to receive and or transmit data using any protocol that may be used for communications between computing devices. In this regard the communication interface may be configured to receive and or transmit data using any protocol that may be used for transmission of data over a wireless network wireline network some combination thereof or the like by which the compilation apparatus and one or more computing devices or computing resources may be in communication. As an example the communication interface may be configured to enable communication between the compilation apparatus and the execution apparatus over a network for example the network . The communication interface may additionally be in communication with the memory and or compilation circuitry such as via a bus.

The compilation circuitry may be embodied as various means such as circuitry hardware a computer program product comprising computer readable program instructions stored on a computer readable medium for example the memory and executed by a processing device for example the processor or some combination thereof and in some embodiments is embodied as or otherwise controlled by the processor . In embodiments wherein the compilation circuitry is embodied separately from the processor the compilation circuitry may be in communication with the processor . The compilation circuitry may further be in communication with one or more of the memory or communication interface such as via a bus.

In some example embodiments a framework may be implemented on the execution apparatus . The framework may be configured to handle applications such as web applications requiring runtime compilation. In this regard the framework may in some example embodiments be configured to handle kernels such as may be embedded in applications which may require runtime compilation. However in some example embodiments the execution apparatus may not include a compiler for the framework or may include a limited compiler that may not include a full range of compilation capabilities. The framework may comprise a framework for coordinating parallel execution of a compiled executable version of an application requiring runtime compilation across a plurality of heterogeneous processors. In this regard the framework of some example embodiments may facilitate execution of an application and or kernel thereof compiled such that the application and or kernel thereof is targeted to execute in parallel on a particular set of heterogeneous processors and or other computing resources which may be implemented on some example embodiments of an execution apparatus . In such example embodiments the framework may comprise an Open Computing Language OpenCL implementation Open Graphics Library OpenGL implementation or the like.

In some example embodiments the driver control circuitry is configured to implement a driver for a framework implemented on the execution apparatus . In this regard the driver control circuitry may be configured to implement and control functionalities of various example driver embodiments described herein. The driver implemented by the driver control circuitry in accordance with some example embodiments may be configured to provide an application programming interface API for the framework.

In example embodiments wherein the framework comprises an OpenCL implementation the driver control circuitry may be configured to implement an OpenCL driver. In this regard illustrates an example software stack in accordance with some example embodiments wherein the driver control circuitry is configured to implement an OpenCL driver . The layer may comprise a web application. The web application may for example be implemented using HyperText Markup Language HTML Cascading Style Sheets CSS JavaScript WebGL OpenGL JavaScript bindings WebCL OpenCL with JavaScript bindings some combination thereof and or the like. As an example the web application may comprise a WebCL kernel. The web application and or kernel thereof may for example be received by the execution apparatus from an application source via the network . The WebCL layer may provide JavaScript or other bindings that may expose OpenCL capabilities to the web application layer such that a web application may be implemented on an underlying OpenCL framework. The OpenCL driver layer may comprise a driver implemented by the driver control circuitry in accordance with some example embodiments. In this regard the OpenCL driver layer may provide an OpenCL driver which may provide an OpenCL API and at least some of the functionality thereof. The hardware layer may comprise an underlying hardware execution platform on which an application such as the web application layer may execute with the assistance of the OpenCL driver layer .

It will be appreciated that the example software stack of is provided by way of example and not by way of limitation. In this regard other software stacks may be implemented in addition to or in lieu of that illustrated in . Further it will be appreciated that a driver implemented by the driver control circuitry in accordance with various example embodiments is not limited to being implemented as an OpenCL driver. As such where example embodiments are described herein with reference to OpenCL it will be appreciated that OpenCL is used for purposes of example. In this regard other frameworks may be substituted for OpenCL within the scope of the disclosure and the driver control circuitry may accordingly be configured to implement drivers for such other frameworks.

A kernel such as may be included in an application e.g. a web application may comprise any function that may be executed when compiled. In this regard an OpenCL kernel and or a WebCL kernel may comprise a computation function which may be described using OpenCL C language. As another example a kernel may comprise an intermediate representation such as byte code that may require further compilation prior to execution. A driver implemented in accordance with some example embodiments may be configured to receive code e.g. source code byte code and or the like for a kernel s requiring runtime compilation for execution using a framework implemented on the execution apparatus . The code may have been developed independent of knowledge of an execution platform of the execution apparatus . The kernel may be received or otherwise accessed by the execution apparatus from an application source . As an example the kernel may be embedded in and or may otherwise comprise a component of an application such as a web application that may be accessed by the execution apparatus .

The driver may be further configured to obtain a compiled executable version of the kernel. In this regard the driver may be configured to obtain a compiled executable that is targeted for execution on an execution platform of the execution apparatus . The executable may be in any format that is compatible with a framework e.g. an OpenCL framework implemented on the execution apparatus and or that is otherwise executable on an execution platform of the execution apparatus . By way of example the compiled executable may comprise an executable binary byte code optimized code an intermediate code representation interpretable by the execution platform and or the like.

In some example embodiments the driver may be configured to leverage a remote compiler that may be implemented on the compilation apparatus by the compilation circuitry in order to obtain a compiled executable version of an application. In this regard the compiler functionality may be at least partially offloaded from the execution apparatus to the compilation apparatus in a thin client mode. Accordingly such example embodiments may enable execution of kernels requiring runtime compilation even on apparatuses that do not include a compiler or that do not include a full featured compiler for the framework. As an additional example some example embodiments wherein the driver is configured to leverage a remote compiler may allow for load balancing between the execution apparatus and compilation apparatus by offloading compilation. As such in some example embodiments wherein an OpenCL framework is implemented on the execution apparatus compiler dependencies for the framework may be at least partially removed by the driver through implementation of a remote compiler on the compilation apparatus . In some example embodiments wherein the driver comprises an OpenCL driver the driver may be configured to provide runtime compilation support for OpenCL embedded profile through use of a compiler remotely implemented on the compilation apparatus . In this regard the driver may be implemented in conjunction with OpenCL embedded profile to provide support for runtime compilation through use of a compiler implemented remotely in a thin client mode.

The driver may be configured to cause a compilation request comprising code e.g. source code byte code some combination thereof or the like for a kernel to be sent to the compilation apparatus to enable compilation of the code by the compilation apparatus . In addition to the code the compilation request may comprise information about an execution platform of the execution apparatus that may enable the compilation apparatus to target compilation to generate a compiled executable that is targeted for execution on the execution platform. Accordingly the information may comprise information about a hardware platform e.g. the hardware layer of the execution apparatus a capability of a user interface of the execution apparatus e.g. of the user interface an operating system implemented on the execution platform a runtime library implemented on the execution platform a software configuration of the execution platform a type of the execution apparatus network subscriber information for the execution apparatus or user thereof network capabilities network access restrictions and or the like. In some example embodiments the compilation request may additionally or alternatively include information identifying the execution apparatus . The identification information may for example comprise one or more of a serial number of the execution apparatus a phone number of the execution apparatus an international mobile equipment identity IMEI of the execution apparatus a media access control MAC address of the execution apparatus a type of the execution apparatus e.g. make and model a username of a user e.g. a username used for accessing a service of the execution apparatus or the like. The identification information may for example enable the compilation apparatus to obtain information about an execution platform of the execution apparatus from one or more information sources to enable targeted compilation of the source code.

The compilation circuitry may be configured to receive a compilation request sent by the execution apparatus and may compile at least a portion of the code contained in the request to generate a compiled executable version of the kernel. The compilation circuitry may target compilation to an execution platform of the execution apparatus . In this regard the compilation circuitry may compile the code based at least in part on information about the execution platform that may be included in the compilation request and or that may be accessible based at least in part on information included in the compilation request. In some example embodiments wherein the compilation request includes identification information the compilation circuitry may utilize the identification information to access information about an execution platform of the execution apparatus from one or more information sources .

In some example embodiments the compilation circuitry may be configured to provide code translation or conversion. For example the compilation circuitry may extend OpenCL C kernel language and or other language or framework support to another language or framework that may be supported by the execution apparatus . In this regard the compilation circuitry may be configured to generate an executable based on another language or framework than that for which the source code was produced. As an example Java byte code or JavaScript may be generated at least in part through translation or conversion of an OpenCL kernel.

In some example embodiments the compilation circuitry may be configured to implement security features to provide secure compilation of source code. As an example the compilation circuitry may utilize sandboxing for compiling code. As another example the compilation circuitry may execute and or otherwise test a compiled executable in a secure e.g. sandboxed environment for evaluation purposes prior to sending a compiled executable to an execution apparatus .

The compilation circuitry may be further configured to cause a compilation response to be sent to the execution apparatus . The compilation response may include a compiled executable which may for example be targeted for execution on an execution platform of the execution apparatus .

In some example embodiments the compilation circuitry may maintain a library e.g. a cache of pre compiled kernels such as in the memory . In such example embodiments the compilation circuitry may be configured to determine whether an appropriate pre compiled kernel corresponding to code received in a compilation request is available in the library prior to compiling received code. If a pre compiled kernel is available the compilation circuitry may send the pre compiled kernel to the execution apparatus in a compilation response. If however the compilation circuitry determines that an appropriate pre compiled kernel is not available the compilation circuitry may compile the code.

The driver may receive the compiled executable and may cause the compiled executable to be provided e.g. returned for execution on an execution platform of the execution apparatus . In this regard the driver may for example provide the compiled executable for execution on the hardware layer .

In some example embodiments the driver may be configured to implement a cache which may store compiled executable versions of kernels for later use. This cache may for example be implemented on the memory . In such example embodiments the driver may cause storage of a compiled executable received in a compilation response for later usage. Further in such example embodiments when the driver receives code for a kernel requiring at least partial runtime compilation the driver may determine whether a previously compiled executable version of the kernel is stored in the cache prior to sending a compilation request to the compilation apparatus . If a cached version is available the driver may retrieve the cached version and provide the cached version for execution rather than sending a compilation request to the compilation apparatus . However if a cached version is not available then the driver may send the code to the compilation apparatus in a compilation request as previously described.

Referring now to illustrates a block diagram of a driver framework in accordance with some example embodiments. In this regard illustrates an example implementation of an OpenCL driver framework. In this regard the driver control circuitry may be configured to implement the OpenCL driver which may be configured to perform at least some of the driver functionality described herein. The framework may further include a cache which may be used to store previously compiled executable versions of kernels. A proxy may additionally be implemented to facilitate sending compilation requests to the compilation apparatus and receiving compilation responses from the compilation apparatus .

The compilation circuitry may be configured to implement the OpenCL compiler which may be configured to compile an OpenCL kernel received from the execution apparatus . A compilation apparatus implementing the framework of may further include a cache for storing compiled executables. In this regard compilation latency may be reduced for future requests by storing previously compiled executables executables for the most popular applications web sites and or the like. The framework may further include the proxy which may facilitate receiving compilation requests from the execution apparatus and sending compilation responses to the execution apparatus .

The OpenCL driver may implement a build program function. Pseudo code for the function may for example be defined as 

Accordingly the build program function may determine if a compiled executable version of the program e.g. the kernel is already cached line 2 . This determination may for example be made by comparing program information in the cache to program information provided as a parameter when the build program function was called. If a compiled executable version of the program is available it may be returned for execution line 3 .

If however a compiled executable version is not available in the cache the build program function may determine if a network connection e.g. a network connection to the compilation apparatus via the network is available line 6 . If the network connection is available the kernel source and associated execution platform data may be composed in a compilation request message Req compile and sent to the compilation apparatus lines 7 8 . The execution platform data may include exact platform information for the compilation and or identification information for the execution apparatus that may enable the OpenCL compiler to access execution platform data from an information source . After receiving the compilation result in a compilation response the program object e.g. the kernel object may be composed and returned to the calling function lines 7 12 .

The compiled executable may additionally be stored in the cache for later use line 11 . The cache may for example store executables from web pages that a user of the execution apparatus visits often. In this regard rather than again compiling the same code the previously compiled executable may be accessed from the cache . Further the cache may enable offline usage of the OpenCL driver provided that a compiled executable for a given application is stored in the cache .

If however the network connection is not available a compiler may not be available for compilation of the source code. As such a COMPILER NOT AVAILABLE message may be returned line 15 . In other words the network connection may enable full OpenCL support and without network connection and if the program is not in cache the driver may return an OpenCL error COMPILER NOT AVAILABLE. illustrates a more detailed pseudo code representation of an implementation of a build program function in accordance with some example embodiments.

Some web application may be used offline in accordance with standards providing a browser cache. For example HTML5 provides HTML5 localStorage and HTML5 application cache functionality. Accordingly in some example embodiments wherein the driver control circuitry implements a driver that caches compiled executables the driver may be configured to handle signaling between the browser cache and the executables cache to manage coherency of the caches e.g. when to flush keep data in caches . Alternatively in some embodiments the executables cache may be integrated with or otherwise combined with the browser cache.

The driver of some example embodiments may offload other tasks of a framework driver to the compilation apparatus in addition to the compiler. In this regard for example additional aspects of an OpenCL platform may be serialized and passed to the execution apparatus for implementation by the compilation circuitry .

If it is determined in operation that a previously compiled executable version of the kernel is locally stored operation may comprise the driver causing retrieval of the locally stored previously compiled executable version of the kernel. The previously compiled executable version may for example have been previously compiled by a compilation apparatus and cached by the execution apparatus for later use. The processor memory and or driver control circuitry may for example provide means for performing operation . If however it is determined in operation that a previously compiled executable version of the kernel is not locally stored operation may comprise the driver causing a compilation request comprising the code to be sent to a compilation apparatus. The processor memory communication interface and or driver control circuitry may for example provide means for performing operation . Operation may comprise the driver receiving a compiled executable version of the kernel from the compilation apparatus in response to the compilation request. The processor memory communication interface and or driver control circuitry may for example provide means for performing operation . Operation may comprise the driver causing the compiled executable version e.g. the executable version obtained in operation or in operation of the kernel to be provided for execution. The processor memory and or driver control circuitry may for example provide means for performing operation .

Accordingly blocks of the flowcharts support combinations of means for performing the specified functions. It will also be understood that one or more blocks of the flowcharts and combinations of blocks in the flowcharts may be implemented by special purpose hardware based computer systems which perform the specified functions or combinations of special purpose hardware and computer program product s .

The above described functions may be carried out in many ways. For example any suitable means for carrying out each of the functions described above may be employed to carry out embodiments of the invention. In one embodiment a suitably configured processor for example the processor and or processor may provide all or a portion of the elements. In another embodiment all or a portion of the elements may be configured by and operate under control of a computer program product. The computer program product for performing the methods of an example embodiment includes a computer readable storage medium for example the memory and or memory such as the non volatile storage medium and computer readable program code portions such as a series of computer instructions embodied in the computer readable storage medium.

Many modifications and other embodiments of the inventions set forth herein will come to mind to one skilled in the art to which these inventions pertain having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is to be understood that the embodiments of the invention are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the invention. Moreover although the foregoing descriptions and the associated drawings describe example embodiments in the context of certain example combinations of elements and or functions it should be appreciated that different combinations of elements and or functions may be provided by alternative embodiments without departing from the scope of the invention. In this regard for example different combinations of elements and or functions than those explicitly described above are also contemplated within the scope of the invention. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

