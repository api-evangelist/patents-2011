---

title: Estimating relatedness in social network
abstract: To facilitate the estimation of relatedness between nodes of a graph, implementations estimate relatedness between nodes in a graph by pre-computing for a subset of sample nodes (e.g., center nodes) a plurality of transition probabilities between each sample node and each of the other nodes in the graph, and then later when queried the implementations calculate in real-time the resultant estimated transition probability between the first node and the second node through the at least one sample node based on the pre-computed transition probabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08719211&OS=08719211&RS=08719211
owner: Microsoft Corporation
number: 08719211
owner_city: Redmond
owner_country: US
publication_date: 20110201
---
Graphs are useful for modeling many real world systems such as highway systems telephone networks and the World Wide Web. For example a graph representing a highway system might be used to determine the shortest distance between an origin and a planned destination. A graph may also be used to represent the relationships between Internet web pages where nodes represent individual web pages and edges represent links between web pages. In general graphs typically comprise multiple nodes or vertices connected to one another by one or more edges. Such graphs may be directed or undirected and there may be a weight a length distance or a cost associated with one or more edges.

In modeling real world abstractions graphs can be used to measure the relatedness between two nodes. Depending on the model the relatedness can be measured several different ways. One measure of relatedness may be the shortest path distance between two nodes in the graph. Another measure of relatedness may be the number of paths presumably of a certain length between a pair of nodes. However as the number of nodes and edges in a graph grows the average time and computing resources needed to calculate the relatedness between two nodes can become enormous and become problematic when computational resources are limited and or near instantaneous or real time results are desirable or expected.

Social networks are one instance of a real world abstraction that can be readily modeled with a very large graph. In such a model people in the social network can be represented as a set of nodes and relationships can be represented as the edges between the nodes. In some implementation each edge may be weighted to reflect the degree of direct relatedness between each node while the sum of weights of intervening edges can be used to reflect the degree of indirect relatedness between any two nodes not directly connected. However with the immense size of Internet based social networks having tens of millions of nodes connected by varying degrees of separation it has become increasingly difficult to determine the relatedness between persons as represented by say determining the shortest path between two nodes. This is particularly problematic in situations where real time computations are required or computational resources are limited or both.

To facilitate the estimation of relatedness between nodes of a graph implementations disclosed herein estimate relatedness between nodes in a graph by pre computing for a subset of sample nodes e.g. center nodes a plurality of transition probabilities between each sample node and each of the other nodes in the graph. Later when queried the implementations calculate in real time the resultant estimated transition probability between the first node and the second node through the at least one sample node based on the pre computed transition probabilities.

For certain implementations pre computing an estimated relatedness in a graph comprises selecting a subset of sample nodes pre computing transition probabilities between each sample node in the subset of sample nodes and each other node and storing the plurality of transition probabilities.

Similarly for certain implementations estimating relatedness between a first node and a second node in a graph wherein transition probabilities have been pre computed and stored for the nodes in relation to a subset of sample nodes comprises identifying at least one sample node that is common to both the first node and the second node such that the transition probabilities comprises both at least one individual transition probability between the at least one sample node and the first node and at least one individual transition probability between the at least one sample node and the second node and calculating a resultant transition probability between the first node and the second node through the at least one sample node.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A user of the computing device as a result of the supported network medium is able to access network resources typically through the use of a browser application running on the computing device . The browser application facilitates communication with a remote network over for example the Internet which in turn may facilitate communication with a social network service running on a social network server . The social network server further comprises a social network engine for establishing and expanding the number of relationships edges between members of the social network nodes where members and corresponding relationships are comprised within the social network data .

Another network resource and one exemplary implementation includes a relatedness service running on a social network relatedness system . As described further below in some implementations the relatedness service may receive two nodes of a graph represented by graph data and corresponding to social network data from the user of the computing device and use sketch data previously derived from the graph data by a pre computation engine to estimate the random walk transition probability between the two nodes of the graph as a measure of relatedness between the two members of the social network corresponding to the nodes. This measure of relatedness may then be returned to the user at the computing device . The social network relatedness system and or the relatedness service may be implemented using one or more general purpose computing devices such as the computing device described with respect to for example.

As described above a graph may include one or more nodes or vertices connected to one another by one or more edges. Each edge may further have a weight that represents relatedness between the two nodes it directly connects. The total relatedness between two non connected nodes traveling on a relationship path from one node to another node may be determined by adding the weights of each of the edges of the relationship path and is referred to herein as the relatedness between the two nodes. The path between two nodes with the lowest relatedness sum from the graph corresponds to the strongest relatedness between the two nodes.

A graph can be a directed graph or an undirected graph. In an undirected graph edges between nodes are bi directional and symmetrical and thus correspond well to real world abstractions like roadmaps. In a directed graph however edges between nodes are one way and or asymmetrical thus a directed graph is useful in representing real world abstractions such as plumbing systems and links between webpages which both represent one way travel .

For a graph representing a social network edges can be either directed or undirected depending on what is being measured for example a social network based on who knows who could be a directed graph since for example famous people may be known by ordinary people but not vice versa in contrast a social network based on strength of the relationship which is presumably shared equally by both persons might be better represented as an undirected graph. For directed graphs the edges that lead to a node are referred to as the in edges of the node. Similarly the edges that lead out of the node e.g. to other nodes are referred to as the out edges of the node. Because undirected graphs have two way movement the number of in edges and out edges for a node in an undirected graph is the same.

In some implementations the social network relatedness system may store one or more social networks as graph data . The graph data may include a variety of directed and undirected graphs with each graph representing a variety of systems. In some implementations the graph data may be stored as a table with an entry for each node and a list of the edges associated with the node and their respective weights or costs. Where the graphs are directed the direction of each edge may also be indicated. However any data structure or technique for storing graphs may be used. In addition metadata or other descriptive data may also be stored with the graph data .

To facilitate the estimation of relatedness between nodes of a graph the social network relatedness system may include a pre computation engine . The pre computation engine may generate one or more sketches for each node of the graph data . As described further herein in some implementations a sketch may comprise a list table or other data structure that is associated with each node in the graph and includes indicators of some subset of the nodes of the graph along with known relatednesss between the node and the identified nodes in the subsets of the nodes. These generated sketches may be stored by the pre computation engine as the sketch data . In certain implementations the sketch data may be pre computed by the pre computation engine . The pre computed sketches may be used by the relatedness service to estimate the relatedness between two nodes of the graph. By pre computing the sketch data the relatedness service may quickly respond to received queries using the pre computed sketches.

Then when later queried to do so after the pre computation is complete and as shown at the relatedness service of can calculate a resultant transition probability between two nodes in the query based on the transition probabilities pre computed for the two nodes through the center nodes. These elements are discussed in further detail below.

Generally this sample subset is relatively small and in some implementations may comprise only the true central nodes while in other implementations may comprise only relatively central nodes where no nodes of greater centricity remain unselected for the sampling subset. Of course in other implementations the sample subset could comprise a mix of centers and non center nodes or the sample subset could also comprise a random selection of nodes in yet other implementations.

At the pre computation engine calculates transition probabilities from each center to every other node including center and non center nodes in the graph. Certain embodiments may utilize a predetermined number of random walks to determine estimated transitional probabilities while other embodiments may use a flexible number of random walks or another technique altogether for determining an estimated transitional probability.

Then at the pre computation engine stores each calculated transition probability as sketch data in certain implementations or directly with each node in certain other implementations. When so stored with each node in the graph each non center node then has near at hand the transition probabilities from itself to each of the sample nodes equal in number to the number of sampling nodes while each of the sample nodes would also have transition probabilities from itself to each of the other sample nodes equal in number to one less than the number of sampling nodes . In alternative embodiments each non center or non sample node might only store a subset of transition probabilities provided to it such as only those transition probabilities corresponding to near or close sample nodes. This may be relevant when determining a resulting transition probability between two query nodes.

After the pre computation engine has completed its work on a subject graph the social network relatedness system is then ready to receive and timely service queries for the relatedness between two nodes within the graph representing the social network. is an operational flow diagram of an implementation of a method for calculating a resultant estimated relatedness between two nodes using the pre computed estimated relatedness. At the relatedness service receives a query for relatedness between two people in the social network represented as a pair of input nodes in the graph as represented in graph data corresponding to the social network data .

At the relatedness service retrieves the calculated transition probabilities corresponding to both nodes from each of those nodes and then at determines the resultant estimated transition probability between the pair of nodes based on the retrieved pre computed transition probabilities.

To calculate the resulting transition probability between two query nodes one of several approaches might be used depending on the implementation. For example for those implementations where each non sample node stores all of the transition probabilities to each and every sample node the resultant transition probability can be derived by normalizing the results of each path through each sample node. Similarly for those other implementations that keep at least one more than half of the transition probabilities corresponding to one more than half of the sample nodes then each node will have at least one overlapping sampling node in common with every other node in the graph and thus will be able to derived at least one path through at least one sample node. And for those implementations where the nodes only maintain as little as one transition probability corresponding to a single close or near sample node then the resulting transition probability can be determined using the transition probability for each query node to their corresponding sample node and if the sample nodes are different further utilizing the transition probability between the two sample nodes.

In a random walk of length I through the graph a random walk of length four starting from the node may travel to node by following edge may then travel to node by following edge may then travel to node by following edge and may then travel to node by following edge . In some implementations the particular edge selected to follow in a random walk may be pseudo randomly selected. For example at node whether to follow edge or edge may be decided by using a pseudo random algorithm with an approximately 50 chance of choosing either edge or edge . At node whether to follow edge or may be decided by a pseudo random algorithm with an approximately 33 chance of choosing any of edges or . Any known method or technique for making pseudo random selections may be used in alternate implementations herein described.

Numerous other general purpose or special purpose computing system environments or configurations may be used. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs server computers handheld or laptop devices multiprocessor systems microprocessor based systems network PCs minicomputers mainframe computers embedded systems distributed computing environments that include any of the above systems or devices and the like.

Computer executable instructions such as program modules being executed by a computer may be used. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Distributed computing environments may be used where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules and other data may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects described herein includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as random access memory RAM non volatile such as read only memory ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Computing device may have additional features functionality. For example computing device may include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage .

Computing device typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by device and include both volatile and non volatile media and removable and non removable media.

Computer storage media include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media include but are not limited to RAM ROM electrically erasable program read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of computing device .

Computing device may contain communications connection s that allow the device to communicate with other devices. Computing device may also have input device s such as a keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. All these devices are well known in the art and need not be discussed at length here.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the processes and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium where when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter.

Although exemplary implementations may refer to utilizing aspects of the presently disclosed subject matter in the context of one or more stand alone computer systems the subject matter is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Still further aspects of the presently disclosed subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be affected across a plurality of devices. Such devices might include PCs network servers and handheld devices for example.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

