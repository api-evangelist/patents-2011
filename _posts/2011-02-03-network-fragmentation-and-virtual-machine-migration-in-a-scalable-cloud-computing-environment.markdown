---

title: Network fragmentation and virtual machine migration in a scalable cloud computing environment
abstract: A scalable cloud infrastructure serves two or more customers, where each customer is associated with at least one unit of virtual resources. The virtual resources are established by apportioning physical resources in the cloud infrastructure that are partitioned into pods within one or more zones in a scalable manner. Additionally, the cloud infrastructure establishes one or more management server clusters each comprising one or more management servers. The two or more customers create a number of virtual machines within pods in a zone. Due to the scalability of the cloud infrastructure, customer virtual machines may exist in non optimal locations within the zone. A method to migrate virtual machines and defragment customer networks is devised to optimally manage network traffic and data communication in a scaled cloud infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874749&OS=08874749&RS=08874749
owner: Citrix Systems, Inc.
number: 08874749
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20110203
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Patent Application No. 61 301 168 filed on Feb. 3 2010 and incorporated by reference herein.

This disclosure generally relates to cloud computing and more particularly to enabling infrastructure information technology services including computing storage and networking services to be provisioned on demand and delivered over the Internet in a scalable manner.

Service providers and enterprises have traditionally relied on large local installations of commodity data center hardware including computing storage and networking devices to provide information technology services and applications to their users. The advent of computing services that enable applications to run in the cloud or on remote data centers that provision computing storage and networking services to applications has left many service providers and enterprises with a large inventory of unused commodity data center hardware.

A cloud infrastructure provides on demand computing resources to a customer whether an individual or an enterprise of the cloud operator through virtualization. The customer typically is physically remote from the computing resource and is agnostic to the location of the physical resources that support the computing resources. In a virtualized cloud infrastructure the computing resource generally comprises a virtual machine characterized by some amount of processor memory storage networking capability or capacity. Virtualization allows the physical resources support a large number of computing resources often well beyond the limited number of actual physical devices. Physical resources in the cloud infrastructure are shared amongst the different customers of the cloud infrastructure. Each customer gets the illusion of operating a physically distinct computing resource.

Traditional virtualization infrastructure is built on shared storage and shared Layer 2 Data Link networking. These requirements severely limit scalability of conventional cloud systems. In shared storage the physical disks may be physically separate from the computing server. These disks are typically controlled by a dedicated computer known as a storage controller or storage server. The storage controller provides access to the physical server via network protocols such as NFS and iSCSI. The virtual machines therefore access their storage over the network but in a transparent fashion such that their storage appears to be locally attached. Each storage server provides storage to multiple physical servers. The virtual machines access their virtual disks over the network via a hypervisor deployed on the physical servers hosting the virtual machines. The hypervisor is responsible for managing the virtual machines access to the storage servers.

When the storage is networked in such a fashion it may provide many advantages to the cloud operator. However a typical infrastructure cloud is characterized by massive scale with hundreds or thousands of customers operating thousands of virtual machines simultaneously with each customer getting the illusion of operating physically distinct computers. To support such scale the operator needs to deploy hundreds of physical servers and the networking elements and storage to support these physical servers.

While advantageous as outlined above commercially available storage servers are not the ideal solution. The storage servers may not scale sufficiently to support such deployments due to architectural limitations. They may be prohibitively expensive or represent more capital outlay than warranted by the initial anticipated demand for the service. They may present single points of failure or increased cost due to deployment of redundant elements. Insurmountable performance bottlenecks may be present for example due to the limits of networking speed. Expensive large centralized storage may require long term technology and vendor lock in detrimental to the competitiveness of the cloud operator.

The networking elements may provide a similar challenge in large scale cloud deployments. Typically the network between the physical servers is provided by switched Ethernet since it provides performance at optimal price points. However interconnecting all physical servers using Layer 2 switching has a number of drawbacks.

First each physical server uses broadcasts and multicasts to discover services and advertise services on the network. As the number of physical servers increases to accommodate a growing number of virtual machines the amount of broadcast traffic scales accordingly. Broadcast traffic is detrimental to the performance of the network since each server is interrupted by every broadcast even if it is not relevant to the server. Commercially available network switches can often only support a few dozen physical ports each physical server is connected to one or more ports. Switches can be linked together with high speed switches but at great expense and potentially lower reliability.

Additionally previous virtualization technologies resorted to one of two approaches physical host based network virtualization using software drivers integrated in the hypervisor or physical network VLAN based network virtualization either via port based VLANs or IEEE 802.1q tagged Ethernet frames. The popular IEEE 802.1Q standard defines a 12 bit tag which allows more than 4000 VLANs to be supported within a broadcast domain. But neither of these approaches by themselves are sufficient to build a scalable cloud infrastructure.

In a cloud infrastructure physical resources are partitioned into pods within one or more zones in a scalable manner. The physical resources comprise physical compute storage and networking resources within data centers distributed across a network. Each zone comprises a subset of the pods and is physically isolated from other zones in the plurality. Each pod comprises a discrete set of physical resources in a zone which resources are tightly connected via a communications network. The physical resources across pods are weakly connected via a communications network in contrast to the physical resources within pods. Additionally the cloud infrastructure establishes one or more management server clusters each comprising one or more management servers. In one embodiment resources are strongly connected by physical and data link level protocols and weakly connected by network or higher level protocols. In another embodiment resources are strongly connected by having relatively low latency and or high bandwidth network links between them and weakly connected by having high latency and or low bandwidth network link between them.

The cloud infrastructure serves two or more customers with authenticated accounts. Each customer is associated with units of virtual resources on the cloud infrastructure. The cloud infrastructure establishes units of virtual resources by apportioning selected sets of the physical resources within the pods. The apportioned physical resources may be shared between two or more of the units of virtual resources. Each management server is configured for allocating the units of virtual resources to an account associated with each customer.

The cloud infrastructure comprises one or more data networks built from the distributed networking resources. A data network connects the pods and is configured for routing traffic to the pods from the customers of the cloud infrastructure and vice versa. The cloud infrastructure also comprises establishing one or more management networks. A management network connects the management servers to one of the zones and connects the compute and storage resources partitioned within the pod.

The scalability of the pod architecture leads to several technical challenges one of which is the fragmentation of customer virtual machines across a number of pods within a zone. While the architecture itself is designed to network any set of virtual machines within the zone efficiency of network traffic is degraded as packets for customer virtual machines in separate pods are routed throughout the zone. To address this issue fragmented customer accounts are migrated to and from computing servers within and between pods.

In one embodiment a customer s virtual machines are first consolidated on a computing server within a pod and then to a set of computing servers within pod if allocated resources are greater than one computing server s capability. The benefits are twofold a customer has the ability to launch a virtual machine within the zone on demand even if their primary computing resource is full and the launched virtual machine is eventually consolidated with existing customer virtual machines for maximum efficiency within the customer s virtual network.

Migration also allows administrators to take down physical servers within pods or entire pods themselves thus affording the pod architecture exceptional physical resource management independent of scale. In one embodiment an administrator configures a management server to migrate virtual machines on a computing server pod or number of either to resources staying online. While taking down servers and pods may lead to fragmentation customer virtual machines still operate within the architecture. The customer networks are then defragmented or migrated back to their previous location after the computing servers or pods are replaced to restore network efficiency.

Migration also has to be unobtrusive to the customer account from both a network and computing perspective. Pod architecture solves the former fundamentally with its network architecture. The hypervisor solves the latter. Hypervisors are instructed to prepare for virtual machine migration and create a virtual NIC for the customer if needed to see their network traffic. Hypervisors migrate and receive migrating virtual machines complete with memory and processing counters to prevent computing discontinuity. Additionally customer network traffic for the migrating virtual machine is received at the destination via the customer s virtual NIC. The result is the live migration of running virtual machines between computing servers.

Accordingly live migration allows the defragmentation of customer networks to facilitate network and computing efficiency with minimal customer computing interruptions.

In one aspect there is provided a computer implemented method for migrating a virtual machine across a set of pods where each pod has a discrete set of physical resources. A set of physical computer storage and network resources are allocated to the virtual machine within a first pod. Then it is determined whether a corresponding set of physical compute storage and network resources are available in a second pod having its own set of physical resources. Where the set of corresponding physical resources are available in the second pod the virtual machine is relocated from the first pod to the second pod by allocating the set of corresponding physical resources in the second pod to the virtual machine and releasing the set of physical compute storage and network resources within the first pod.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Reference will now be made in detail to several embodiments of the present invention s examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

The present invention improves the organization and utilization of data center hardware to provide a scalable cloud infrastructure by building a system of small blocks within data centers and connecting the physical servers across data centers using high speed networks. illustrate the overall framework for the scalable cloud infrastructure.

Each pod is a self contained physical grouping of servers that acts as a management unit for the scalable cloud infrastructure. Each pod includes a discrete i.e. non overlapping set of the physical resources in the zone . The physical resources in each pod have strong connectivity with each other and weak connectivity with the physical resources outside the pod. The strong connectivity and weak connectivity refer to the latency for traffic between connected physical resources. The latency for traffic may be determined by many different factors.

In one embodiment strong connectivity and weak connectivity may be switching of traffic between any two connected physical resources on a particular layer of a standard for instance the OSI model. As an example strong connectivity may imply Layer 2 switching. Similarly weak connectivity may imply layer 3 or higher layer switching. In another embodiment strong connectivity and weak connectivity may be based on the bandwidth available for traffic between the connected physical resources. As an example strong connectivity may be implemented by provisioning a minimum of 10 GHz links between the connected physical resources. Similarly weak connectivity may be implemented by a minimum of 1 GHz links between the connected physical resources. Additionally geographic proximity may also be used to define strong connectivity and weak connectivity. It is possible that geographically distant physical resources have a higher latency for traffic than geographically closer physical resources.

The discrete set of physical resources in a pod may be based on the anticipated processor memory network and storage requirements of potential customers of resources within a zone . For example a customer s storage and network requirements can be significant. Given a specification of resources e.g. an average and peak throughput in terms of input output operations per second IOPS and assuming that that throughput is to be divided equally amongst the devices e.g. virtual machines in a pod then the IOPS capacity of the servers determines an overall total number of virtual machines for a pod . If each server within the pod can host a specified number of virtual machines then a pod could be sized accordingly in terms of the number of servers storage and networking requirements.

The pods can be coupled with any number of other pods using Layer 3 switching thereby enabling unlimited scaling of the number of customers using the scalable cloud infrastructure. The pods allow the scalable cloud infrastructure to be built from smaller units of management and without a large up front hardware investment.

Typically the management server cluster is deployed as a primary management server cluster in a first datacenter with a back up management server cluster installation at a second datacenter

In one embodiment data stored by the first management cluster is replicated and transmitted for storage by the second management cluster . In response to a failure of the first management cluster the domain name system DNS records are updated in the servers in the zones such that network traffic that would normally be directed to the first management server cluster instead is directed to the second management server cluster . Thus operation of the servers in the zones is unaffected by failure of the first management server cluster . The two management server clusters are isolated from one another by residing in different data centers to minimize the likelihood of simultaneous failure of the management server clusters .

It is within the architectural framework of that the scalable cloud infrastructure is further described herein.

The administrator or operator of the cloud infrastructure deploys the various resources as discussed above. In one embodiment the operator of the cloud infrastructure is distinct from one or more providers of the resources e.g. a provider may own any number of virtual machines that will be used by the administrator in the cloud infrastructure. In one embodiment the provider owns a large number of servers .

One or more customers are users of portions of the resources of the cloud infrastructure. The term customer may refer to either the device or the user entity or person . Customers access the resources associated with their respective customer accounts and are connected to the resources via the network . Details of customer account resource allocation and access to those resources are discussed further in conjunction with .

The management server cluster is a cluster of management servers and their associated database . As indicated in conjunction with the management server cluster serves multiple zones and pods within data centers . The management server cluster also maintains customer account information. For example the management server cluster may establish virtual machines units of virtual resources by apportioning the physical resources within the pods to each of the units. The physical resources may be shared between two or more of the virtual machines. Although one management server cluster is depicted multiple management server clusters may be distributed throughout the cloud infrastructure each serving a plurality of data centers and zones . The details of the management server cluster are described further in conjunction with .

Each management server allocates and manages use of the physical resources within one or more zones . For example management server manages the resources in zone management server manages the resources in zone and management server manages the resources in zone . A management network may connect each of the management servers to a zone and may also connect the physical resources within the pod . A management server can allocate to and manage units of virtual resources associating customer accounts with the physical resources in a zone associated with that management server . The details of the management server are described further in conjunction with . The database can be any database commonly used for storage. According to one embodiment the database is a MySQL database.

The data centers zones and pods were described briefly in conjunction with . Switching within the zones typically is Layer 3 switching while switching within the pods typically is Layer 2 switching providing unlimited scaling of the cloud infrastructure. Zones are described in greater detail in conjunction with pods are described in greater detail in conjunction with and the servers in each pod are described further in conjunction with

The zone layer switch manages the network traffic to and from the pods within the zone and comprises one or more Layer 3 L3 i.e. network layer switches. For a zone comprising the servers in a small data center a pair of L3 switches may suffice. For large data centers high end core switches may implement core routing capabilities and include line cards that support firewall capabilities. A router redundancy protocol like VRRP also may be deployed. Traffic within the zone and or pods also is switched at other levels of either the OSI model or other networking models as described further below.

One embodiment of the zone layer switch supports two internal networks within the zone a data network and a management network . The data network is used to carry traffic to and from the zone from customers and other entities on the network . For example operation of virtual machines implemented on the servers within the pods of the zone e.g. if a virtual machine within the zone issues an HTTP request over the network both the HTTP request and any associated HTTP response will be routed via the data network .

The management network is used to carry traffic to and from the zone from the management server cluster and individual management servers within the management server cluster as well as traffic generated internally within the zone . Each pod in the zone is communicatively coupled to both the data network and the management network .

All traffic in and out of the zone passes through a firewall . The firewall may comprise one or more network firewalls specific to each internal network . The firewall provides connection to the public network space i.e. network and is configured in routing mode.

In one embodiment the firewall operates in a transparent mode for the data network such that the data network comprises the same IP address space as the public Internet. For example if the data network utilizes public IP addresses the zone is assigned a unique set of IP addresses that do not overlap with the IP addresses assigned to other zones .

In one embodiment the firewall operates in a network address translation NAT mode for the management network . For example the zone can be assigned an IP address in the 192.168.0.0 16 Class B private address space and each pod within the zone can be assigned an IP address in the 192.168. .0 24 Class C private address space the firewall remaps between the two address spaces as data is sent to or from the pods within the zone . Hence it is possible for the pods of different zones to have overlapping or identical private IP addresses. In some embodiments the firewall is outside of the zone such that it filters traffic to both the zone and the management server cluster . In some embodiments the firewall enables site to site VPN such that servers in different zones can reach each other within a virtual private network.

The routing servers are configured primarily to provide networking for computer data by the inclusion of suitable networking hardware network interfaces networking ports and the like . The routing servers can be implemented using any manner of suitable networking hardware and software and in some instances are combined with computing servers .

The storage servers are implemented as any device or combination of devices capable of persistently storing data in non transitory computer readable storage media such as a hard disk drive RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums. Other types of computer readable storage mediums can be used and it is expected that as new storage mediums are developed in the future they can be configured in accordance with the teachings here. In addition the storage servers support local or distributed databases for storing customer information in one embodiment the database are MySQL databases.

Typically single uniform storage servers do not scale to more than a few dozen servers. A system architecture using pods however allows multiple smaller storage servers to be associated with each pod . Pod level shared storage delivers the benefit of shared storage such as the ability to restart virtual machines on a server different than where the virtual machine last ran which provides the ability to start up shut down and reallocate available servers.

The computing servers host the virtual machines within the pod as will be discussed further in conjunction with . The computing servers may comprise computing routing and or storage servers having different processing memory storage and networking capabilities according to various embodiments and may perform all of the functions of routing servers in embodiments that exclude separate routing servers . Additionally the computing servers can utilize different data storage systems such as direct attached storage DAS network attached storage NAS or a storage area network SAN .

The pod layer switch switches network traffic into and out of the pod . The pod layer switch may comprise one or more pod layer switches. The pod layer switch typically is a Layer 2 switch but switching is also possible at other levels of either the OSI model or other networking models. In alternate embodiments the pod may implement internal networks in addition to or distinct from the data network and the management network .

In one embodiment a public switch may be used for public traffic e.g. traffic on the data network and a private switch for management traffic e.g. traffic on the management network . Storage traffic e.g. traffic between the computing servers and the storage servers via the private switch may be isolated from other traffic to avoid packet loss and delays that are common with regular TCP IP traffic and to protect the servers from potentially malicious Internet traffic. In addition the storage traffic may be directed over a higher speed switch to meet the higher performance demands of the storage system.

In one embodiment of the pod the pod layer switch es are duplicated for redundancy with each computing server connected to multiple switches. Further it should be noted that multiple layers of switches can be coupled to effectively form a pod layer switch with an increased number of ports.

In another embodiment of the pod design Virtual LANs VLANs are used to segment traffic while using a single pod layer switch . The pod layer switch may support quality of service guarantees for virtual machines within the pod the storage VLAN is then given the appropriate share of the available bandwidth on the switch to meet the IOPS requirements of such virtual machines.

The VLANs for the management public and storage traffic may be created before the pod is deployed into production by programming the pod layer switch using the usual management interfaces. The storage server is also configured to use the storage and management VLANs using the usual management interfaces of the storage server . In other embodiments more than one traffic type can be directed over a single switch while other traffic types can have their own separate switches. For example guest traffic which refers of traffic between the virtual machines of each customer may be segmented using VLANs and directed on the same switch as management traffic.

In one embodiment the multitenant hypervisor is implemented on the computing server as a set of computer executable instructions encoded onto a non transitory computer readable storage medium included in the computing server and executed by a processor included in the computing server . The multitenant hypervisor therefore can comprise for example a software layer that manages the physical computing elements e.g. processors memory network cards and interfaces data storage disks of the computing server . The virtual machines access and use these physical computing elements as dictated by the multitenant hypervisor . The multitenant hypervisor can alter the allocation and accessibility of computing elements within the computing server over time in response to changes in the number and configurations of hosted virtual machines . The changes in the number and configurations of hosted virtual machines may occur for example because the customers associated with the hosted virtual machines made such a request or changes have occurred at other virtual machines associated with the customer .

A number of virtual machines may run on the computing server . The virtual machine comprises an allocation of the computer hardware and computer software elements of the computing server . The virtual machine simulates a physical computing device and can be configured to perform any computing task via inclusion of appropriate computer hardware and or computer software elements therein. For example a virtual machine can simulate a physical computing device having a 1 GHz processor 1 GB of memory and a 16 GB hard drive.

A virtual machine is associated exclusively with a single customer . However a computing server may host a set of virtual machines each associated with different customers . For example in one customer may be associated with virtual machine where as another customer may be associated with virtual machine and

A single computing server simultaneously can host virtual machines associated with different customers but the multitenant hypervisor along with the associated management server manages the hosted virtual machines such that each virtual machine appears to the corresponding customer as a physically distinct and self contained computing device.

In one embodiment the virtual machine comprises a processing resource a memory resource a storage resource a networking resource and a user interaction resource . The resources of the virtual machine comprise allocations of the computer hardware and or computer software elements of the computing server according to the units of virtual resources designated for a given customer account. The processing resource comprises an allocation portion of one or more computer processors. The memory resource and the storage resource can comprise an allocation of any physical device or combination of physical devices capable of persistently storing computer data such as a hard disk drive random access memory RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums. Other types of non transitory computer readable storage mediums can be used for the memory resource and or the storage resource and it is expected that as new storage mediums are developed in the future they can be configured in accordance with the teachings here. In one embodiment the memory resource provides operational memory and comprises a specified amount of RAM. The storage resource provides long term data storage and again can comprise any suitable type of non transitory computer readable storage medium such as one or more hard disk drives.

The networking resource comprises an allocation of computer networking hardware and software elements to enable the virtual machine to communicate with other networked entities over the management network . One or more IP addresses can be associated with the virtual machine and supported by the networking resource . Accordingly the networking resource can include any type of communication interface suitable for transmitting and receiving data over the network . For example the networking resource can comprise an Internet interface a serial interface a parallel interface a USB Universal Serial Bus interface an Ethernet interface a T1 interface a Bluetooth interface IEEE 802.11 interface IEEE 802.16 interface or any other type of wired or wireless communication interface.

The user interaction resource comprises hardware and software elements to enable the customer or administrator to interact with the virtual machine . For example the user interaction resource can provide display elements such as a graphical user interface GUI whereby either the customer or administrator can interact with and manage operation of the virtual machine . The user interaction resource can also support a keyboard and mouse or the like to further enable the customer or administrator to manage operation of the virtual machine .

In some embodiments the resources of the virtual machine are supported within a single computing device such as a server. In other embodiments portions of the virtual machine can be distributed among any number of physically separate computing devices that are communicatively coupled via the network . For example the storage resource can comprise multiple hard drives residing on multiple servers. Because the resources are communicatively coupled to one another the virtual machine appears to the customer to be a single computing device that includes the cumulative capabilities of the resources regardless of the actual physical location or distribution of any computer hardware or software elements associated with of the resources .

In some embodiments there is a specially designated virtual machine called the management domain that provides a standard set of commands to control the multitenant hypervisor for example to start and stop virtual machines and to control the networking stack of the multitenant hypervisor . In other embodiments the multitenant hypervisor is hosted by a host operating system and the virtual machines operate as processes of the operating system with the multitenant hypervisor providing isolation. The multitenant hypervisor ensures that the virtual machines share the physical resources of the compute host such as the processor memory network interfaces and storage. In some cases the multitenant hypervisor defers the operation and management of the network stack and storage interfaces to the management domain or host operating system.

The physical network interfaces are shared among the virtual machines by the multitenant hypervisor . In one embodiment the virtual machines get the illusion of possessing a standard physical network interface such as those provided by commercially available network interface cards. The multitenant hypervisor ensures that these virtual interfaces are connected to the underlying physical network interfaces of the compute host.

The cloud infrastructure comprises a management server interacting with agents that in turn interact with and control the multitenant hypervisor using its standard set of commands. In one embodiment there may be one agent running in each operating system or management domain on a server . In other embodiments one agent may interact with a group of servers whose multitenant hypervisors have been clustered using cluster management software. The agents are controlled by the management server .

The management server also interacts with the storage servers in order to create and destroy the virtual disks for the virtual machines. In one embodiment a special version of the agent known as the storage agent runs on the processor subsystem of the storage server to perform these activities. In another embodiment the management server uses the standard set of commands provided by the management server or its Application Programming Interface API to create and destroy virtual disks.

The storage server presents virtual disks to the computing server . In one embodiment the virtual disks are visible as networked file systems to the multitenant hypervisor . In another embodiment the virtual disks are presented as block devices to the multitenant hypervisor . The multitenant hypervisor ensures that these virtual disks are presented to the virtual machine while giving the illusion of locally attached storage to the virtual machines.

The multitenant hypervisor provides a standard set of commands that the agent uses. Some examples of the command set are start a virtual machine stop a virtual machine reboot a virtual machine add or remove a virtual disk for a virtual machine add or remove a virtual network interface for a virtual machine mount dismount a virtual disk from the storage server add or remove VLANs from the physical network interfaces of the server .

The agents collect information from the computing servers and storage servers and report to the management server . The management server maintains the reported information in database tables. The database includes for example the state of the multitenant hypervisor the state of the virtual machines the configuration of the networking stack such as configured VLANS explained subsequently in the description of IP addresses speeds and aggregations of the physical network interfaces storage resources visible from the compute server the capabilities of the multitenant hypervisor the capabilities of the storage server the capacity used and allocated size of the storage server statistics such as network traffic consumed by the virtual machine processor and memory usage of virtual machine.

The management server commands the agent to perform certain actions in response to actions by the cloud customer or cloud operator at the user interface or API. For example when a customer starts a virtual machine the management server may look up its table of servers and identify a server that has enough spare capacity to satisfy the requested processing memory and network resources for the virtual machine. The management server may also look up its table of virtual machines to verify if the virtual machine is already running or if its virtual disks already exist on a storage server . If the virtual machine is not already running or its virtual disks do not exist the management server may command the storage server or storage agent to create the disks.

The management agent then sends a start virtual machine instruction to the agent for the compute host chosen in step 1. In the start instruction are included information such as the portion of the physical processors to allocate to the virtual machine the virtual network interfaces to create for the virtual machine and their mapping to the physical interfaces and identification of the virtual disks to present to the virtual machine.

The agent may then instructs the multitenant hypervisor on the computing server or computing server in the example of to mount the virtual disks from the storage server create the virtual network interfaces and start the virtual machine with the desired processors memory network interfaces and disk. The agent verifies that the virtual machine has started using the hypervisor command set and reports the success to the management server . The management server updates its table of virtual machines with information about the virtual machine including the server it is running on.

The management network handles traffic associated with the multitenant hypervisor executed by the computing servers within the pods of the zone . Hence traffic on the management network may additionally comprise messages between a multitenant hypervisor and a virtual machine e.g. messages related to the allocation of the physical computing elements of the particular computing server to a particular virtual machine .

In an embodiment of the invention network and storage isolation may comprise isolation of data alone and not quality of service. In other embodiments the quality of service capabilities built into the multitenant hypervisor s as well as network and storage hardware may be used to support enhanced isolation.

Network bandwidth throttling is used to limit the rate of traffic from each virtual machine. The operator of the cloud infrastructure may configure the management server with the desired maximum network bandwidth for each virtual machine. The configuration can be done on a per service offering basis a per customer account basis or across the cloud. A management server includes this maximum in the start instructions sent down to the multitenant hypervisor when starting a virtual machine. The multitenant hypervisor uses a standard set of commands to limit the guest traffic from the new virtual machine.

Storage bandwidth throttling is used to limit the rate of storage traffic from each virtual machine while reading or writing to a virtual disk. The operator of the cloud infrastructure may configure the management server with the desired maximum IOPs bandwidth for each virtual machine. As before the configuration can be done on a per service offering basis a per consumer basis or across the cloud. The management server includes this maximum in the start instructions send down to the multitenant hypervisor when starting a virtual machine. The multitenant hypervisor uses a standard set of commands to limit the storage traffic from the new virtual machine to a maximum number of IOPS as defined by the operator of the cloud infrastructure.

The depicted management server cluster comprises three management servers two load balancers primary storage and backup storage . Other embodiments of a management server cluster may comprise different numbers of management servers and load balancers .

The management servers are communicatively coupled to the load balancers and the load balancers are communicatively coupled to the networks . Thus the management servers can transmit and receive data and commands via the networks through the load balancers . The load balancers distribute traffic from the networks and associated workload among the management servers to optimize utilization of the management servers . In some embodiments the load balancers comprise dedicated hardware devices e.g. multilayer hardware switching devices or severs configured to provide load balancing functionality . In other embodiments the load balancers comprise load balancing software installed on the management servers .

The primary storage and the backup storage can be implemented as any device or combination of devices capable of persistently storing data in non transitory computer readable storage media such as a hard disk drive RAM a writable compact disk CD or DVD a solid state memory device or other optical magnetic storage mediums. Other types of computer readable storage mediums can be used and it is expected that as new storage mediums are developed in the future they can be configured in accordance with the teachings here. In one embodiment the primary storage and the backup storage further comprise MySQL databases. The primary storage and backup storage can also comprise one or more dedicated storage servers. The primary storage for the management server cluster is communicatively coupled to the management servers and provides data storage as required by the management servers . The backup storage is communicatively coupled to the primary storage and comprises a replicated version of the data stored by the primary storage . The devices in the management server cluster may be Layer 2 switched.

In one embodiment the management server comprises a management user interface UI a management application programming interface API a service manager and a workload manager .

In one embodiment the management UI provides the primary user interface for customers and administrators . The management UI can provide a graphical user interface GUI that is accessible over the networks via a conventional web browser using any networked computing device. A customer can for example input specifications for configuring a new virtual machine using a web GUI provided by the management UI . More particularly a customer configures a virtual machine by specifying the amount of processor storage memory and networking resources in appropriate units e.g. processor speed for processors amount in mega or giga bytes for storage and memory and throughput for networking .

A customer can also interact with a configured virtual machine using a web GUI provided by the management UI by for example inputting data for processing by the virtual machine viewing outputs computed by the virtual machine and inputting commands related to a complete or partial shutdown of the virtual machine . The management UI can provide a different web GUI for a customer than for an administrator .

One embodiment of the management API allows an administrator or a customer with appropriate access credentials to further oversee virtual machine . For example the management API can enable customization of the primary user interface provided by the management UI . The management API can also allow customization of billing policies and procedures as well as access policies e.g. granting different levels of access to a virtual machine based on credentials associated with a customer .

The service manager communicates with computing servers to oversee the creation operation and shutdown of virtual machines . For example the service manager can receive specifications for a virtual machine from the management UI select a computing server suitable for hosting the virtual machine and transmit commands to the selected computing server that case the computing server to implement the virtual machine . Once the virtual machine is configured and implemented on the computing server the service manager can monitor its operation and implement corresponding billing and access policies e.g. via routing appliance discussed further in . For example the service manager can bill a customer 20 per hour of operation for a virtual machine with processing equivalent to a 1 GHz processor memory equivalent to 1 GB of RAM and storage equivalent to a 250 GB hard drive as well as 0.10 per GB of network traffic associated with the networking resource of the virtual machine .

The workload manager interacts with the multitenant hypervisors installed on the computing servers . The workload manager monitors the status e.g. availability and workload of the different physical computing elements included in the computing servers . The workload manager can also oversee the transfer of a virtual machine from a first computing server to a second computing server upon failure of the first computing server or an imbalance of workload between computing servers .

In a cloud infrastructure serving multiple customers the administrator may ensure that accesses are secure and protected against attacks from malicious customers by allocating resources on demand for instance. Routing appliances run as virtual machines in the system to provide functionalities such as routing DNS load balancing console access etc. When they are no longer needed they are garbage collected to release any precious system resources that they are holding. The routing appliances may be hosted by the routing server .

The eth0 interface of a routing appliance serves as the gateway for the guest virtual network and has the IP address of 10.1.1.1 which is configurable. The eth1 interface of the routing appliance resides on the management network and is used to configure the routing appliance. The eth2 interface is assigned a public IP address on the data network .

As indicated in VMs associated with customers and are segmented on the same physical network. In order for the VMs associated with a customer to access the internet or to accept connections from the internet such as ssh a routing appliance may be started up for the VM. In the example of customer accesses virtual machines VM and through routing appliance hosted on computing server while customer accesses virtual machines VM and through routing appliance . While physical resources such as network and physical server are shared the networks of customers are segmented and cannot see each other.

When a customer starts a VM in a certain zone a management server determines if a routing appliance for that customer is already running within that zone . If it is not the routing appliance is started prior to the actual start of the VM. As the VM starts the routing appliance may then provide network functionalities such as DHCP DNS routing load balancing and firewall protection to the VM. After the last VM associated with customer is stopped the management server garbage may garbage collect the routing appliances after a defined interval. One routing appliance may be needed per customer account per zone .

In one embodiment each customer is assigned a guest virtual network in each zone . A guest virtual network may be configured to any private address space for example the Class A network in 10.0.0.0 8 private address space. The guest virtual network is an overlay network on top of the management network and is managed by the multitenant hypervisor .

A guest virtual network may be valid within one zone . Therefore virtual machines in different zones cannot communicate with each other using their IP addresses in the guest virtual network. Virtual machines in different zones communicate with each other by routing through a public IP address.

A routing appliance is associated with each guest virtual network. The routing appliance automatically assigns an IP address for each virtual machine associated with the customer for example in the 10.0.0.0 8 network. The customer may manually reconfigure virtual machines to assume different IP addresses as long as the customer does not introduce IP address conflicts.

Source NAT is automatically configured in the routing appliance to forward out bound traffic for all virtual machines associated with the customer . The customer may configure port forwarding rules to direct inbound public traffic to the virtual machines associated with the customer . A management server programs the routing appliance and the firewall according to the port forwarding rules specified by the customer . A customer may also configure a software load balancer running on the routing appliance to dispatch inbound traffic to multiple virtual machines associated with the customer according to customer specified load balancing rules.

The cloud infrastructure can support multiple guest virtual networks per customer . The concept of routing appliances as virtual machines may be generalized to include virtual machines with multiple virtual NIC interfaces and connected to multiple guest virtual networks. The virtual NIC interfaces are discussed further in conjunction with .

As shown in although some of the physical resources are shared by the customers traffic between the two customers and their virtual machines is segmented using two separate routing appliances as are the individual virtual machines assigned to each customer .

The customer can provide a functional specification for the virtual machine i.e. that the virtual machine be capable of performing one or more specified computing tasks while meeting specified performance criteria or the customer can provide a resource specification for the virtual machine i.e. that the virtual machine include specified computing resources such as hardware and or software elements . The virtual machine can also be configured according to any number of default specifications. Once the virtual machine is configured the customer can access the virtual machine over the network and thereby interact with the virtual machine to accomplish tasks as desired. For example the customer can utilize remote access software such as secure shell and or virtual displays to control the virtual machine .

The agent running on the computing server on behalf of the management server ordering the instantiation sets up a number of virtual networking components that co operate to achieve communication between the virtualized operating system and the hardware. The virtual NIC is an emulated network adapter that shuttles traffic back and forth between dom0 and VM . The bridge is a virtual switch that shuttles traffic back and forth between two segments in this case the network adapter of the customer virtual machine and VLAN network adapter. The bridge may also comprise a VNIC in some embodiments. The VNIC is a pseudo network adapter that tags and untags frames in the communication using a standard for example the 802.1q trunking standard.

Similarly traffic from customer goes through routing device and when it meets the physical NIC of DOM 0 it goes instead through a separate bridge 2 for customer traffic before reaching virtual NIC1 or virtual NIC3 of virtual machines and respectively. Note that even though customer has two virtual machines within the computing server it has only one bridge 2 as only one is needed for each customer . Doing so allows traffic for the same customer to be seen but not traffic to from other customers e.g. on the same computing server

The cloud infrastructure combines physical host based network virtualization and physical network VLAN based network virtualization. Each customer s virtual machine gets the illusion of participating in a physically distinct local area network with the customer s other virtual machines. It is possible for example that both customer A s private network and customer B s private network is in the IP address space 10.1.1.0 24 but they never see each other s packets. It is possible that the networks addresses are not shared as well.

A prospective customer may contact the administrator requesting resources from the cloud infrastructure. The administrator registers a customer account in the name of customer . A management server reserves and assigns a unique VLAN ID Vx for example within the 802.1q VLAN range 12 bit number totaling possible unique IDs to the customer. If no unused VLAN IDs are found the customer is informed that it is not possible to start a virtual machine.

In some embodiments this ID is stored in a database that the management server uses. The customer now starts a virtual machine within the cloud infrastructure and the management server orders the instantiation of a virtual machine within one of the computing servers .

Vy is then transmitted to the agent running on the computing server in question as part of the virtual machine instantiation procedure. The agent uses Vy to set up a tagged VLAN interface that will shuffle the correct traffic back and forth between the network and the virtual machine. In some embodiments this setup communication happens through the management network . The management network shares the same physical network but is effectively segmented from other customers because it has a different or no tag. 

Traffic coming out of the virtual machines set up in this fashion will be tagged with the VLAN number as the packet travels through the multitenant hypervisor traffic coming into that interface tagged with Vy will be unwrapped from the tagged frame and delivered to the appropriate virtual machine based on the MAC address.

When a virtual machine associated with a customer actually starts on a particularly server the virtual NIC required to provide multi tenancy is created on the server and associated with the virtual machine to provide segmented network access. When the user VM is stopped the virtual NIC is destroyed i.e. garbage collected and its resources returned to the server .

In the embodiment of for VM and VM there s only one virtual NIC and bridge created because they belong to the same customer and the virtual machines are allowed to see each other s traffic. This makes the virtual NIC garbage collection more difficult as the agent cannot terminate the bridge until all virtual machines for that customer are stopped on that server . Each bridge and virtual NIC created requires resources on the server in terms of memory. The agent may create and garbage collect bridges and virtual NICs as needed.

In the embodiment of the zone level switch comprises two layer 3 switches L3 switches . Additionally redundant pairs of layer 2 switches L2 switches are deployed in the pod layer switches . In large deployments of pods that include multiple racks a second level of pod layer switch may be deployed.

In order to minimize any performance penalty resulting from virtual machines associated with a customer account being scattered across a number of pods and computing servers referred to herein as fragmentation customer virtual machines are preferably consolidated within one or more computing servers of a pod . Consolidation also referred to herein as defragmentation consolidates a set of customer virtual machines of a given customer account with their associated system appliances to minimize cross computing server or pod traffic. Live migration facilitates this process. As computing resources are made available on a computing server hosting one or more customer virtual machines management server may migrate one or more fragmented machines belonging to the customer to computing server thereby defragmenting the customer account.

In embodiments within the scalable cloud architecture discussed herein virtual machines are typically consolidated on computing servers operating the routing appliance belonging to the customer . While consolidating customer virtual machines around routing appliances within a single computing server or pod is preferred for customer experience and performance reasons virtual machines are free to migrate anywhere resources are available. For instance virtual machines may undergo live migration before the shutdown of one or more computing servers for maintenance thus preventing any disruption of traffic for customer .

State LUT is a database structure containing current states and possible next states for managed virtual machines . Management servers access state LUT to determine whether a desired state change is valid. Transaction history is a database structure containing transactional history for migration events. Management servers receive state and virtual machines information from agents and update associated data in transaction history . Customer and administrator data and migration event requests are received at management servers and stored in transactional history . Event requests may specify the migration of virtual machines across computing servers or pods . In some embodiments virtual machines may be migrated across zones available to customer . Additionally management servers may implement logic to defragment the virtual machine environment and issue migration events for a virtual machine or number of.

In some embodiments where management servers share a common database agent communicates only with management server as the current database entries from management server are still applicable. In some embodiments management server notifies agent to prepare for a migrating virtual machine regardless of which management server agent reports to. In embodiments where management servers operate separate databases management servers may forward virtual machine information to or access virtual machine information on other management servers or their databases. Thus the agent receiving the migrated virtual machine updates reports to a management server with access to corresponding virtual machine information stored in its own database or shared database .

Agent also interacts with and controls hypervisor using a standard set of commands. Some examples of available commands are Start a virtual machine stop a virtual machine reboot a virtual machine add or remove a virtual disk for a virtual machine add or remove virtual network interfaces for a virtual machine mount or dismount a virtual disk from the storage resource and add or remove VLAN s from the physical network interfaces of the compute host.

In one embodiment at least one agent runs on each computing server and controls at least one hypervisor . Alternatively agent may operate a number of clustered hypervisors on one or more computing servers in a pod or zone . illustrates an embodiment using one agent per computing server . While only one hypervisor is shown a number of may reside on computing server and communicate with agent . Referring to agent collects virtual machine information from hypervisor and reports the information to management server cluster . Agent also receives commands from management servers and communicates with hypervisor to convert commands into virtual machine actions.

Virtual NICs are emulated network adapters that shuttle network traffic back and forth between hypervisor and virtual machines . In one embodiment each customer is assigned a virtual NIC at hypervisors managing one or more of their virtual machines and a routing appliance not shown within zone . Routing appliance communicates network traffic associated with customer to the various hypervisors operating assigned virtual NICs for the customer .

To begin the migration of virtual machine management server determines the pre migration location of virtual machine and the post migration location illustrated as virtual machine . In one embodiment virtual machine also belongs to consumer and management server migrates virtual machine during a defragmentation process. Database contains pre migration locations for virtual machines as their current physical location such as computing server pod agent or hypervisor addresses e.g. an IP depending on the embodiment. Post migration locations are determined by the management server according to the reason for migration. For example during a computing server shutdown virtual machines may be migrated to any server or pod having available resources as indicated in database . In a defragmentation process as discussed in sever embodiments herein management server may determine a post migration location from database entries for allocated system appliances or other customer virtual machines . In one embodiment as customer already has a virtual NIC on destination hypervisor a new one need not be created. Alternatively where a virtual does not exists management server commands agent to allocate and create the virtual NIC network resource assigned to customer on hypervisor prior to migration.

Management server determines whether the set of processing networking and storage resources allocated to virtual machine on computing server is available on computing server prior to the migration of virtual machine . as discussed herein embodies such a process carried out by management server

Referring again to management server may determine the set of resources allocated to virtual machine from database agent or combination of via command path . Management server determines whether the set of resources allocated to virtual machine is available on computing server in a similar fashion. Responsive to determining whether computing server is capable of receiving migrating virtual machine management server instructs agent to create virtual NIC on hypervisor . However as discussed previously virtual NIC already exists for customer and the network allocation process is skipped. Agent notifies management server it is ready for migration via command path . In some embodiments agent may also return the hypervisor or computing server IP address for the post migration location . Alternatively management server maintains the IP address for computing server hypervisor or both in database .

In one embodiment management server issues the migration command to agent with the destination hypervisor or computing server IP address. Agent subsequently instructs hypervisor to migrate virtual machine to hypervisor . Hypervisor receives migration data from hypervisor over migration path and constructs the migrating virtual machine in post migration location as virtual machine . Storage resources in the form of disk snapshots disk images OS snapshots and OS images may facilitate the construction of migrated virtual machines. In other embodiments hypervisor transfers virtual machines storage volumes directly without an intermediate step. In live migrations hypervisors are capable of migrating virtual machine complete with memory and instruction counters to prevent process interruption. Thus once all memory and instruction counters along with allocated processing networking and storage resources are migrated to virtual machine it begins functioning as virtual machine did prior to migration. Agent notifies management server when the process is complete and stops virtual machine to prevent multiple instances of the migrated virtual machine . In some embodiments the notification is a virtual machine state and management server determines from the state and information in database whether the migration was successful. Management server may also request an update from agent to determine the state of virtual machine

At this point the one or more agent have indicated whether the migration of virtual machine to computing server has either succeeded or failed at this point. In one embodiment successful migration results in virtual machine entering a stopped state and virtual machine running on computing server . If migration is unsuccessful management server conducts further state inquiry at agents . In some embodiments once management server determines migration was successful unused customer resources associated with virtual machine are released on computing server . Additionally if management server determines that customer does not operate any additional virtual machines on hypervisor virtual NIC and associated resources are released on computing server

In one embodiment a management server determines the defragmentation of the virtual network for customer according to the defragmentation process illustrated in . Management server determines the locations of customer virtual machines and supporting system machines. In some embodiments management server locates all phantom and routing domains for each customer and determines a measure of fragmentation for each network. Management server may then determine the available resources on the computing server hosting the customer routing domain and within the pod . If resources are available management server determines whether the migration of one or more virtual machines is advantageous to the customer network. This process may comprise a number of algorithms that consider network activity between virtual machines within phantom domains and between phantom domains and the customer routing domain . In some instances for example two virtual machines on a phantom domain may utilize significant network resources locally thus it would more advantageous to migrate another virtual machine consuming a greater amount of routing domain traffic. If management server determines that no optimization can be made the defragmentation process ends . Otherwise management server coordinates the migration of one or more virtual machines to defragment the customer network.

Referring again to the embodiment of the management server determines the migration of virtual machine from location to as advantageous to customer . Management server coordinates the migration of virtual machine to available resources along migration path as discussed previously. Once virtual machine has migrated to post migration location and all customer virtual machines are running on computing server defragmentation is complete for customer . In some embodiments management server terminates phantom domain to release resources on computing server as the domain no longer communicates network traffic for customer virtual machines .

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising computer program code stored on a non transitory tangible computer readable storage medium which is configured to be executed by a computer system for performing any or all of the steps operations or processes described. A computer system is understood to include one or more computers each computer including one or more hardware based processors primary memory devices e.g. RAM ROM secondary storage devices e.g. hard discs or solid state memory and networking devices e.g. networking interface cards . The computers in a computer system can be interconnected by wired medium e.g. Ethernet fiber optic or wireless medium e.g. radio based networks such as 802.11 802.16 or combination thereof.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer.

Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

