---

title: Method and apparatus for an itinerary planner
abstract: A method and apparatus for providing an itinerary planner is described. The itinerary planner generates itineraries for visiting locations which are personalized to the user's preferences. Unknown conditions are handled by contingency plans that the itinerary planner generates in an anytime manner. The first itineraries are derived in a short time, and as more computation time is allowed, additional itineraries that better suit the preferences of the user are obtained.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08050949&OS=08050949&RS=08050949
owner: Sony Electronics Inc.
number: 08050949
owner_city: Park Ridge
owner_country: US
publication_date: 20110111
---
The present application claims priority to U.S. Provisional Application Ser. No. 60 451 116 filed Feb. 26 2003 which is incorporated herein in its entirety and is a divisional application of U.S. patent application Ser. No. 10 740 143 filed Dec. 17 2003 now U.S. Pat. No. 7 895 065.

Two of the critical obstacles to wider real world use of plans are the inability of planners to deal with incomplete information and the slowness of planners in general and in particular those that do deal with incomplete knowledge.

While most planners assume all information needed to generate the plan is available beforehand this is not typically the case in realistic planning situations. The system does not know beforehand which gate a flight is going to depart from for instance. Conditional planning constitutes a solution in those cases in which the facts needed to make a decision will become known during execution but is not known during planning. A conditional planner generates a conditional plan that for each alternative for the unknown facts provides a sequence of actions. The appropriate actions are then chosen during execution based on information gathered. The conditional plan generated is a tree or a graph structure. The problems with this approach are that 1 it is computationally expensive to build these conditional plans 2 the plans can be large and therefore expensive to store and transfer 3 it is expensive to execute these large plans 4 this is not a good approach for all cases of unknown information.

One prior art planner uses a non traditional planning algorithm in which the state of the world is completely known before the next step is computed. The prior art planners are inefficient and cannot be practically used to solve problems of the size that would be useful in the real world.

A method and apparatus for an itinerary planner is described. The itinerary planner generates itineraries for visiting locations which are personalized to the user s preferences. Unknown conditions are handled by contingency plans that the itinerary planner generates in an anytime manner. The first itineraries are derived in a short time and as more computation time is allowed additional itineraries that better suit the preferences of the user are obtained.

A method and apparatus for a contingent itinerary planner is described. The planner is a fast hierarchical task network HTN planner that generates conditional scheduled plans in an anytime way. An anytime algorithm is one that generates better solutions as it is allowed more computational time. The planner therefore provides a fast solution and as more time is provided it generates better solutions. HTN planning facilitates planning by decomposing the problem into sub problems for which known solutions can be used. This hierarchical planning approach allows plan fragments to be reused which improves efficiency.

The contingent itinerary planning solves the problems of uncertainty the lack of knowledge at the time the plan is created and personalization ensuring that the plan best meets the needs of a user in a timely manner.

The lack of knowledge and uncertainty is solved by merging contingency planning with hierarchical task network HTN planning and by explicitly declaring the contingencies and their possible outcomes. HTN planners have very high performance compared to other kinds of planners but have not been used to date for contingency planning. Explicitly declaring which contingencies to handle under what circumstances to do so and what the outcomes are to be simplifies the computations that need to be accomplished which increases the efficiency of the planner. This makes it possible for the planner to use a simpler language that has better computational properties than a more complete solution.

The planner generates a conditional plan in which each outcome of each declared contingency is considered. Each outcome generates a new branch in the plan so that there is a plan for any combination of contingencies possible according to the declarations.

Lack of knowledge and uncertainty is handled by representing these as contingencies at the point when that information is needed in the plan. The result is a conditional plan in which there are decision points corresponding to the use of the unknown or uncertain information. At those points the user of the plan determines what the state of the world really is and chooses the branch of the plan to execute. In this way the plan is still useful even if it depends on information that is unknown or uncertain at the time that the plan is constructed.

The problem of Personalization is solved by choosing the activities to be included in the plan based on the preferences of the user for general classes of activities. The value to the user of the plans generated is computed and the best plan generated so far is presented to the user. If requested by the user the planner can compute a better plan. This solution gives the user good plans and allows the user to decide how much time to spend on optimizing the plans.

HTN hierarchical task network is basically a plan created from smaller sub plans. The HTN uses primitive tasks actions an agent can do directly and decomposes non primitive tasks into a set of primitive tasks with temporal and logical constraints. HTN is useful for creating large plans from smaller components.

The user system is coupled via network to planner . The connection between user system and the network may be via any method including direct connection DSL wireless Bluetooth the telephone network or any other method of connectivity.

Planner may reside on a computer system such as a server. In one embodiment the planner may be on the same computer system as the user system . In another embodiment the planner may be on a remote system accessible through a public network such as the Internet. In another embodiment the planner may be accessible through a Local Area Network a Wide Area Network a Virtual Private Network or any other system.

The planner is used to generate a conditional HTN based plan in accordance with the present invention. This plan is then sent to the user system . The planner in one embodiment accesses external data providers to obtain data. For example external data providers may be used to provide public information.

One exemplary use of the planner is as an itinerary planner. In that instance the planner calculates an itinerary for a user which meets the user s preferences. In one embodiment the planner may use external data providers to obtain information about locations and activities available to the user.

In one embodiment primarily static factors such as locations and activities are stored in database . These types of factors in one embodiment are used by planner . Therefore they are stored in a database . In one embodiment the database is local to planner alternatively the database may be a remote database or a distributed database.

The user preferences are obtained when the user utilizes the planner . In one embodiment user preference database may be used to store the users preferences. In another embodiment user preference data may be received from the user system and may not be stored by the planner .

The acquisition engine includes a location and activity acquisition logic LAA logic . The LAA logic acquires location and activity information for the planning space. For example for itinerary planning the LAA logic acquires locations and activities of interest to tourists. For Web Service planning the LAA logic acquires virtual locations for example universal resource indicators URIs of various types of services and the activities correspond to services provided by the various locations. In this context the term location refers to not physical locations but virtual locations such as locations defined by universal resource indicators URIs .

The dividing logic divides any multi step activities into their separate steps. For itinerary planning multi step activities are activities which are separated by a time i.e. purchase of theater tickets and attending the theater . For Web Service planning multi step activities may include activities that require visiting two different locations i.e. credit card validation and credit card charging. 

The timing logic associates a time with each location. For example for itinerary planning the time it takes to do an activity. For Web Service planning the time may be the time required to perform a service.

The travel time logic calculates the travel time between each activity location. In one embodiment for the itinerary planner the travel time logic calculates the travel.

The planning engine includes a user interface logic to receive user data. In one embodiment the user interface is a Web based interface. In that instance the user interface logic presents the user interface on the Web and accepts the posted data from the user.

The data received by the user interface logic is passed to the plan creation logic . The plan creation logic creates a plan that meets the user s utility requirements. If the user indicates that the presented plan does not meet his or her preferences the plan creation logic creates a new plan. The plan utility evaluation logic determines that the utility of the new plan is greater than the utility of the rejected plan by a delta. In one embodiment the delta is set by the user. In another embodiment the user may in rejecting a plan indicate the particular feature that is disliked. For example a plan may call for driving 45 minutes to a location deemed to be of high utility. The user may in one embodiment indicate that this is too much driving and therefore the utility of the location should be downgraded.

Plan export logic permits the user to export the plan created by planner to a mobile system. The planner thereby provides a plan that the user can take with himself or herself.

The user interface also includes user preferences . User preferences indicates what weight value a user places on each category. An exemplary set of categories is illustrated here. The categories for a travel planner include technology shopping entertainment meals food architecture view neighborhood museum walk music and history. This list of categories is only exemplary. A different list of categories may be used. For example for a location which has activities centered around the Ocean the categories may include swimming scuba diving tanning etc. In one embodiment the set of available categories is based on the set of available activities in the area. Thus for example a land locked location will not have a category such as walking on the beach. In one embodiment the user may enter his or her preferences once upon initially accessing the system and the system may store these preferences. In another embodiment the user preferences may be learned based on user behavior. For example if the user always prefers plans that include shopping the system learns that the user has a preference for shopping. In one embodiment the user may alter the preferences on a case by case basis but the system retains the basic preferences. In that instance in one embodiment the user interface may display the basic preferences highlighted to the user enabling the user to simply accept the basic preferences or make any changes desired.

The time parameters indicate the starting date and time and stopping date and time for the tour. In one embodiment time parameters include slack for time end which indicates how much flexibility there is in the ending time.

Location parameters indicate the starting location and stopping location. In this example the starting and stopping locations are the same. However in another embodiment separate starting and stopping locations may be defined. Travel trade off indicates the user s preference for nearby attractions compared to attractions that are further away. Maximum walkable distance indicates the distance a user is willing to walk. This determines whether the itinerary planner will suggest driving or walking and the accessibility of certain locations.

Planner controls permit the user to adjust certain parameters of the search. For example the increase in utility is the delta by which a new plan must be better than the old plan. The use of this delta is described in more detail below. The time to find a plan provides a stopping point for the iterations to find a plan.

The plan information is a plan tree showing the decision points the user has available while the statistics show the results for the run and provide adjustable controls for the user if the user wishes to iterate the plan. In another embodiment the results page may simply include the map and locations and an option to iterate the plan. In one embodiment the user may indicate what specific feature of the plan is objected to when requesting a plan iteration.

At block data about the locations and activities available in the current selected City County State Country are obtained. In one embodiment the World Wide Web is used to research such locations and activities. In another embodiment a preexisting list of activities and locations of interest from a single source such as Frommer s Travel Guide may be used.

At block the process determines whether there are any multi step activities. Multi step activities require two or more steps separated by a time. For example for attending the theater the tickets may need to be ordered or picked up some hours prior to attending the performance. If there are multi step activities at block the activity is broken up into its sub steps i.e. separate activities. The system in one embodiment keeps track of the constraints between these activities and maintains them. For example if you have not obtained a ticket you cannot not go to the concert and if you have a ticket you ought to go to the concert. In one embodiment the activities may also have temporal constraints. If you want to pick up your developed photographs you ought to drop off the photographs at least one hour earlier. Thus these separate activities actually may retain temporal or dependency constrains.

At block a time is associated with each activity. In one embodiment the time for non rigid activities is minimum time and typical time. For example certain activities are rigidly timed. For example a cable car ride from a first location to a second location is of a defined duration. However the amount of time spent touring China Town or shopping varies by the individual. Therefore in one embodiment the system uses various sources to identify a minimum time and a typical time for the activity. In one embodiment the user s preferences may change this time estimation. Thus if the user indicates that he or she values shopping highly the assumed time for a shopping activity is increased.

At block categories are attached to each activity. The categories as noted above may be obtained from a third party provider.

At block the physical location of each activity is identified. In one embodiment GPS coordinates are used. Other coordinate systems may be used. The relevant information is the ability to calculate the distance between various locations. The absolute location is not relevant.

At block the travel times between various activity locations are calculated. In one embodiment travel times are calculated for various modes of travel. Thus for example the system calculates a distance traveled by foot by car or by other vehicles. In one embodiment the system takes into account that traveling on foot or bicycle may use different paths and shortcuts than travel by car or other vehicle.

At block parking is located for each location. In one embodiment the routing agent described in application Ser. No. 10 739 543 filed Dec. 17 2003 entitled A Method and Apparatus for a Routing Agent now issued as U.S. Pat. No. 7 239 602 may be used. This enables the itinerary planning agent to identify certain locations that are inaccessible for certain users. For example if the nearest parking to a site is 0.5 miles but a user is unable to walk more than 0.3 miles that site may not be available for the user. The process terminates at block .

At block the minimum utility of the plan that will be selected is chosen. In one embodiment this variable is set by the user. In another embodiment this variable is set by the system. In one embodiment the default value of zero is set by the system.

At block the first plan having the required level of utility is constructed. This is described in more detail below with respect to .

At block the process determines whether another plan should be evaluated. In one embodiment the user sets a maximum time for evaluating a good plan. In another embodiment the first good plan is shown to the user.

At block if another plan should be evaluated the process attempts to identify a plan having a utility of Delta above the utility of the current plan. The level of Delta is set by the user in one embodiment. In another embodiment the system sets the level of delta. In one embodiment the default delta is set to 1. At block the process determines whether the attempt to find an improved plan has succeeded. If the plan with the improved utility is found the process returns to block to determine whether another plan should be evaluated. If the process fails the process continues to block .

If at block the process determined that the current plan should be displayed to the user because a Stop has been received time is up or the first good plan was selected by the user the current plan is displayed to the user at block . At block the process determines whether the user has requested another evaluation i.e. the user has requested a better plan. If so the process returns to block to attempt to identify a plan with a utility of current delta.

At block the final plan is shown to the user. In one embodiment the user may be able to download the plan to a portable device such as a laptop telephone GPS device or palmtop. This enables the plan to be portable. The process then ends at block .

At block a user value is calculated for the available activities. In one embodiment the user value is a function of 1 the user preference 2 the characteristics of the activity 3 the distance between the activity and the current location 4 the means of transportation available. In one embodiment user value activity value for category user pref for category travel cost.

At block the activity with the highest user value is selected. In one embodiment if multiple activities with the same user value are available one is selected at random. In another embodiment if multiple activities with the same user value are available the travel time is made more costly to differentiate between the activities.

At block the process determines whether there is time left after the completion of the activity. If so the process returns to block to recalculate the user values taking into account the ending location of the first activity and then select the next highest value activity. In another embodiment the activity values are not recalculated and the process returns to block to select the next activity. If there is no time left the process continues to block .

At block the user value for the complete plan is calculated providing an overall value to the plan. At block the process ends. Note that a better plan is selected by varying the selection among equally highly valued items selecting more activities that have cumulatively higher user value or selecting a next best plan. Furthermore since the ending location of an activity affects the selection of the next activity a change percolates through the entire plan producing a significantly different plan.

At block the first item in the itinerary is displayed. In one embodiment the items in the itinerary are primitive tasks i.e. tasks that cannot be further broken down are displayed. The primitive tasks in one embodiment include 

In one embodiment the next activity is displayed. In one embodiment the activity has associated with it a time and a starting and ending location. The starting location is the current location i.e. the ending location of the previous itinerary item or the true starting point of the user .

At block the user may indicate that he or she intends to follow the itinerary plan. Since the plan created by the planner is a contingent plan there are actions to be taken whether or not the user follows the plan. For example a user may decide that he or she does not wish to go to China Town even though that is the next itinerary step. In one embodiment the user may abort the current itinerary item at any time. In another embodiment in a GPS enabled system or another system which is able to identify the user s current location the system may automatically determine whether the user is following the itinerary.

At block the process determines whether the user followed the itinerary. If so the process continues to block and the primitive tasks associated with the itinerary item are displayed for the user to follow. Thus for example for the activity of cable car tour of San Francisco the primitive steps may be Drive to Civic Center Parking including directions Park Walk to Cable Car Stop including directions Get on Cable Car at Civic Center Cable Car stop Ride Cable Car Get off at Folsom Street Stop.

In one embodiment sub steps of the itinerary may be planned using the routing engine described in application Ser. No. 10 739 543 filed Dec. 17 2003 entitled A Method And Apparatus For A Routing Agent now issued as U.S. Pat. No. 7 239 602. For example the route to the parking garage step one of the itinerary may be calculated using the routing engine as is described in that application. In one embodiment other sub steps of the itinerary may be planned using errands engine described in co pending application Ser. No. 10 739 553 filed Dec. 17 2003 entitled A Method And Apparatus To Implement An Errands Engine . For example the errands engine may be used to create an optimal tour to fill basic needs such as ATMs beverages or to explore specific attractions or activities within allotted time and money accounting for personal preferences.

The process then continues to block . At block the process determines whether the plan has been completed. If the plan is not yet completed the process returns to block and the next itinerary item is described. Otherwise the process continues to block and ends.

If the user indicates that he or she is not following the itinerary at block the alternative itinerary item is selected. For example given the starting point the original itinerary item may be Visit China Town and the alternative item may be Go to Dragon Museum. For each choice the user may make an alternative is presented if the user declines to follow the itinerary. The process then continues to block and the alternate itinerary choice is displayed for the user.

The agent includes a GeoRouter and WingfootSOAP. GeoRouter is a software component that provides a full set of tools to solve most transportation routing problems. The Wingfoot SOAP is a lightweight client implementation of SOAP simple object protocol an XML protocol that is specifically targeted at the MIDP CLDC platform. However it can be used in J2SE and J2EE environments.

The Database in one embodiment includes mapping information. In one embodiment the database is a mySQL database. In one embodiment the database includes image files. The image files may be used for pictures of the various locations. The image files may be used to display images photographs videos or maps of the locations to visit. This can be used in addition to the textual information displayed about the locations.

The application server includes TomCat and a Web Application Server. Tomcat is the servlet container that is used in the official Reference Implementation for the Java Servlet and JavaServer Pages technologies.

The MDP Solver includes a SPUDD CUDD and gSOAP. SPUDD is Stochastic Planning using Decision Diagrams and it is one method of solving the equations used in planning. CUDD is CU Decision Diagrams which is a package that provides functions to manipulate Binary Decision Diagrams BDDs Algebraic Decision Diagrams ADDs and Zero suppressed Binary Decision Diagrams ZDDs . The package provides a large set of operations on BDDs ADDs and ZDDs functions to convert BDDs into ADDs or ZDDs and vice versa and a large assortment of variable reordering methods. The gSOAP compiler tools provide a unique SOAP XML to C C language binding to ease the development of SOAP XML Web services and client application in C and or C .

Mapinfo includes routing server mapping server and a GeoCoder. The GeoCoder is a software application that assigns geographic coordinates to a record. Mapping server generates maps for locations identified by the GeoCoder while Routing Server can be used to generate routes between identified locations.

C HTN Planner includes SHOP2 and CL HTTP Server. SHOP2 is Simple Hierarchical Ordered Planner version2 . CL HTTP Server is a Common Lisp Hypermedia Server CL HTTP .

The Business Process Execution Language for Web Service BPEL4WS enables a service composer to aggregate one or more web services into a possibly non deterministic execution of one or more web services.

The data processing system illustrated in includes a bus or other internal communication means for communicating information and a processor coupled to the bus for processing information. The system further comprises a random access memory RAM or other volatile storage device referred to as memory coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions by processor . The system also comprises a read only memory ROM and or static storage device coupled to bus for storing static information and instructions for processor and a data storage device such as a magnetic disk or optical disk and its corresponding disk drive. Data storage device is coupled to bus for storing information and instructions.

The system may further be coupled to a display device such as a cathode ray tube CRT or a liquid crystal display LCD coupled to bus through bus for displaying information to a computer user. An alphanumeric input device including alphanumeric and other keys may also be coupled to bus through bus for communicating information and command selections to processor . An additional user input device is cursor control device such as a mouse a trackball stylus or cursor direction keys coupled to bus through bus for communicating direction information and command selections to processor and for controlling cursor movement on display device .

Another device which may optionally be coupled to computer system is a communication device for accessing other nodes of a distributed system via a network. The communication device may include any of a number of commercially available networking peripheral devices such as those used for coupling to an Ethernet token ring Internet or wide area network. The communication device may further be a null modem connection a wireless connection mechanism or any other mechanism that provides connectivity between the computer system and the outside world. Note that any or all of the components of this system illustrated in and associated hardware may be used in various embodiments of the present invention.

It will be appreciated by those of ordinary skill in the art that any configuration of the system may be used for various purposes according to the particular implementation. The control logic or software implementing the present invention can be stored in main memory mass storage device or other storage medium locally or remotely accessible to processor .

It will be apparent to those of ordinary skill in the art that the system method and process described herein can be implemented as software stored in main memory or read only memory and executed by processor . This control logic or software may also be resident on an article of manufacture comprising a computer readable medium having computer readable program code embodied therein and being readable by the mass storage device and for causing the processor to operate in accordance with the methods and teachings herein.

The present invention may also be embodied in a handheld or portable device containing a subset of the computer hardware components described above. For example the handheld device may be configured to contain only the bus the processor and memory and or . The present invention may also be embodied in a special purpose appliance including a subset of the computer hardware components described above. For example the appliance may include a processor a data storage device a bus and memory and only rudimentary communications mechanisms such as a small touch screen that permits the user to communicate in a basic manner with the device. In general the more special purpose the device is the fewer of the elements need be present for the device to function. In some devices communications with the user may be through a touch based screen or similar mechanism.

It will be appreciated by those of ordinary skill in the art that any configuration of the system may be used for various purposes according to the particular implementation. The control logic or software implementing the present invention can be stored on any machine readable medium locally or remotely accessible to processor . A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other forms of propagated signals e.g. carrier waves infrared signals digital signals etc. .

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

