---

title: Asset advisory intelligence engine for managing reusable software assets
abstract: Providing intelligent recommendations of reusable software assets can begin with obtaining semantic topic maps that define semantic relationships between topics. A topic can represent a requirement or a reusable software asset. A semantic topic map can be written in accordance with a semantic framework using a Web ontology language and stored in a semantic Web repository. User-entered search criteria, representing a requirement, a user-selected search results filter, or a reusable software asset, can be received. A set of semantic topic maps can be identified for the user-entered search criteria. A set of inferred data items can be inferred from the set of identified semantic topic maps. The contents of both sets can be aggregated into a results table. A semantic results graph, a pictorial representation of topics and relationships, can be synthesized from the results table. The semantic results graph can be rendered within an associated user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341155&OS=08341155&RS=08341155
owner: International Business Machines Corporation
number: 08341155
owner_city: Armonk
owner_country: US
publication_date: 20110121
---
This continuation in part application claims the benefit of U.S. patent application Ser. No. 12 034 508 filed Feb. 20 2008.

The ability to reuse software assets represents a significant time savings when designing new software solutions especially in a service oriented architecture SOA environment. Reusable software assets often embody knowledge that is specific to the solution s requirements both functional and non functional the architect designing the solution and or the industry to which the solution pertains. As used herein the term reusable software asset is used to refer to a variety of data utilized in the development of software solutions e.g. Web services software applications etc. . Examples of reusable software assets can include but are not limited to pattern specifications pattern implementations data models software code modules and the like.

Some reusable software assets represent an aggregate of assets. For example a pattern asset often includes a pattern specification one or more pattern implementations and one or more feature design specifications. Therefore a pattern asset is capable of assuming a number of forms represented by the total number of distinct permutations of its sub components.

One aspect of the disclosure can include a method computer program product and computer system for providing intelligent recommendations of reusable software assets. In the aspect a computer can receive at least one user entered search criteria representing at least one requirement for a software solution a user selected filter for search results and a reusable software asset identifier. The computer can identify a set of at least one semantic topic map associated with the at least one user entered search criteria. The topic map set can be a subset of a plurality of semantic topic maps. Each semantic topic map of the plurality can defines at least one semantic relationship between topics. A topic can represent one of a requirement and a reusable software asset. Each semantic topic map of the plurality can be written in accordance with a semantic framework using a Web ontology language. Each semantic topic map can be stored in a semantic Web repository. The computer can aggregate contents of the topic map set and the set of inferred data items into a results table. The computer can synthesize a semantic results graph from the results table. The semantic results graph can be a pictorial representation of semantically related topics contained in the results table. The semantic results graph is a graph able to be rendered within a display area of an associated user interface.

One aspect of the disclosure can include a computer system for providing intelligent recommendations of reusable software assets. The computer system can include one or more processors one or more computer readable memories and one or more computer readable tangible storage devices. The computer readable tangible storage devices can comprise a plurality of semantic topic maps that define relationships between topics. A topic can represent a requirement and or a reusable software asset. The semantic topic map can be written in accordance with a semantic framework using a Web ontology language. The system can include program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to provide guidance for selection of reusable software assets in designing a software solution. The system can include program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to synthesize a semantic results graph from semantic topic maps determined as applicable to at least one user provided search criteria. The semantic results graph can be a pictorial representation of semantic relationships between topics of the applicable semantic topic maps.

One aspect of the disclosure can include a computer program product for providing intelligent recommendations of reusable software assets. The computer program product can include one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more storage devices. The program instructions can be obtain a plurality of semantic topic maps. A semantic topic map can define at least one semantic relationship between topics. A topic can represent a requirement or a reusable software asset. The semantic topic map can be written in accordance with a semantic framework using a Web ontology language. Each semantic topic map can be stored in a semantic Web repository. The program instructions can receive at least one user entered search criteria representing at least one requirement for a software solution a user selected filter for search results and a reusable software asset identifier. The program instructions can identify a set of at least one semantic topic map associated with the at least one user entered search criteria. The program instructions can infer from the set of at least one identified semantic topic map a set of at least one inferred data item representing at least one of an auxiliary data relationship to a topic contained in a semantic topic map that is not a member of the set of at least one identified semantic topic map and an applicable auxiliary data element from a semantic topic map that is not a member of the set of at least one identified semantic topic map. The program instructions can aggregate contents of the set of at least one identified semantic topic map and the set of at least one inferred data item into a results table. The program instructions can synthesize a semantic results graph from the results table. The semantic results graph can be a pictorial representation of semantically related topics contained in the results table. The program instructions can render the semantic results graph within a display area of an associated user interface.

Some automated tools exist to assist solution architects in identifying reusable software assets that match an entered set of search criteria. However these conventional automated tools are only effective when the reusable software assets are catalogued using meaningful criteria.

Moreover even when the reusable software assets are catalogued according to meaningful criteria these conventional tools still fail to capture knowledge about or the relationships between the assets functioning only as an unintelligent search tool. The context in which the assets have been used successfully is thus lost and the learning process must be reiterated for each new solution.

For example a conventional automated tool will provide a user with a list of reusable assets that have been identified for a specific requirement. However the automated tool will not tell the user which assets should or should not be used together. As such the users are required to capture this knowledge outside of the automated tool requiring manual correlation of the knowledge and the tool results. These problems with conventional approaches were discovered by the inventors of the disclosure in the course of developing the invention.

The present disclosure provides a solution for providing intelligent recommendations of reusable software assets. An asset intelligence engine can be utilized in conjunction with an asset advisory tool and semantic topic maps. The semantic topic maps can define semantic relationships between topics which can represent requirements or reusable software assets. The semantic topic maps can be written in accordance with a semantic framework using a Web ontology language and stored in a semantic Web repository. For user entered search criteria the asset intelligence engine can generate a semantic results graph from applicable semantic topic maps. Data included in the semantic results graph can also include data inferred by the asset intelligence engine from the applicable semantic topic maps. The semantic results graph can be a pictorial representation of the reusable software assets and or requirements and their semantic relationships that pertain to the user entered search criteria.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can store a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Method can begin in step where the asset intelligence engine of the asset advisory tool can receive asset and or requirement data formatted in accordance with a predetermined semantic framework. As used herein the term requirement represents a specific feature element or function that the software solution created from the assets is to provide. As such requirements can be generally categorized as functional i.e. pertaining to the operation of the software or non functional i.e. cosmetic or not affecting software operation .

The predetermined semantic framework can allow for the capture of information regarding the relationships that a specific asset or requirement has to other assets and or requirements. In a preferred embodiment the asset and or requirement data can be represented as topic map per the standard ISO IEC 13250 2003 using the resource description framework RDF and the Web ontology language OWL defined by the World Wide Web Consortium.

The asset intelligence engine can store the semantic asset requirement data in a semantic Web repository in step . A semantic Web repository can represent a data storage system configured for the storage of the ontology as well as data written using a semantic framework and ontology. SESAME RDF SERVER and BOCA can represent examples of semantic Web repositories.

In step the asset intelligence engine can receive user entered search criteria. The user entered search criteria can represent the specific asset or requirement for which the user wants additional asset information.

The asset intelligence engine can identify semantic asset requirement data matching the user entered search criteria in step . In step the asset intelligence engine can infer auxiliary data elements and or relationships utilizing the user entered search criteria and or the relationships contained in the identified semantic asset requirement data. In step the asset intelligence engine can use an inference engine to derive logical assertions from the identified semantic asset requirement data.

For example if the pattern specification Authenticate User satisfies the Security requirement and the SSL Service pattern implementation satisfies the Authenticate User pattern specification then it can logically follow that the SSL Service pattern implementation can satisfy the Security requirement when used with the Authenticate User pattern specification.

Since the semantic asset requirement data is written using RDF and OWL and OWL is based upon the extensible markup language XML the asset intelligence engine in steps and or can utilize semantic Web XML RDF based query languages like the SPARQL Protocol and RDF Query Language SparQL . The use of such query languages can allow the creation of robust queries for inferring new data as well as other functions like consistency checking. Further the asset intelligence engine can use XML based security standards to enhance access control functions for the semantic asset requirement data.

The asset intelligence engine can aggregate both the identified and inferred semantic asset requirement data into a primary results table in step . The primary results table can represent the totality of data that the asset intelligence engine has found to be pertinent to the user entered search criteria.

The asset intelligence engine can apply role and or user specific data filters to the primary results table in step . Many asset management systems can utilize the concept of user roles for the purposes of controlling access to and or operations performed upon the assets stored in the system. This same concept can be extended to the operation of the asset intelligence engine so users are not unintentionally provided access to assets.

A user specific filter can represent a user selected presentation parameter. The user specific filter can be selected when the user enters the search criteria. For example the user enters the search criteria Data Handler Service and selects that the results should contain only requirements i.e. the user wants to know what requirements are related to the Data Handler Service .

Step can be expanded upon to accommodate situations where key nodes as hereinafter defined are filtered from the primary results table. For example if the role of the inquiring user eliminates a large portion of the key nodes from the primary results table the asset intelligence engine can provide the user with notification of his or her role restriction to the semantic asset requirement data. The user can then review his or her search criteria for errors or discuss his or her role restrictions with the system administrator.

After execution of step the primary results table can contain data that satisfies the user entered search criteria has been inferred as relevant to the search criteria and has not been removed by role user specific filtering.

In step the asset intelligence engine can identify the key nodes and their relationships from the filtered primary results table. The key nodes can represent those assets and or requirements that are related to the user entered search criteria to a predefined depth or level.

For example searching on asset A can result in assets C and D as well as assets K L and P that relate to asset C and assets Q and V associated with asset D . Since it is possible to accumulate data for assets and or requirements that are indirectly related to the focus of the search it can be more meaningful to initially limit the scope i.e. four nodes of separation from the source root node .

The asset intelligence engine can keep nodes and relationships not identified as a key node or key relationship in step for later use. For example the asset intelligence engine can show key nodes at the depth limit as having additional data like a collapsed branch of a tree structure that the user can expand on demand with those nodes and relationships being dynamically presented.

From the filtered primary results table the asset intelligence engine can create a semantic results graph in step . The semantic results graph can be a graphical representation of the key nodes and their relationships. In step the asset intelligence engine can retrieve metadata for each node contained in the semantic results graph from its corresponding storage location. The metadata can comprise various data items defined for each stored asset such as the type of asset its owner and its location in the repository.

It should be noted that the metadata can be associated with the actual asset and not the semantic asset data representing that asset. Thus the metadata can be maintained separately as part of the asset management system without affecting the contents of the semantic asset data.

In step the asset intelligence engine can render the semantic results graph within a viewing area of a user interface such as a graphical user interface GUI or a web user interface WUI associated with the asset advisory tool and or asset management system depending upon implementation of the asset advisory tool. As the user interacts with the rendered semantic results graph in step the asset intelligence engine can supply the retrieved metadata for display within various interactive GUI or WUI elements like pop up windows and fly over windows.

The asset intelligence engine can dynamically generate the semantic results graphs and therefore can reflect changes made to the semantic asset requirement data over time. That is as the knowledgebase contained within the semantic asset requirement data the assets and or combination of assets presented to the user within the semantic results graph can also change over time.

In system a user can create one or more semantic asset requirement topic maps herein referred to as semantic topic maps for use by the asset intelligence engine of the asset advisory tool to recommend one or more reusable software assets herein referred to as assets for a set of search criteria .

Assets can be contained in a data store that the user can access over the network . Data store can be a component of an asset management system not shown .

The user can create a semantic topic map using a topic map editor presented within the asset advisory tool user interface . The asset advisory tool user interface can be a user interface such as a GUI or WUI running on a client device that allows the user to interact with the asset advisory tool . The client device can represent a variety of computing devices capable of supporting operation of the asset advisory tool user interface and communicating with the asset advisory tool over the network .

The topic map editor can represent an interface component of the asset advisory tool user interface configured to handle the creation modification and storage of the semantic topic maps . In another embodiment the topic map editor can be a separate software application accessed independent from the asset advisory tool user interface .

The semantic topic maps can be stored in a semantic Web repository of a data server that is accessible over the network . The data server can represent the hardware and or software components that manage access to the semantic Web repository over the network .

The semantic Web repository can represent the hardware and or software required to store an ontology as well as data written using a semantic framework and the ontology. SESAME RDF SERVER and BOCA can represent examples of semantic Web repository .

A semantic topic map can be a representation of a software requirement or asset as a topic map as defined by the standard ISO IEC 13250 2003 that utilizes a semantic framework. As used herein the term requirement represents a specific feature element or function that the software solution created from the assets is to provide. As such requirements can be generally categorized as functional i.e. pertaining to the operation of the software or non functional i.e. cosmetic or not affecting software operation .

The predetermined semantic framework can allow for the capture of information regarding the relationships that a specific asset or requirement has to other assets and or requirements. In a preferred embodiment the semantic topic maps can be represented using the RDF and the OWL defined by the World Wide Web Consortium.

Once semantic topic maps have been created for the assets and requirements the user can use the asset advisory tool to generate a semantic results graph for entered search criteria . The asset advisory tool can be a software application configured to provide intelligent suggestions of assets and or combinations of assets based upon the search criteria and the semantic topic maps .

The asset advisory tool can include an asset intelligence engine . The asset intelligence engine can be a software component configured to analyze the semantic topic maps with respect to the search criteria to produce the intelligent suggestions. The asset intelligence engine can utilize an inference engine to perform deductive and or rule based reasoning upon the data and relationships of the semantic topic maps .

For example the inference engine can search for assets of data store that match specifics of one or more of the search criteria . One or more of the matched assets can have a relationship with another asset . The relationships can embody different semantic associations. For instance different semantic associations can include but are not limited to an is satisfied by relationship a has an occurrence of relationship an is used with relationship an is an instance of relationship an is an implementation of relationship an is cautioned with relationship and the like. Any expressible relationship can be used to define a semantic association between assets in contemplated embodiments of the disclosure.

The inference engine can leverage the semantic associations between assets to produce a comprehensive result to the search criteria that can be based in part upon inferences and assumptions that the inference engine makes. For example a matched asset referred in this example as a first asset can be determined that satisfies a significant number of the search criteria elements but not all. This matched asset can be a specific instance of more general asset referred to as a second asset. The second asset can have an is used with relationship with a third asset. The third asset can satisfy elements of the search criteria that the first asset failed to satisfy. Thus the inference engine can infer that the first asset can be combined with the third asset to satisfy the search criteria. The inference engine can indicate other assets and or combinations of assets that also satisfy the search criteria and can present the alternatives to a user .

In one embodiment the asset intelligence engine can synthesize the intelligent suggestions for assets and the relationships between those assets into the semantic results graph . The semantic results graph can be a graphical representation of the assets and or requirement pertaining to the search criteria and their relationships.

The client device upon receiving the semantic results graph from the asset advisory tool can present the semantic results graph to the user within the asset advisory tool user interface . Thus the asset advisory tool user interface can present the user with a visual illustration of not only which assets and or requirements pertain to their search criteria but also how the assets and or requirements are semantically related.

Additionally the semantic results graph can include auxiliary data for the presented assets such as a universal resource locator URL to one of the assets in the data store .

Network can include any hardware software and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed through data or voice channels. Network can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. Network can also include network equipment such as routers data lines hubs and intermediary servers which together form a data network such as a local area network LAN a wide area network WAN an intranet or the Internet. Network can also include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. Network can include line based and or wireless communication pathways.

As used herein presented data store can be a physical or virtual storage space configured to store digital information. Data store can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Data store can be stand alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within data store in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further data store can utilize one or more encryption mechanisms to protect stored information from unauthorized access.

User interface can represent a GUI or WUI in which the semantic results graph is presented to a user. User interface can represent the asset advisory tool user interface of system .

It should be emphasized that user interface is meant for illustrative purposes only and is not intended as an absolute embodiment or limitation to an embodiment of the present disclosure. User interface can include additional GUI or WUI components and elements without impacting or distracting from an embodiment of the present disclosure.

User interface can include a display area in which the semantic results graph can be presented as well as a selector for the search term or criteria driving the semantic results graph . As shown in this example the criteria selector can be implemented as a drop down menu from which the user can select available requirements or assets.

The terms available to the user via the criteria selector can vary based upon the user s role. For example a user having a role of Solution Architect can be presented with terms for those assets requirements accessible to the Solution Architect role whereas a user having the Domain Expert role would be provided with a broader listing

In another contemplated embodiment the criteria selector can be implemented as a questionnaire or a separate wizard interface. In such an embodiment an asset intelligence engine such as asset intelligence engine of can prompt the user to provide input to one or more predetermined questions or one or more selection lists that the asset intelligence engine can use to generate the semantic results graph .

In yet another embodiment wherein the criteria selector comprises multiple and or complexly related criteria selections the asset intelligence engine can present the criteria selections along with the user s choices alongside the semantic results graph in a separate user interface widget or component. Such an embodiment can allow the user to modify choices for the selection criteria in the criteria selector and have the presentation of the semantic results graph dynamically modified accordingly.

As shown in this example the semantic results graph can present the user with the nodes and representing the requirements and or assets pertaining to the item for which the user has initiated a search. The nodes and can be related amongst themselves by various relationships A B C and . The relationships A B C and can embody different semantic associations between the nodes and .

In this example the user has performed a search upon the requirement called Performance . Therefore the semantic results graph can represent the requirement as the performance node . By reading the semantic results graph the user can understand the following about assets requirements related to the performance node .

Firstly the performance node can have an is satisfied by relationship indicated by the solid line to the requester side cache node . In this example the requester side cache node can represent a pattern asset. Therefore the user can use the requester side cache pattern asset to satisfy the performance requirement.

While useful to know what asset to use to satisfy a requirement the semantic results graph further illustrates additional knowledge about other assets that should or should not be used as part of the solution. The requester side cache node can be related to the session facade node and the WS response template node via is used with relationships A and C indicated by the dashed lines respectively. Further the session facade node can also be connected to the WS response template node via is used with relationship B.

The session facade node can represent a pattern implementation of the requester side cache pattern asset for interacting with JAVA ENTERPRISE BEANS. The WS response template node can represent another pattern asset that has been identified as a best practice to use with the requester side cache pattern asset. This best practice knowledge can be captured within a semantic topic map relating the WS response template node and the requester side cache node with the semantic relationship of is used with .

Now the user can understand that the WS response template pattern asset and session facade pattern implementation should be used when using the requester side cache pattern asset to satisfy the performance requirement.

The semantic results graph can also show the user that the requester side cache node is related to the optimistic locking node with an is cautioned with relationship . The optimistic locking node can represent a pattern implementation for optimistic concurrency control for database records.

In this example another user i.e. solution architect domain expert could have captured his or her experience of using the optimistic locking pattern implementation with the requester side cache pattern asset with respect to that solution s performance. Thus this user could have created a semantic topic map to contain this information for use by other users who are attempting to use the requester side cache pattern asset to fulfill a performance requirement.

Lastly the semantic results graph can indicate to the user that the requester side cache node has a has an occurrence of relationship with the requester side cache specification Web site node . The requester side cache specification Web site node can be a pattern specification that includes or references the requester side cache pattern asset. Thus the requester side cache specification Web site pattern specification has an occurrence of the requester side cache pattern asset.

 Has an occurrence of relationship can indicate to the user that the requester side cache specification Web site pattern specification could be useful starting or reference point for using the requester side cache pattern asset to satisfy the performance requirement. The user can then decide to access the requester side cache specification Web site pattern specification. To do so the user would typically need to search for the specific asset in the corresponding data store.

However an asset advisory tool such as asset advisory tool of can further simplify this task by providing the user with such pertinent data about each node and or within the user interface without the need for the user to access other systems. As described in method the asset intelligence engine can collect metadata about the nodes and presented within the semantic results graph .

Therefore by using the interactive GUI or WUI elements supported by the user interface the asset intelligence engine can quickly provide the metadata for the nodes and to the user. In this example a flyover window can be rendered when the user positions a selection mechanism i.e. mouse pointer over the graphical area representing the requester side cache specification Web site node .

The asset advisory tool user interface can generate the flyover window which textually displays the previously collected metadata as corresponding data items . In this example the data items can provide the user with the type domain owner and location for the asset represented by the node . The location of the asset can be represented as a universal resource locator URL allowing the user to directly access the asset from the asset advisory tool.

In system the data processing apparatus can include but need not include each of one or more central processor a main memory store an input output controller a keyboard a pointing device e.g. mouse trackball stylus etc. a display device and a mass storage component e.g. hard disk drive . Additional input output devices like printing device can also be included in data processing apparatus .

The components of the data processing apparatus can communicate using a system bus or other comparable communication medium supported by the architecture of data processing apparatus .

In other exemplary embodiments data processing apparatus can comprise one or more processors in addition to central processor one or more computer readable memories in addition to main memory store and or one or more computer readable tangible storage devices in addition to mass storage component . In still other exemplary embodiments the asset interface engine can comprise program instructions stored on at least one of the one or more storage devices. In still other exemplary embodiments the asset interface engine can comprise program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories.

In system the computing device can include a kernel or operating system that manages interaction with the user and various software applications via an interface . The software applications can represent a variety of computer programs that comprise program instructions for execution within the operating system . The software applications can include the asset intelligence engine in one embodiment.

The interface can represent the hardware and or software components that allow the user to provide input to and or receive output from the software application and or operating system . Examples of interface can include but are not limited to a GUI a WUI a touch screen a monitor a command line combinations therein and the like. In one embodiment the asset advisory tool user interface is an interface .

In system client devices and servers and and a storage component can communicate across a network . Client devices and can represent a variety of computing devices capable of accessing software applications and or services provided by servers and over the network . Examples of client devices and can include but are not limited to desktop computers smartphones laptop computers notebook computers personal data assistants and the like.

Servers and or can represent computing devices configured to act as a provider for data services and or shared resources. Servers and or can be specialized for a specific function e.g. an application server an email server etc. .

Data stored in storage can be accessed via network by either the servers and or the client computers and . As used herein presented storage can be a physical or virtual storage space configured to store digital information. Storage can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Storage can be stand alone storage units as well as a storage unit formed from a plurality of physical devices. Additionally information can be stored within storage in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further storage can utilize one or more encryption mechanisms to protect stored information from unauthorized access.

Network can include any hardware software and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed though data or voice channels. Network can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. Network can also include network equipment such as routers data lines hubs and intermediary servers which together form a data network such as the Internet. Network can also include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. Network can include line based and or wireless communication pathways.

Topic map can represent a generalized example of the formal standard ISO IEC 13250 2003. A topic map can be used to express the relationship between a software requirement and the necessary assets to fulfill that requirement.

The topic map can include sections for topics associations and occurrences . Generally speaking a topic can represent any concept i.e. person place thing thought etc. In this instance of use topics can be used to represent the various software requirements and assets.

In the associations section relationships can be defined between elements of the topics section . It should be noted that the types and meanings of the relationships used in the associations section are defined within the ontology being used to express the topic map . Examples of relationships in association section can include but are not limited to is satisfied by has an occurrence of is cautioned with and is used with. 

The occurrences section can identify resources i.e. other assets or topics that are related to or reference the topic .

As shown in this example data model can be expressed using the unified modeling language UML . The functionality of the asset intelligence engine can be represented by the encapsulated elements those elements enclosed within the dashed lines .

The asset intelligence engine can be represented as a business service provider block that can provide the business service AssetAdviser . The business service provider block can have a component block called AssetAdviserImpl that represents the implementation of the AssetAdviser business service.

The AssetAdviserImpl component can use an interface called TopicMaps . The TopicMaps interface can interact with both a BOCA component and a SESAME component which are semantic Web repositories that can be used to store the semantic topic maps for use by the asset intelligence engine.

Method can begin in step where the asset intelligence engine can build and or modify semantic topic maps such as semantic topic maps of . The semantic topic maps can be stored in a semantic Web repository such as semantic web repository of in step .

In step the semantic topic maps can then be versioned and or merged as required. Since authoring and or viewing of the semantic topic maps can be restricted based upon user roles the semantic topic maps authored at a more granular level can be merged into a broader topic map.

For example a semantic topic map created by a user to express a specific type of Web service can be merged into a larger semantic topic map that represents SOA information services.

The actions of step can be performed by the semantic Web repository. Step can be alternately performed manually to address the case where the semantic Web repository does not support versioning and or merging functions.

In step the asset intelligence engine can query the semantic topic maps based on search criteria such as search criteria of . The query results i.e. semantic results graph of can be presented to the user in step .

Method can begin in step wherein the asset intelligence engine can receive a set of requirements. For example the requirements can be defined within search criteria received from client device . The asset intelligence engine can search semantic topic maps such as semantic topic maps of in step for those semantic topic maps that match the set of requirements.

The asset intelligence engine can extract relevant information about the semantic topic maps in step . Relevant information can include information that matches the search criteria. In step the asset intelligence engine can maintain the semantic topic maps. New information can be inferred from the semantic topic maps in step . For example an inference engine such as inference engine of the asset intelligent engine can infer new information based on the criteria and relationships between reusable software assets such as reusable software assets . In step the asset intelligence engine can provide different views of a semantic topic map based upon the user s role. For example a user s role manager project leader lead developer etc. can be a variable that drives decisions of the inference engine as noted by step of method .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

