---

title: Data and event synchronization across distributed user interface modules
abstract: A computer includes, among other things, local modules contained within a module container of a same application; a message producer unit to communicate with a data server over the i/o interface; a message consumer unit configured to communicate with the data server over the i/o interface; and a local event manager unit. There is a pre-defined sequence of processing events between the local event manager unit, the local modules within the same application of the same module container, remote modules, the message producer unit, and the message consumer unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08447820&OS=08447820&RS=08447820
owner: Decision Lens, Inc.
number: 08447820
owner_city: Arlington
owner_country: US
publication_date: 20110128
---
The technology relates in general to computer networks and more specifically to synchronizing distributed independent application modules optionally on remote computers for performance of a coordinated user experience.

Web based application modules may be used to conduct live meetings training education and or presentations via a computer network such as the Internet. In some web based application techniques each participant in the meeting or the like sits at his or her own computer and is connected to other participants via the Internet. The web based application can be for example a downloaded application executing on each of the users computers or a remote application where the attendees access the meeting by clicking on a link distributed by a meeting invitation e mail to enter the meeting.

A feature that web based collaboration applications sometimes offers is referred to as screen sharing desktop sharing or application sharing where participants can view what a presenter currently has shown on their screen. Some screen sharing applications allow for remote desktop control allowing participants to manipulate the presenter s screen.

Nevertheless existing software solutions can be inadequate when data is actively modified and or when users are actively switching between application modules and when user interfaces should be coordinated. Interactive data presentation and or user control of user interfaces can easily become de synchronized or can slow down due to untimely attempts to synchronize activity.

So called decision support systems DSS that help users compile information and structure a decision model to identify and solve problems and make decisions present a further challenge. This type of software includes a knowledge database a decision model e.g. a decision context and decision criteria and one or more user interfaces. Typically voting on a decision in a DSS can be remote but a DSS typically does not have application sharing due to the data intensive nature of use.

Accordingly one or more embodiments provide a computer system including an i o interface operable to transmit and receive communications over at least a portion of a communication network and a processor cooperatively operable with the i o interface. The processor is configured with local modules contained within a module container of a same application a message producer unit to communicate with a data server over the i o interface a message consumer unit configured to communicate with the data server over the i o interface and a local event manager unit. The local event manager unit dispatches an event to all of the local modules within the same application of the same module container and passes the event to the message producer unit when the event is received by the local event manager unit from one of the local modules executing within the module container or from the module container to represent a user control action within the one of the local modules or the container for the local modules and the local event manager unit dispatches a local event to the local modules as the event when a remote event is received from the message consumer unit the remote event being generated by one of other applications outside the module container that need to stay synchronized with the local modules. The message producer unit transmits the event to the data server as a message configured to communicate the event to the other applications outside the module container that need to stay synchronized with the local modules when the event is received from the local event manager unit. The message consumer unit transmits the remote event to the local event manager unit when the message consumer unit receives the message configured to communicate the remote event from the data server. Each of the local modules determines to not cache the event for the local module when the local module is active and to cache the event when the local module is not active when the local module receives the event from the local event manager unit. The local module acts on the event instead of storing the event for later action when the determination is to not cache the event and the local module stores the event in an event cache per the local module for later action when the determination is to cache the event.

According to another aspect the local module acts on each event in its event cache using the same action for cached events as for events which were not cached.

According to still another aspect the message consumer unit transmits a data event to the local event manager unit when the message consumer unit receives a message configured to communicate the data event from the data server the data event representing a modification of data at the data server by the one of the other applications outside the module container that need to stay synchronized with the local modules.

According to yet a further aspect the local module determines to not cache the event when the module is in interactive mode on a user interface within the module container and determines to cache the event when the module is in a background of the user interface within the module container.

According to still a further aspect the local module determines whether one or more of other events stored in the event cache of the local module is to be overridden by the event and evicts the one or more of the other events stored in the event cache when the one or more of the other events is to be overridden when the local module determines to cache the event.

According to another aspect the local module acts on all events stored in the cache for the local module when a user control event activates the local module within the module container.

And according to still another aspect the same application is a web distributed application that supports multiple simultaneous users each operating separate module containers with local modules that are the other applications outside the module container that need to stay synchronized.

In accordance with another aspect there is provided a computer implemented method for synchronizing plural independent applications. In accordance with yet another aspect there is provided an apparatus configured to perform the method for synchronizing plural independent applications. According to still another aspect there is provided a computer readable medium comprising executable instructions for performing the method for synchronizing plural independent applications. Also according to another aspect there is provided a computer readable non transitory medium comprising instructions for execution by a computer the instructions including a computer implemented method for synchronizing plural independent applications.

Further the purpose of the foregoing abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the art who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of the technical disclosure of the application. The abstract is neither intended to define the invention of the application which is measured by the claims nor is it intended to be limiting as to the scope of the invention in any way.

In overview the present disclosure concerns computer applications such as may be distributed over networks supporting data communication signal video and or voice services between wireless and or wire line devices. Such computer applications can be implemented on an architecture sometimes referred to as a client server architecture in which a server that runs one or more server programs which share a resource with the clients and one or more clients that request the server s content or service function but generally do not share client resources with the server. More particularly various inventive concepts and principles are embodied in systems devices and methods therein for synchronizing plural independent applications distributed among client computers so as to provide a coordinated user experience among the client computers.

The instant disclosure is provided to further explain in an enabling fashion the best modes of performing one or more embodiments of the present invention. The disclosure is further offered to enhance an understanding and appreciation for the inventive principles and advantages thereof rather than to limit in any manner the invention. The invention is defined solely by the appended claims including any amendments made during the pendency of this application and all equivalents of those claims as issued.

It is further understood that the use of relational terms such as first and second and the like if any are used solely to distinguish one from another entity item or action without necessarily requiring or implying any actual such relationship or order between such entities items or actions. It is noted that some embodiments may include a plurality of processes or steps which can be performed in any order unless expressly and necessarily limited to a particular order i.e. processes or steps that are not so limited may be performed in any order.

Much of the inventive functionality and many of the inventive principles when implemented are best supported with or in software or integrated circuits ICs such as a digital signal processor and software therefore and or application specific ICs. It is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions or ICs with minimal experimentation. Therefore in the interest of brevity and minimization of any risk of obscuring the principles and concepts according to the present invention further discussion of such software and ICs if any will be limited to the essentials with respect to the principles and concepts used by the exemplary embodiments.

As further discussed herein below various inventive principles and combinations thereof are advantageously employed to provide data and event handling for synchronizing independent web based application modules that may be operating locally and or distributed across an array of devices and platforms.

The platform can comprise modules that provide interactive data presentation and user controls for navigating through functionality and modifying data. These modules can be combined to form complete applications that drive an interactive user experience across an array of distributed web based devices and platforms. For example one user in a group of users may act as a presenter and can synchronize user interfaces on the independent computers of users in the group and can update data in a shared database which can be reflected to the synchronized user interfaces. Alternatively the group may be a peer to peer sharing of the database and a coordinated user experience so as to traverse generally the same user interfaces. In order to provide a dynamic synchronized and interactive user experience one of the modules can 

The modules can be light weight and pluggable in any application on the platform when the modules are not individually responsible for providing native event handling. A unified generalized and fault tolerant mechanism for distributing events locally and remotely can meet this goal.

This disclosure assumes familiarity with object oriented user interface development or object oriented and event driven user interface development.

The term module is use herein to indicate an encapsulated collection of related user interface controls and data visualization components that provide distinct well defined and independent functionality within a web based application for example a decision support system application further the module is the software which provides the execution environment for performing the client side program module.

The term local module is used herein to indicate a type of module that executes in the same runtime environment relative to other modules i.e. within the same application currently executing on the same computer furthermore local modules communicate with each other via events passed through the local event manager.

The term remote module is used herein to indicate a type of module that executes in a different runtime environment relative to other modules i.e. within applications executing on different computers or within different applications executing on the same computer furthermore remote modules communicate with each other via messages passed through the centralized data server.

The term application is used herein to indicate a collection of one or more modules organized within a module container that provide a synchronized decision process workflow.

The term runtime container is used herein to indicate the container within which an application is executed. An example of a runtime container is a standard web browser.

The term user is used herein to indicate an entity human or programmatic that interacts with modules typically within an application.

The term module container is used herein to indicate a user interface construct that provides user controls for activating displaying and deactivating hiding local modules. The user controls can be provided as components in the screen of the application program for example a pull down menu a context menu which can control the operation of the application program by clicking a predetermined position on the screen or selecting a predetermined menu item.

The term local event manager is used herein to indicate a mechanism internal to an application that passes events between local modules hence a local event manager may be associated with a module container and the local modules within the module container.

The term centralized data server is used herein to indicate a remotely accessible application programming interface API that provides data services communicates data modification events to remote modules and allows remote modules to pass events between each other.

The term data service is used herein to indicate a remotely accessible interface within a centralized data server that provides functionality allowing for the modification of data.

The term event is used herein to indicate an object generated by a module or the centralized data server that contains information describing an action that took place an event is used to communicate the action between modules or module containers.

The term user control event is used herein to indicate a type of an event that describes a user control action based on a user control within a module or module container. Examples of user control events include activate module deactivate module collapse section of module expand section of module and the like. User controls and user control events can be constructed in accordance with conventional techniques.

The term data event is used herein to indicate a type of an event that describes the modification of data within the centralized data server pursuant to a request from a user.

The term message is used herein to indicate a serialized representation of an event the format used when transmitting an event between remote modules via the centralized data server.

The term message producer is used herein to indicate a component within an application that serializes events received from the local event manager into messages and transmits the messages to the centralized data server.

The term message consumer is used herein to indicate a component within an application that de serializes messages received from the centralized data server into events and transmits the events to the local event manager.

The term event cache is used herein to indicate a non transitory storage area within a module that stores events received by a local event manager associated with a module for handling once the module has been activated within the module container.

The term event caching policy is used herein to indicate a logic rule that defines how a local event manager adds an event to an event cache associated with a particular module.

One or more embodiments discussed herein can solve problems stated above through the use of an event mechanism that distributes data events and user control events seamlessly across local and or remote modules. The mechanism can unify local event communication with remote event communication by 

Further in accordance with exemplary embodiments by using a system and method that unifies user control event communication between local and remote modules with data event communication between modules and centralized data servers a module receiving an event does not need to be aware of the location or implementation of the event s source. The receiving module can define sets of logic to handle any types of events and those logic sets can operate uniformly regardless of where the event was generated and how it was transmitted to the module.

As described above the event mechanism unifies events that are received locally or remotely so that they may be handled seamlessly by the same units of event handling logic.

As described above the event mechanism handles data events in the same manner as user control events even though data events are generated by the centralized data server as opposed to a module . This allows recipient modules to receive and handle both user control events and data events in a unified manner.

The following is a simplified description focusing on how event caching works portions described above are omitted 

As described above the event caching mechanism provides a robust way to cache events according to custom logic within a module. Whether an event is handled immediately or cached and the handled later the event is handled with the exact same logic again providing a seamless experience to the user.

The following example describes one possible embodiment herein within a web distributed application for example a decision support system sometimes referred to hereafter as DL3. Familiarity is assumed with decision support software available from Decision Lens Inc. In this example a user intends to add additional criteria to the criteria tree and to adjust the available pairwise criteria comparisons accordingly. This embodiment is simple to illustrate basic concepts.

Further reference is made to the concept of Local Modules For a single local application instance the modules Identify Criteria and Pairwise Comparison are deployed locally relative to each other i.e. the two modules are deployed within the same module container which is contained within a single application which executes within a single runtime container .

Further reference is made to the concept of Remote Modules the modules Identify Criteria and Pairwise Comparison can also be deployed in multiple distributed application instances meaning that they are remote modules i.e. one instance of Identify Criteria may be deployed in application instance A while another instance of the same module may be deployed in application instance B applications A and B execute in separate runtime containers .

Again reference is made to the concept of Application The DL3 software is an application instances of which are loaded and then executed on client computers the DL3 software can contain plural modules including Identify Criteria and Pairwise Comparison . The DL3 software application when executed among plural computers and when including a centralized data server acting as a server provides a synchronized decision process workflow with a coordinated user experience among the client computers of which Identify Criteria and Pairwise Comparison are modules discussed in this example.

Reference is made to the concept of Runtime Container Instances of the DL3 application execute within runtime containers which can be for example conventional web browser techniques such as available in commercial web browsers such as Firefox Chrome or Internet Explorer and variations and evolutions thereof.

Reference is again made to the definition of User In this embodiment the application and its modules are configured to interact with human users through standard web browsers runtime containers .

Reference is made to the concept of Module Container The application contains a module container that provides a graphical user interface with tab based navigation controls for the user to activate display and deactivate hide the modules which in this example are the Identify Criteria and Pairwise Comparison modules. Activation of either module causes the module s event cache to handle cached events. The active module is displayed so that the body of the active module covers the body of the deactivated module s leaving the tab of the deactivated module exposed while substantially the remainder of the deactivated module is covered.

Reference is made to the concept of Local Event Manager The application contains a local event manager that passes events between the local modules here the Identify Criteria and Pairwise Comparison local modules. For example when a new criterion is created within Identify Criteria an event signaling the creation of the criteria is generated by Identify Criteria and is passed to the local event manager which in turn passes the event to the local Pairwise Comparison module.

Reference is made to the concept of Centralized Data Server The application communicates with a centralized data server via data services published within a remotely accessible API. When criteria are added within the Identify Criteria local module such as via interaction with a user that module calls a data service to create the new criteria. The data service informs remote Identify Criteria and Pairwise Comparison modules that a new criterion has been added to the criteria tree via an event. When the user switches from Identify Criteria to Pairwise Comparison via controls within the module container such as by selecting the tab for the Pairwise Comparison module on the GUI an event is sent to the centralized data server which passes the event to remote module containers allowing the module containers to stay in sync.

Reference is made to the concept of Data Service The centralized data server contains data services such as 

Reference is made to the concept of Event The Identify Criteria and Pairwise Comparison modules communicate via events to inform each other of new criteria an example of a data event or module activations an example of a user control event within the module containers.

Further reference is made to the concept of Data Event When a new criterion is created within Identify Criteria the centralized data server dispatches a data event informing remote modules other Identify Criteria and Pairwise Comparison modules of the new criteria.

Further reference is made to the concept of User Control Event When a user switches from Identify Criteria to Pairwise Comparison or vice versa via controls within the module container the centralized data server dispatches a user control event to remote module containers allowing them to perform the same module activation and stay in sync with each other.

Reference is made to the concept of Message When a data event occurs such as when a new criterion is created within Identify Criteria such as when the local module Identity Criteria interacts with the user the local module generates an event and passes the event to the local event manager. The local event manager passes the event to a message producer which serializes the event into a message for distribution via the centralized data server.

Reference is now made to the concept of Message Producer The message producer receives events signaling new or revised or updated date in this example the creation of criteria and serializes them into messages for distribution via the centralized data server.

Reference is made to the concept of Message Consumer When the centralized data server distributes messages about data e.g. criteria messages serialized events other applications receive the messages via their message consumers. The message consumers de serialize the messages back into data events e.g. data events indicating particularly criteria events and the message consumers transmit the events to the local event manager.

Reference is made to the concept of Event Cache When a user is manipulating data that is to be stored in the centralized data server in this example creating new criteria the active module within the module container is Identify Criteria . This means that the local module Pairwise Comparison is inactive. When the local module Pairwise Comparison receives an event while inactive the event is captured by the local module s event cache for handling once the local module has been activated within the module container. Once active Pairwise Comparison will handle the event by updating the displayed criteria comparisons to reflect the new criteria.

Reference is now made to the concept of the Event Caching Policy Whenever a local module in this example the module Pairwise Comparison receives a criterion event while inactive the event cache can perform an event caching policy to determine which events to scan for in the event cache what to do with the located events in the event cache and what to do with the received event. For example for a criterion event the event caching policy performs the following logic 

In this example the older criteria events are considered to be redundant and are deleted so that they are not executed when the local module Pairwise Comparison is activated. If the duplicate events were not deleted the local module Pairwise Comparison would perform the same logic to update the displayed comparisons repeatedly which is not necessary. In essence the new criterion event replaces all of the previous criteria events since only the most recent criteria is used. In another example older events of the same type are considered to aggregate and are retained so as to be activated at the appropriate time such as added participants . In yet another example older events of the same type are considered to toggle so that of the events of the same type only the most recent event is retained such as a same participant logon logoff . That is events can be assigned a type which is stored together with the event in the cache and an event caching policy can determine what to do with located events in the cache depending on the event type in the cache and the new event. Other variations of event caching policies can be created and added.

The following describes how a user control event is generated and handled within the context of this example in connection with the sequence illustrated in order from to .

1. Referring now to a diagram illustrating a user control event in an independent application to be synchronized with other applications will be discussed and described. In a module container is displayed on a user interface to a user . The module container includes tabs each associated with a different local module such as Identify criteria and pairwise comparisons . In this example the local module Identify Criteria is active and Pairise Comparison is inactive. The user interface displays the active local module here Identify Criteria to the user in the active content area of the browser and information is updated in the active local module and the user can interact with the active local module all according to known techniques. The user clicks the tab associated with the Pairwise Comparison module to activate the inactive local module Pairwise Comparison within the module container .

2. In response to the user selecting the inactive module Pairwise Comparison the module container generates a user control event that represents and describes the activation of the Pairwise Comparison module.

3. Referring now to a diagram illustrating a local module passing a user control event to a local event manager will be discussed and described. illustrates a computer active local module corresponding to Identify Criteria in inactive local module corresponding to Pairwise Comparison in and user control events and local event manager . A module container contains the illustrated local modules . The module container passes the user control event to the local event manager step . the user control event represents the activation of the Pairwise Comparison module.

4. The local event manager dispatches the user control event to all other modules within the module container step . when the local event manager receives the user control event.

5. Referring now to a diagram illustrating a local module being activated will be discussed and described. illustrates a module container which contains a local module Identify Criteria and Pairwise Comparisons . In this example initially the Identify Criteria module is active and the Pairwise Comparisons module is inactive. Other local modules are omitted from the illustration for ease of discussion. The Pairwise Comparison module and the Identify Criteria module each receive the user control event which instructs to activate a local module namely Pairwise Comparisons . Each module reads the event . The Identify Criteria module deactivates itself when it receives this event and the Pairwise Comparison module activates itself when it receives this event. Moreover the module that is activated due to this event in this example Pairwise Comparisons causes the event cache of the local module to handle all of its cached events.

6. All other modules such as Identify Criteria deactivate themselves when the event is received indicating to activate a different module. Also all of the modules that are deactivated by the user control event each cause their event caches to capture incoming events by storing them in the event cache per local module instead of handling the received events.

7. Referring now to a diagram illustrating a local event manager passing an event ultimately as a message to remote applications will be discussed and described. In this figure there is illustrated a computer includes an active local module Pairwise Comparison in the module container a local event manager and a message producer remote computers each include a message consumer configured to reciprocally receive and transmit messages regarding events in a same format as the local event manager and each including module containers and modules denominated as remote modules since they are remote to the local modules and a centralized data server that receives and transmits messages regarding events and stores shared data shared among the remote and local modules. As previously described the user control event activate Pairwise Comparison is sent 4.0 to the local event manager . The local event manager then passes . the event to the message producer .

8. The message producer serializes . the local event that is the module activation event into a message when the message producer receives an event. Any appropriate technique may be used to serialize the event into a message for example embedding the event into a communication packet automatically without user intervention.

10. When the centralized data server receives the message with the event the centralized data server transmits . the message to message consumers within other remote applications that need to stay synchronized with the originating application i.e. the application containing the module container that generated the module activation event .

11. Referring now to a diagram illustrating a remote application that receives the message will be discussed and described. In a computer includes a message consumer a local event manager and a module container . The module container includes local modules . The term local is used herein although note that this module container is remote with respect to the module that originated the event e.g. . The message consumer receives the message and de serializes . the received message into a user control event that represents the activation of the Pairwise Comparison module. The user control event has the same form before being serialized and after being de serialized so that the local event manager does not differentiate between events which were originated locally and events which were originated remotely.

12. When the message is de serialized into a user control event the message consumer transmits . the event to the local event manager .

13. When the local event manager receives the user control event the local event manager dispatches . the event to the module container .

14. Referring now to a diagram illustrating the remote application now synchronized with the originating local application will be discussed and described. illustrates a module container that is remote from the originating local application the module container is a copy of the originating local application or at least contains copies of some of the modules in the originating local application although the modules which are remote from the originating application are executing in a different run time environment and perhaps on a different computer and hence can be asynchronous until re coordinated as described herein. In this example the module container contains an active local module Identify Criteria and an inactive local module Pairwise Comparisons . The modules in the module container each receives . . the user control event activate Pairwise Comparison and each handles the event causing the activation of the local Pairwise Comparison module and the deactivation of the local Identify Criteria module . This keeps the remote application generally synchronized with the originating application that is the local and remote modules behave as if controlled by the same user at the originating application ultimately using the same handling of the event whether or not the originating application is local or remote.

The following describes how a data event is generated and handled within the context of this example in connection the sequence illustrated in order from to .

1. Referring now to a diagram illustrating a data manipulation in an independent application to be synchronized with other applications will be discussed and described. illustrates a user a local application local modules within the local application and a data server with a database and data services . The user interacts with the local application to add . a new criterion to the criteria tree via user interface controls provided within the Identify Criteria module .

2. When the local module attempts to operate on the data which is shared among users and hence is stored at the database the Identify Criteria module calls . the remote createCriteria data service within the centralized data server to add the new criteria. Conventional techniques can be used to provide the data services and call to the data services.

3. Referring now to a diagram illustrating the data manipulation being served at a centralized data server will be discussed and described. illustrates the data server a database within the data server and data services within the data server one of which is a message data service . The centralized data server adds the new criteria to the database . in accordance with standard database techniques when the data server receives the call instructing the data server with the data manipulation for the database .

4. Also once the data server has performed the requested data manipulation e.g. create criteria the centralized data server informs . the message data service to generate a message describing the new criteria. The message data service will generate the message describing the new criteria to all of the remote applications. Optionally the remote applications can indicate to the message data service that they are interested in the data so that the message data service sends only the subscribed remote applications the message.

5. Referring now to a diagram illustrating a data message to a remote application will be discussed and described. This figure illustrates a centralized data server and a computer . The computer includes a message consumer a local event manager and local modules . The centralized data server transmits . the message regarding the data event to message consumers associated with remote applications that need to keep their criteria data synchronized with the originating application.

6. When the message consumer receives the message with the data information the message consumer de serializes . the message into a data event describing the new criteria. The data event is then sent to the local event manager which forwards the data event to the local modules .

7. Referring now to a diagram illustrating a data message being received and a data event being generated will be discussed and described. illustrates a module container with an inactive local module and an active local module Identify Criteria and Pairwise Comparisons respectively. When the data event criteria updated is received by the local modules the criteria event causes the following actions at the local modules 

Note that when a module is inactive the module s event cache stores the event for handling at the time that the module is activated instead of immediately performing the action.

The following describes how event caching works within the context of this example in connection with the sequence of events illustrated in order in illustrating event caching to illustrating performing the action for the event . Here the event can be a user control event or a data event.

1. As a starting point for this discussion in step 7 immediately above assume the Pairwise Comparison module is inactive meaning the module s event cache will store the received event so that it is handled immediately once the module is activated.

2. Referring now to a first diagram illustrating event caching will be discussed and described. illustrates a local module Pairwise Comparisons with an event cache that stores events which are to be acted on by the local module . Here the local module is inactive. The Pairwise Comparison module receives a data event e.g. criteria have been updated and executes its event cache policies and determines whether the module is inactive .. Because the module is inactive it is determined to cache the event in the module s event cache for later handling.

3. When the module determines to cache the event the event cache policy of the local module looks through the list of cached events for the local module to find other events of a type also representing newly added criteria. Any matching events that is of the same type are deleted . from the event cache for the local module.

4. The local module then adds . the event to the event cache when it is determined that the event is to be cached instead of performing the usual action for the event.

5. Referring now to a second diagram illustrating event caching will be discussed and described. illustrates a local module Pairwise Comparisons with an event cache the event cache is storing one or more events including the data event criteria have been updated and the local module in this example is inactive. When the Pairwise Comparison module is activated . via a user control event i.e. the user clicks the Pairwise Comparison tab in the module container the module will receive the user control event that activates the module when the module is activated by the user control event the module handles . all events in its per module event cache including the criteria event.

6. When the criteria event is handled the Pairwise Comparison module updates itself to display newly derived comparisons . . The action performed on an event is the same without regard to whether the event is being handled from the cache or the event is being handled without being cached.

Referring now to a block diagram illustrating portions of an exemplary computer constructed for use in being synchronized with plural applications will be discussed and described. The computer may include one or more controllers an i o interface for communication with an external network a display interface to a display and or a input interface to a user input device such as a keypad . The controller can include a processor and a memory .

The processor may comprise one or more microprocessors and or one or more digital signal processors. The memory may be coupled to the processor and may comprise a read only memory ROM a random access memory RAM a programmable ROM PROM and or an electrically erasable read only memory EEPROM . The memory may include multiple memory locations for storing among other things an operating system data and variables for programs executed by the processor computer programs for causing the processor to operate in connection with various functions such as an application a message producer unit a message consumer unit a local event manager unit and or other processing and a database for other information used by the processor . The computer programs may be stored for example in ROM or PROM and may direct the processor in controlling the operation of the computer .

The computer can communicate over the i o interface to external devices such as the data server which is reached over the network . The network can be any computer or communications network appropriate for communicating messages between the data server and the computer and for communication messages between the computer and other computers not illustrated which are also running the application and are mutually configured to communicate with each other so that they can stay synchronized with the local application .

The user may invoke functions accessible through the user input device such as the keyboard . The user input device may comprise one or more of various known input devices such as a keyboard a computer mouse a touchpad a touch screen a trackball a known voting device and or a keypad. The display may present information to the user by way of a conventional liquid crystal display LCD or other visual display and or by way of a conventional audible device e.g. a speaker not illustrated for playing out audible messages.

Responsive to signaling from the user input device such as the keyboard in accordance with instructions stored in memory or automatically upon receipt of certain information via the i o interface the processor may direct the execution of the stored programs.

The processor may be programmed with an application . The application can be programmed to include one or more local modules . The local modules each can be programmed to determine whether or not to cache the event to act on the event and to include an event cache .

The processor may be programmed with a message producer unit . The message producer unit is internal to its module container . That is the message producer unit performs its functions for the modules that are provided within the module container but not for modules within a different module container. The message producer unit can communicate with the data server over the i o interface . The message producer unit is programmed to transmit an event to the data server as a message when the message producer unit receives the event. The message communicates the event to the other applications outside the module container that need to stay synchronized with the local modules .

The processor may be programmed with a message consumer unit . The message consumer unit is internal to its module container . That is the message consumer unit performs its functions for the modules that are provided within the module container . The message consumer unit can communicate with the data server over the i o interface especially by receiving messages from the data server . The message consumer unit can transmit a remote event which it receives to the local event manager when the message consumer unit receives the message which is configured to communicate a remote event from the data server.

The processor may be programmed with a local event manager unit . The local event manager unit also is internal to its module container . That is the local event manager unit performs its functions for the modules that are provided within the module container The local event manager unit can dispatch an event to all of the local modules within the same application of the same module container also the local event manager unit passes the event to the message producer unit the dispatching and the passing occur when the event is received by the local event manager unit from one of the local modules executing within the module container or from the module container itself where the event represents a user control action within the one of the local modules . The local event manager unit dispatches a local event to the local modules when a remote event is received from the message consumer unit the remote event having been generated by one of other applications outside the module container that need to stay synchronized with the local modules such as on another computer not illustrated .

Each of the local modules in the processor may be programmed to determine whether or not to cache the event. For example the processor can determine to not cache the event for the local module when the local module is active and to cache the event when the local module is not active when the local module receives the event from the local event manager unit .

Each of the local modules in the processor may be programmed to act on the event. The action which is taken depends on the event. However the action which is taken is the same whether the event has been retrieved from the event cache for the local module or is being acted on without being stored in the event cache . Notwithstanding the different local modules may take actions for the event which are different from other local modules as in the above example.

Each of the local modules may be programmed with separate storage for an event cache . The event cache is separate and specific for each of the local modules and each event cache stores events for only its associated local module .

The above discussed memory and processor can function as computer readable medium and or the computer can include one or more disk drives not illustrated or memory data storage devices as the computer readable medium. Typically the disks might be one or more of the following and variations and evolutions thereof a hard disk drive a floppy disk drive a CD ROM or digital video disk an optical disk. The number and type of drives may vary typically with different computer configurations. Disk drives may be options and for space consideration may be omitted from the computer system used in conjunction with the processes described herein. A typical memory data storage device is a flash memory data storage device or flash memory card sometimes referred to as a memory stick or flash drive some of which can incorporate a USB connection to the computer. The computer may also include a CD ROM reader and CD recorder which can be interconnected by a bus along with other peripheral devices supported by the bus structure and protocol not illustrated . The bus can serve as the main information highway interconnecting other components of the computer. A disk controller not illustrated can interface disk drives to the system bus. The disks and flash memory storage may be internal or external to the computer.

It should be understood that is described in connection with logical groupings of functions or resources. One or more of these logical groupings may be omitted from one or more embodiments for example and or performed on a different processor. Likewise functions may be grouped differently combined or augmented without parting from the scope discussed herein. Similarly the present description may describe various databases or collections of data and information. One or more groupings of the data or information may be omitted distributed combined augmented or provided locally and or remotely without departing from the scope discussed herein.

Referring now to and being a continuation of a sequence diagram illustrating a user control event will be discussed and described. The following describes how a user control event is generated and handled 

 1 A user performs an action via user interface controls within a module or module container where the action is predefined as a user control action.

 2 In response to the user control action the module or module container automatically without further user manual input generates a user control event that represents and describes what the user did.

 4 Upon receiving the event without further user manual input the local event manager dispatches the event to all other interested local modules .

 5 Upon receiving the event each of the local modules executes event cache policies to determine whether to immediately handle an event or to store it in the event cache.

 6 The local modules that are interested in the event either cache the event or handle the event immediately and perform their own pre determined actions according to the event.

 7 Furthermore upon receiving the event without further user manual input the local event manager passes the event to the message producer .

 9 After serializing the event and automatically without further user input the message producer transmits the message to the centralized data server .

 10 After receiving the event the centralized data server transmits the message to message consumers within other remote applications that need to stay synchronized with the source application which has the module or module container that originated the event.

 11 The message consumer within each of the other remote applications receives the message from the data server and the message consumer de serializes the received message into a user control event.

 12 After de serializing the received message into the user control event the message consumer transmits the event to the local event manager this is the local event manager at the remote application and is not the local event manager corresponding to the module or module container that originated the event.

 13 The local event manager for the remote application dispatches the event to all other interested local modules or module container just as in steps 4 and 5 above except that this local event manager is remote from where the event originated.

 14 The local modules or module container handle the event as in step 6 above except that this local module or module container is remote from where the event originated.

As described above the event mechanism unifies events that are received locally or remotely so that they may be handled seamlessly by the same units of event handling logic.

Referring now to a sequence diagram illustrating a data event will be discussed and described. The following describes how a data event is generated and handled although details are omitted which are discussed elsewhere herein 

 1 A user performs an action via user interface controls within a module or module container that results in the modification of data i.e. a data event is generated by the user.

 2 The module or module container calls a remote data service within a centralized data server to modify the data ex the module calls a data service to add the brainstorm item according to known techniques.

 3 The centralized data server modifies the data in response to the call to the data service in accordance with known techniques.

 4 The centralized data server generates a message describing the data that was modified when the data has been modified.

 5 The centralized data server transmits the message that was generated to message consumers within remote applications that need to stay synchronized with the originating application.

 6 The message consumer at each of the remote applications receives the message and de serializes it into a data event.

 7 The data event is transmitted from the message consumer to the local event manager to be handled by the local event manager and local modules just as in steps 11 to 14 above except that the event is a data event .

 8 The data event is dispatched from the local event manager to the local modules or module containers .

 9 Then the local modules determine whether to immediately handle the data event or store the data event for later handling.

As described above the event mechanism handles data events in the same manner as user control events even though data events are generated by the centralized data server as opposed to a module . This allows recipient modules to receive and handle both user control events and data events in a unified manner.

Referring now to a sequence diagram illustrating event caching with a data event or a user control event will be discussed and described. Many of the details have already been discussed and therefore are omitted. The following is a simplified description focusing on how event caching works for user control events and data events 

 1 An event user control or data is transmitted from a module or module container and received by a local event manager .

 2 The local event manager dispatches the event to all other local modules . One or more of the local modules initially may be active at the time it receives the event e.g. local module . Other local modules are not active at the time it receives the event.

 3 Each of the local modules executes event cache policies to determine whether to immediately handle an event or to store it in the event cache regardless of whether the local module is active or inactive.

 5 If the determination is that that the local module should cache the event the local module then determines whether any other events in the event cache are affected by the new event and overrides affected old events. 6 The logic then adds the event to the event cache for the local module .

 5.5 If the determination is that the local module should handle the event immediately instead of caching the local module does so using the usual instructions for handling the event.

 7 Eventually a user control event occurs at the module or module container that triggers the module to handle all events in the event cache for the local module. The user control event is dispatched from the module or module container to the local event manager . 7.5 The local event manager dispatches the event to all local modules .

 8 The local module determines to immediately handle the event instead of storing for later and iterates through all events in the event cache handling them with the same instructions that are used when the event is handled immediately. The other local module determines to store the event for later repeating steps 3 4 and 5 above for this local module .

Referring now to to flow charts illustrating a procedure for synchronized plural applications will be discussed and described. The procedure can advantageously be implemented on for example a processor of a controller described in connection with see below or other apparatus appropriately arranged.

Referring now to a local event manager process will be discussed and described. The local event manager process can receive an event . The process then determines whether the event is a user control event. If it is a local user control event then the process dispatches the user control event to a local module process and passes the event to a message produces process. However if the event is not a local user control event that is the event is a remote event or a data event then the process dispatches the remote event or the data event as a local event to the local modules. The local event manager process then loops back to receive and process the next event.

Referring now to a message producer process will be discussed and described. The message producer process can receive an event. Then the message producer process can transmit the event to a data server for further handling. The message producer process then loops back to receive and process the next event.

Referring now to a message consumer process will be discussed and described. The message consumer process can receive an event. The event will be a remote event. Then the message consumer process can transmit the event to the local event manager. The message consumer process then loops back to receive and process the next event.

Referring now to a local module process will be discussed and described. The local module can include additional processing for example to create a user interface and to interact with a user or the like. However the additional processing is omitted from this discussion to avoid obscuring the invention.

The local module process can receive an event. Then the local module process determines whether to cache the event. If the local module process determines to not cache the event the local module process acts on the received event and on all other events which are in the cache for the local module. Typically the determination whether to cache the event is based on whether the local module process is in an active mode and the active mode can be switched to inactive mode by a predetermined event.

However if the local module process determines to cache the event the local module process reviews the event cache for cached events to be evicted based on the combination of the received event and the cached event those events are marked to be evicted. Then the local module process evicts the marked events from the cache for the local module process events which are not marked to be evicted are retained in the cache for the local module process. Then the local module process stores the received event in the cache.

Note that the local module process will eventually act on events which are stored in the cache which have not been evicted when an events is received that the local module process determines to not cache. In this way time consuming processing of events and the attendant delays which can be apparent to the user can be avoided until the local module process becomes active. Furthermore processing of events which may be redundant or even unnecessary due to subsequent events can be avoided further reducing unnecessary consumption of computing resources.

Referring now to a block diagram illustrating portions of a second embodiment of a computer constructed for use in being synchronized with plural applications will be discussed and described. The second embodiment has the same elements illustrated as the computer in except that reference numbers begin with 19 . . . instead of 13 . . . for example computer is computer . In a detailed illustration of contents of 1st local module and 2nd local module are not illustrated due to lack of space. The elements which were discussed in connection with may be omitted from the following discussion so as to avoid obscuring the discussion.

In comparison to it will be noted that shows a 1st application illustrated in parts in this figure are omitted from the illustration and additionally shows 2nd application . The 2nd application can include for example a 1st module container a 2nd module container message producer unit message consumer unit and local event manager unit .

The 1st application 1st local module its event cache 2nd local module its event cache message producer unit message consumer unit and local event manager unit can have the same description respectively as the 1st application 1st module container 1st local module its event cache 2nd local module its event cache message producer unit message consumer unit and local event manager unit of .

As illustrated in the processor also may be programmed with the 2nd application . The 2nd application contains 1st module container message producer unit message consumer unit and local event manager unit . The description of the 2nd application is the same as the description of the 1st application. That is the 2nd application can include a 1st local module and a 2nd local module . The 1st local module and the 2nd local module each can be programmed individually to determine to cache or not cache the event and to act on the event. The 1st local module and the 2nd local module each can include an event cache . The 2nd application also can include the message producer unit the message consumer unit and the local event manager unit which communicate to the data server and to modules within their own application that is to the 1st local module and the 2nd local module within the 2nd application .

In this example embodiment the 1st application and the 2nd application are considered to be remote with respect to each other despite being on the same controller . Accordingly events that are passed between the 1st application and the 2nd application are considered to be remote events and not local events.

It will be appreciated that these simple modules are constructed to provide a robust event control mechanism which can coordinate remote users so as to provide a user experience which appears to be synchronized. Moreover because the modules are simple they can be easily used to adapt architectures which are not event based so as to provide interactive collaboration amongst plural different users. Furthermore the relationship between the computers of the users is essentially a peer to peer type relationship which merely uses the server to communicate between peers.

It should be noted that the term computer or computer system may be used interchangeably herein. Each of these terms is used to denote a device ordinarily used by one user at a time. However the user of the term computer is further intended to encompass devices such as are ordinarily referred to as a personal digital assistant personal assignment pad personal computer cellular handset or device laptop mainframe computer tablet computer or equivalents thereof provided such units are arranged and constructed for operation in connection with a user interface.

Furthermore the communication and computer networks of interest include those that transmit information in packets for example those known as packet switching networks that transmit data in the form of packets where messages can be divided into packets before transmission the packets are transmitted and the packets are routed over network infrastructure devices to a destination where the packets are recompiled into the message. Such networks include by way of example the Internet intranets local area networks LAN wireless LANs WLAN wide area networks WAN and others. Protocols supporting communication networks that utilize packets include one or more of various networking protocols such as TCP IP Transmission Control Protocol Internet Protocol Ethernet X.25 Frame Relay ATM Asynchronous Transfer Mode IEEE 802.11 UDP UP Universal Datagram Protocol Universal Protocol IPX SPX Inter Packet Exchange Sequential Packet Exchange Net BIOS Network Basic Input Output System GPRS general packet radio service I mode and other wireless application protocols and or other protocol structures and variants and evolutions thereof. Such networks can provide wireless communications capability and or utilize wireline connections such as cable and or a connector or similar.

This disclosure is intended to explain how to fashion and use various embodiments in accordance with the invention rather than to limit the true intended and fair scope and spirit thereof. The invention is defined solely by the appended claims as they may be amended during the pendency of this application for patent and all equivalents thereof. The foregoing description is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications or variations are possible in light of the above teachings. The embodiment s was chosen and described to provide the best illustration of the principles of the invention and its practical application and to enable one of ordinary skill in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variations are within the scope of the invention as determined by the appended claims as may be amended during the pendency of this application for patent and all equivalents thereof when interpreted in accordance with the breadth to which they are fairly legally and equitably entitled.

