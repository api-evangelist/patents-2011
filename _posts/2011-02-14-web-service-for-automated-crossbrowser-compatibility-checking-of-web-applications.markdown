---

title: Web service for automated cross-browser compatibility checking of web applications
abstract: One embodiment presents a user interface to a first user, the user interface being configured to enable the first user to provide user input that: specifies a first web application, and a behavior exploration specification, a plurality of web browsers, and a set of comparison rules for the first web application; requests a plurality of models to be constructed with respect to the web browsers for the first web application based on the behavior exploration specification; requests the models of the first web application to be compared with each other based on the set of comparison rules; and requests one or more results of the comparison performed on the models of the first web application to be presented; and in response to each user input received from the first user, performs one or more operations for the first user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208054&OS=09208054&RS=09208054
owner: Fujitsu Limited
number: 09208054
owner_city: Kawasaki-shi
owner_country: JP
publication_date: 20110214
---
The present disclosure generally relates to determining differences in an event driven application accessed in different client tier environments and more specifically relates to a web based service for checking compatibility of web applications accessed from different types of web browsers.

Event driven applications typically may be accessed in different client tier environments. However in many cases a first client tier environment may provide a different end user experience of the event driven application than a second client tier environment. For example when a web application is accessed through different types of web browsers the users of the web application may have different experiences with different types of web browsers.

A web application generally references to an application that is accessed over a computer network such as the Internet or an intranet. Typically a web application resides and executes on a server and each user may access the web application through a web browser residing and executing on a client. The user interface of the web application is presented to each user as for example a number of web pages loaded in the web browser. A user may provide inputs to the web application through specific web pages. Similarly outputs of the web application may be presented to the user through specific web pages. Currently there exist many different types of web browsers such as Microsoft Internet Explorer Mozilla Firefox or Google Chrome. Different users of a web application may choose to access the web application through different types of web browsers or a specific user of the web application may choose to access the web application through different types of web browsers at different times. It is thus desirable that a web application has the same look and feel layout format and behavior regardless of through which type of web browser a user accesses the web application. A user may access a web application through Microsoft Internet Explorer Mozilla Firefox Google Chrome or any other types of web browsers and the user should have essentially the same experience with all of these web browsers.

To ensure that a web application functions consistently across different types of web browsers particular embodiments provide a service for automatically checking compatibilities and consistencies of web applications accessed through different types of web browsers a cross browser compatibility checking service for web applications. In particular embodiments the service is a web based service. In other words the web based service is itself a web application residing and executing on a server. Each user of the service may access and use the service through a web browser residing and executing on a client associated with the user.

In particular embodiments a cross browser compatibility checking service may support any number of users. Multiple users may access and use the service concurrently or at different times. In particular embodiments each user may access and use the service to perform cross browser compatibility checking for any number of web applications. In particular embodiments for each user the data and operations performed in connection with a specific instance of a cross browser check initiated by the user are organized into a single session. In other words for each user there is a session corresponding to each instance of a cross browser compatibility check that the user initiates. Such an instance would be specific to the particular user initiating it the particular client the user initiates it from and the specific time it is initiated at. Thus the data and operations performed in connection with cross browser checking are organized on a per user per session basis.

In particular embodiments as the cross browser compatibility checking service is a web based service that resides and executes on a server all data including application data and user data are stored on the server side e.g. in a data storage accessible to the web based cross browser compatibility checking service . In particular embodiments the user data are stored on the server side on a per user per session basis for each user of the service.

In particular embodiments the cross browser compatibility checking service includes three phases model extraction equivalence checking and error display and diagnosis. illustrates the three phases of an example cross browser compatibility checking service for web applications. In particular embodiments each session for checking a web application for cross browser compatibility includes these three phases. That is to completely perform cross browser compatibility checking for a specific web application the service goes through these three phases at least once for the web application. In particular embodiments during each phase the service may receive some inputs from a user perform some operations or present some outputs to the user.

In particular embodiments during the model extraction phase a user may specify a web application to be tested and checked for cross browser compatibility and identify a list of web browsers to be checked. In particular embodiments the web application to be tested may be specified using its corresponding URL Uniform Resource Locator . Thus the user does not need to upload the source code of the web application to be tested to the cross browser compatibility checking service. Instead as long as the web application has been deployed or is executable the cross browser compatibility checking service may access the web application using its URL. In particular embodiments the cross browser compatibility checking service may present the user with a default list of currently existing web browsers and the user may select from the default list the list of web browsers to be checked. Alternatively in particular embodiments the user may identify a list of web browsers to be checked and provide the list to the cross browser compatibility checking service. In particular embodiments the user may optionally specify additional information if available that may be used for constructing models of the web application. For example the user may specify a behavior exploration specification pertaining to the web application which may contain guidelines on how the web application s behavior should be explored and hence implicitly guidelines on the specific subset of the behavior of the web application that the models should represent. As another example the user may specify resource constraints to be applied to the web application or its behavior.

In particular embodiments for each web browser identified by the user the cross browser compatibility checking service may construct a model of the web application with respect to that web browser. The model may represent the behavior of the web application as it is accessed through that specific web browser. In particular embodiments for each web browser identified by the user the service may automatically and dynamically execute the web application and extract a model of the observed behavior for the web browser. If the user has provided behavior exploration specification of the web application or resource constrains applied to the web application the models are constructed based on the user provided behavior exploration specification or resource constrains.

Given a web application and a list of web browsers in particular embodiments to construct a model of the web application with respect to each web browser the cross browser compatibility checking service automatically and dynamically executes the given web application under each browser environment and captures and stores the observed behavior as a finite state machine navigation model for that browser. The crawling is done in a substantially identical fashion for each browser to simulate exactly the same set of potential user interaction sequences with the web application under each browser environment. In particular embodiments for each specific web browser the navigation model produced by crawling the web application is a finite state machine. The states represent the screens observed by the end user on the web browser and the transitions represent user actions e.g. a button click that cause the web application to transition from one screen to another. Each transition is labeled with the user action that caused it. Each state screen is represented by its underlying programmatic representation as viewed by the web browser as well as a screen shot i.e. an image of the screen as rendered in the particular browser.

In particular embodiments for the purpose of meaningfully and efficiently comparing multiple navigation models e.g. models constructed with respect to multiple web browsers it may be useful to view and analyze each navigation model hierarchically. The top level is a graph representation of the finite state machine with the states screens represented as unnamed vertices. This graph may be referred to as the state graph. At the second level is the full programmatic representation of each state screen which may be referred to as the screen model of the state. Conceptually the state graph captures the set of traces alternating sequences of user actions and screen transitions without referring to the details of each screen whereas the screen model of each screen captures precisely this detail but without any knowledge of transitions leading up to or out of the screen. In particular embodiments a screen model is essentially an abstract version of the DOM tree of a given screen displayed on a web browser. The model may be generalized to include and compare other aspects of the client side state such as JavaScript variable values or CSS Cascading Style Sheets properties or a screen shot image of the screen as rendered in the specific browser. illustrates an example model of a web application which includes a state graph and a screen model.

In particular embodiments during the equivalence checking phase the user may specify a set of comparison rules to be used for comparing the models of the web application which have been constructed for the individual web browsers during the model extraction phase. For example one comparison rule may indicate what to do with white spaces e.g. whether a difference in white spaces between two models is considered an actual difference between the two corresponding browsers or should be ignored and another comparison rule may indicate what to do with upper and lower spellings of a word e.g. whether the upper case of a word is considered the same as or different from the lower case of the same word . In particular embodiments a default set of comparison rules may be presented to the user from which the user may select the set of comparison rules. If the user does not select a set of comparison rules the default set of comparison rules may be used. One or more of the comparison rules may be configurable based on user input and user data. For example a particular comparison rule may provide for ignoring differences with respect specific HTML tags or specific attributes of specific HTML tags when comparing two screen models from different browsers and the user may configure this rule by specifying which tags or which attributes to ignore in the comparison.

In particular embodiments the cross browser compatibility checking service may compare the models of the web application with each other based on the set of comparison rules to determine substantial differences if any among the models. In particular embodiments the service may compare each pair of models based on the set of comparison rules to determine if there are any substantial differences between the two models. In particular embodiments the differences between two models of the web application may include state level also referred to as screen level differences or trace level differences.

In particular embodiments the equivalence check of the navigation models constructed during the model extraction phase mirrors the hierarchical view of them. In particular embodiments the comparison is made between each pair of models. Given two models the cross browser compatibility checking service first extracts the two state graph models from the respective navigation models and compares them at a trace level. This provides a set of trace level differences i.e. a set of traces that exist in one model and not in the other and vice versa between the two models. It also pairs up each screen in the first model with its most likely counter part in the second model. Next candidate matching pairs of screens produced by the first step are compared in terms of their underlying DOM representations. This unearths detailed state level differences whose effects may be confined to the individual screen or may play into trace level differences. In particular embodiments the equivalence checking process attempts to prune out some of the provably benign differences.

In particular embodiments during the error display and diagnosis phase the results of the comparison are displayed to the user so that the user may determine whether the web application is compatible between different types of web browsers. In particular embodiments for each pair of models that have substantial differences the cross browser compatibility checking service may display to the user the state level differences or the trace level differences. illustrates example trace level differences between two models of an example web application. illustrates example state level differences between two models of an example web application.

A system for determining differesces in a web application accessed in different types of web browsers is disclosed in U.S. patent application Ser. No. 12 723 568 filed in 12 Mar. 2010 entitled Determining Differences in an Event Driven Application Accessed in Different Client Tier Environments . In particular embodiments the cross browser compatibility checking service disclosed herein incorporates various features of the system disclosed in U.S. patent application Ser. No. 12 723 568.

In particular embodiments although some phases may require results from previous phases each phase may be executed independently of the other phases and at different times. For example in order to perform model comparison during the equivalence checking phase the models of a web application need to have been constructed during the model extraction phase. However a user may choose to have the models of the web application constructed on one day save the session with the models and return on a later day to have the models compared. As long as the models of the web application have been constructed before they are compared the user does not have to choose to execute the model extraction phase and the equivalence checking phase in a single sitting of interaction with the cross browser compatibility checking service. As another example in order to display the differences between two models of the web application during the error display and diagnosis phase the state level and trace level differences between the two models need to have been determined during the equivalence checking phase. However a user may choose to have the models of the web application compared on one day save the session with the results of the comparison and return on a later day to have the differences displayed.

In particular embodiments at each phase the user may have the following options 1 make changes to the inputs provided during that phase or repeat the operations of that phase 2 go back to a previous phase to repeat the operations of the previous phase or 3 proceed forward to the next phase. For example the user may specify a first set of comparison rules and have the models of the web application compared based on the first set of comparison rules during the equivalence checking phase and view the results of the first comparison during the error display and diagnosis phase. Then the user may go back to the equivalence checking phase specify a second set of comparison rules and have the models compared based on the second set of comparison rules and go to the error display and diagnosis phase again to view the results of the second comparison. The user may repeat the process as needed.

In particular embodiments at each phase the user may choose to save the current session. In this case all available user data associated with the current session are saved at server side in connection with the user and with the current session. For example the URL of the web application the identifiers of the web browsers specified by the user the models that have been constructed if any the set of comparison rules if any and results of the comparisons performed on the models if any may be saved with the current session for the user. Subsequently the user may come back to a saved session and resume and continue with the cross browser compatibility checking process.

In particular embodiments the cross browser compatibility checking service has a user interface through which a user of the service may provide inputs to the service and outputs of the service may be presented to the user. In particular embodiments the service is a web based service e.g. a web application residing and executing on a server and its user interface may include any number of web pages that may be loaded into a web browser residing and executing on a client. Each user of the service may interact with the web based service via these web pages.

In particular embodiments the cross browser compatibility checking service may maintain an account for each of its users. All data resulted from a particular user are stored in connection with that user. In particular embodiments for a specific user the user may use the service to check cross browser compatibility for any number of web applications. Each instance of a cross browser compatibility checking interaction initiated by a particular user from a particular client at a particular time has its own work session and all data resulting from a particular session are stored in connection with that session. Thus all data are organized on a per user per session basis.

In particular embodiments to begin using the cross browser compatibility checking service a user may load the URL of the service in his web browser. By doing so the user is presented with a login screen as illustrated in STEP . The user may be required to provide a correct combination of login name and password or some other authorization information in order to log into his account and use the service. In particular embodiments if the user is able to provide the correct combination of login name and password to log into his account the user is directed to his user home as illustrated in STEP . Note that each user has its own user home and thus after successfully logging into his account each user is directed to his own user home. From the user home the user has many options on how to proceed forward.

First as explained before a user may have any number of sessions corresponding to checking cross browser compatibility of any number of web applications. These sessions may be saved retrieved modified deleted copied and so on. All previously saved sessions may be stored for the user on server side. In particular embodiments from the user home the user may choose to access a previous sessions list to view all the sessions the user currently has as illustrated in STEP . From this list the user may select copy or delete any one of the previously saved session. Suppose that the user selects one of the previously saved sessions the selected session in the previous sessions list may be indicated to the user as illustrated in STEP . The selected session may be loaded for the user so that the user may resume work flow of the selected session e.g. continue the session from where the user has left off previously or make modifications to some parts of the session . For example suppose the user selects a previously saved session and when the user has saved this session previously the models of the web application have been constructed. Then the user may continue with the work flow for this session and proceed to specific a set of comparison rules and have the models compared with each other based on the set of comparison rules.

Alternatively the user may delete a previously saved session and remove that session from the user s account. If a session is deleted all data relating to that session may be deleted. The user may also copy a previously saved session as another new session. If a session is copied all available data relating to that session may be duplicated for the new session. Thereafter the two sessions are independent of each other such that if the user makes any changes to the copied new session it does not affect the original session and vice versa. Note that although each session corresponds to a web application multiple sessions may correspond to the same web application.

Second the user may choose to start a new session. In this case the user may go through some or all of the phases illustrated in . Note that STEPS and reflect the three phases illustrated in . During the model extraction phase the user may input the URL for a web application to be tested and a list of browsers for compatibility checking as illustrated in STEP . The user may further provide specific information pertaining to exploring the behavior of the web application or resource constraints if any as illustrated in STEP . Based on the user inputs from STEP models of the web application may be generated with respect to the web browsers as illustrated in STEP . In particular embodiments the service may automatically and dynamically execute the web application in each web browser to generate a model with respect to that web browser.

After the models are generated during the equivalence checking phase the user may provide a set of comparison rules as illustrated in STEP . In particular embodiments the user may be presented with a default set of comparison rules from which the user may select a set of comparison rules for this web application. If the user does not select his own set of comparison rules for this web application the default set of comparison rules may be used. The cross browser compatibility checking service compares the models of the web application with each other based on the set of comparison rules to determine if there is any substantial difference between any two of the models as illustrated in STEP . In particular embodiments the service may compare each pair of models under specified criteria as defined by the comparison rules and generate state level and travel level differences for the pair of models.

In particular embodiments during the error display and diagnosis phase the results of the comparison performed on the models are presented to the user. In particular embodiments the state level and trace level differences are organized separately and different types of differences are color coded for easier analysis. illustrates examples of state level and trace level differences between two models.

In particular embodiments during each session at any step e.g. STEPS the user may choose to save the current session and go back to the user home so that the user can log out of the system or start another new session or work on another e.g. previously saved session. For example after having the models of the web application generated at STEP the user may choose to save the current session. The web based service saves the models for the current session as well as all other currently available user data relating to the current session in connection with this specific session and in connection with this specific user.

In particular embodiments during each session at any step e.g. STEPS the user may choose to go back to a previous step to make modifications and repeat a particular step. For example after submitting a list of web browsers for checking compatibility of a web application at STEP from any subsequent step the user can go back to STEP to edit the list of web browsers in order to modify the choices of browsers used for cross browser compatibility checking. If the user submits a new list of browsers the models of the web application may be reconstructed with respect to the modified list of browsers. Similarly after submitting a set of comparison rules for comparing the models at STEP from any subsequent step the user can go back to STEP to modify the set of comparison rules. If the user submits a new set of comparison rules the models of the web application may be re compared based on the modified set of comparison rules.

In particular embodiments at any step the user may choose to save all the work thus far completed and log out from his account. If the user logs out the user may be directed back to the login screen as illustrated in STEP . From the login screen the user may choose to leave the service for the time being or log back into his account again.

In particular embodiments a cross browser compatibility checking service may support any number of users and each user may have any number of work sessions with each session corresponding to checking the cross browser compatibility of a specific web application with specific options initiated from a specific client at a specific time. Multiple users may use the cross browser compatibility checking service concurrently or at different times. In particular embodiments when two users use the cross browser compatibility checking service at the same time what one user does with the service does not affect in any way what another user does with service.

In particular embodiments the user data e.g. the URL of the web application the list of web browsers the set of comparison rules models of the web application or results of the comparisons are organized on a per user per session basis. illustrates the user data organization by an example cross browser compatibility checking service. In particular embodiments each session of each user is for a specific instance of a cross browser compatibility check. All data relating to performing cross browser compatibility checking for this instance are organized within the corresponding session. In particular embodiments for each session the data may include the URL of the web application the list of web browsers for cross browser compatibility checking behavior exploration specification of the web application resource constraints of the web application models of the web application constructed with respect to the different web browsers the set of comparison rules travel level and state level differences between each pair of models and so on. In particular embodiments all user data are stored at server side such as in a data store or on a server accessible to the cross browser checking service.

In particular embodiments two sessions either of the same user or of two different users may be for checking cross browser compatibility of two different web applications or for checking cross browser compatibility of the same web application. In particular embodiments when two sessions are for checking cross browser compatibility of the same web application other user data such as the behavior exploration specification or the sets of comparison rules may differ between the two sessions. In particular embodiments what a user does with one session does not affect any other session. A session may be saved retrieved resumed deleted or copied as needed and data within each session may be saved retrieved deleted or modified as needed.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing cross browser compatibility checking as a web based service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . The present disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . The present disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. The present disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. The present disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

In particular embodiments the cross browser compatibility checking service may reside and execute on a server . A user of the service may access the service through a web browser executing on a client associated with the user.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. The present disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. The present disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

This disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

