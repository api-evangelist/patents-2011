---

title: Methods, apparatus and articles of manufacture to test batch configurations
abstract: Example methods, apparatus and articles to test batch configurations are disclosed. A disclosed example method includes identifying, using a processor, an execution path through a batch configuration of a process control system, generating a test plan for the execution path, stimulating the process control system to execute the test plan, and recording a result of the test plan.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08788239&OS=08788239&RS=08788239
owner: Fisher-Rosemount Systems, Inc.
number: 08788239
owner_city: Round Rock
owner_country: US
publication_date: 20110211
---
This disclosure relates generally to batch configurations and more particularly to methods apparatus and articles of manufacture to test batch configurations.

Batches are a type of process control system configuration that may be used to run repetitive and or sequential operations to manufacture a product. During the life cycle of a process plant a process control system may need to be replaced fixed patched upgraded etc. However any change of a process control system has the potential to disrupt operation of the process plant and or batch configurations.

Example methods apparatus and articles to test batch configurations are disclosed. A disclosed example method includes identifying using a processor an execution path through a batch configuration of a process control system generating a test plan for the execution path stimulating the process control system to execute the test plan and recording a result of the test plan.

A disclosed example apparatus includes a path discoverer to identify an execution path through a batch configuration of a process control system a test plan creator to generate a test plan for the execution path and a test plan executor to stimulate the process control system to execute the test plan and record a result of the test plan.

Because of the complexity of modern process control systems and the limitless number of process plant configurations and or batch configurations it can be difficult to detect any defects that may be present before a process control system and or batch configuration fix patch upgrade etc. is released. For example such undetected defects may only become apparent after and or when the process control system and or batch configuration is operated in connection with an actual process plant. To alleviate the need to replace modify patch update and or upgrade their process control system s and or batch configurations some customers have instead elected to isolate their process control system s from other device s and or network s . While such actions may reduce the potential for disruptions it also prevents process engineers from taking advantage of the features and or capabilities available in newer versions of a process control system and or batch configuration.

In general the example apparatus methods and articles of manufacture disclosed herein may be used to test batch configurations. In particular the example apparatus methods and articles of manufacture disclosed herein may be used to automatically identify all possible execution paths through a batch configuration automatically generate test plans for any or all of those possible execution paths and or to automatically test any or all of those possible execution paths. A batch configuration may be tested with a new and or updated process control system before the new and or updated process control system is used to control the customer s process plant. A batch configuration may additionally or alternatively be tested against a project design objective and or functional test case objective.

By automatically and or systematically testing batch configurations a number of advantages may be realized. Automatic batch configuration testing can reduce the number of disruptive events in process plants by facilitating the identification of software defects that may only be detected with realistic test scenarios. Automatic batch configuration testing can also reduce the time and or effort required to thoroughly test a batch configuration as the behavior of the batch configuration can be automatically determined and or verified. Automatic batch configuration testing can further enable substantially more test scenarios to be executed and or verified. Automatic batch configuration testing can also enable testing without the need for process models which can be expensive and or time consuming to create for highly regulated industries. Additionally automatic batch testing can increase customer confidence in deploying process control system upgrades and can reduce the cost of supporting process control systems.

The example operator station of allows a process plant operator to review and or operate one or more operator display screens graphical user interfaces and or applications that enable the process plant operator to view process plant variables view process plant states view process plant conditions view process plant alarms and or to provide user inputs such as those used to change process plant settings e.g. set points and or operating states clear alarms silence alarms etc. . Such screens and or applications are typically designed and or implemented by process configuration engineers. As discussed in more detail below an example batch tester may simulate user and or operator inputs to the operator station to stimulate direct force and or otherwise cause the process control system to execute a particular selected and or chosen path through a batch configuration.

The example work station of may be configured to implement any number and or type s of process control application s and or function s . In the illustrated example of the work station is configured to implement among possibly other applications and or functions the DeltaV Batch Executive sold by Fisher Rosemount Systems Inc. an Emerson Process Management company. The example Batch Executive of carries out batch procedures which are defined by one or more sequential function charts SFCs by controlling sequencing and or coordinating the inputs outputs and or operations of one or more phase classes implemented by the example controller s . The example SFC s of are graphical representations of the actions and or processes and are defined and or structured in accordance with any past present and or future standard s and or recommendation s such as the International Society of Measurement and Control ISA S88 standard.

The example stations and of may be implemented using any suitable computing systems and or processing systems such as the example processor platform P of . The example stations and could for example be implemented using single processor and or multi processor computers and or computer workstations.

To enable the example batch tester of to interact with the example Batch Executive and or the example controller s the example process control system of includes any number and or type s of object linking and embedding OLE for process control OPC controllers . An example OPC controller is the DeltaV OPC Server sold by Fisher Rosemount Systems Inc. an Emerson Process Management company

In the illustrated example of lower layer s of the control system hierarchy e.g. equipment modules control modules input output devices field devices etc. are simulated and or modeled rather than being executed on an actual process control field devices. In some examples the simulated control layer s also simulate and or model the process plant controlled by the example process control system . Any number and or type s of method s logic tool s application s and or device s such as the DeltaV SimulatePro application sold by Fisher Rosemount Systems Inc. an Emerson Process Management company may be used to implement the example simulated control layer s of .

To configure control components e.g. the example controller s the example operator station and or the example work station the example process control system of includes a process control system configuration subsystem . The example configuration subsystem of loads configures commissions and or programs the actual i.e. physical process control components of the process control system based on the contents of an operation database . The example configuration subsystem and the example operation database of are a part of the DeltaV process control system sold by Fisher Rosemount Systems Inc. an Emerson Process Management company. The example operation database of may be generated defined specified and or populated using other tools and or interfaces not shown of the DeltaV process control system such as the DeltaV Configuration Software Suite sold by Fisher Rosemount Systems Inc. an Emerson Process Management company. In some examples the example SFC s are stored in the example operation database .

While illustrates an example process control system on which the example apparatus methods and articles of manufacture to test batch configurations may be advantageously employed persons of ordinary skill in the art will readily appreciate that the apparatus methods and articles of manufacture disclosed herein may if desired be advantageously employed in other process control systems of greater or less complexity e.g. having more than one controller across more than one geographic location etc. than the illustrated example of . Moreover while not shown in for clarity of illustration there may be any number and or type s of additional and or alternative devices components and or systems included in a process plant and or a process control system. For example a process plant and or a process control system may include and or implement a firewall a switch a router a hub a power supply and or any other devices managed and or controllable by a process control system such as the DeltaV process control system sold by Fisher Rosemount Systems Inc. an Emerson Process Management company.

To test batch configurations the example system of includes the example batch tester . The example batch tester of tests a batch configuration program and or script to verify that the process control system executes the batch as intended. To verify the execution of a batch the example batch tester compares one or more results of the batch to execute one or more benchmarks. Example benchmarks include but are not limited to one or more results collected from a prior execution of the batch on a different version of the process control system and or a different version of process control system software and or objective expected and or anticipated behavior s and or result s defined and or specified in a project configuration document and or a functional test document. The example batch tester tests all layers of the batch configuration program and or script e.g. procedures unit procedures operations and or phase classes and controller interface logic. Additionally or alternatively the batch tester verifies that the execution time for a batch is not improperly delayed that a batch does not go to a complete state prematurely that the batch acquires and or releases equipment as intended that commands do not return errors that the batch correctly recovers from errors and or that operator interactions are implemented as intended. The batch tester ensures that commands of the SFC s execute correctly and or non passively on the controller s by for example forcing a change of state in the controller s prior to the controller s setting the same state. An example manner of implementing the example batch tester of is disclosed below in connection with .

The example batch tester of analyzes a batch configuration scripts and or programs to identify all possible execution paths through the batch. The example batch tester uses knowledge of batch script hierarchies and SFC constructs as defined by the S88 standard to determine all possible execution paths through a batch. The example batch tester displays the identified list of execution paths to a user. For each of the execution path s selected by the user the batch tester generates a test plan that forces stimulates and or otherwise causes the process control system and or the simulated control layer s to follow the execution path being tested. The example batch tester generates a test plan by compiling a list of all the interactions needed to stimulate force and or otherwise cause the process control system and or the simulated control layer s to follow a particular execution path through the batch. An example test plan that may be generated by the example batch tester is human readable e.g. constructed in accordance with an eXtensible Markup Language XML and executable programmatically. Results of the execution of each execution path are presented to the user and or saved in a log file for subsequent comparison with appropriate benchmarks and or objectives.

The example batch tester of executes all levels of a batch configuration script and or program as defined by the S88 standard and thus navigates through the batch hierarchy to identify all possible execution paths through the batch. illustrates an example list of rules and or constructs that define SFCs and can be used by the example batch tester to identify execution paths through a batch. illustrates an example batch hierarchy for a phase class having a single step within a single operation within a single unit procedure with a single procedure . In the illustrated example of the test shown around each box e.g. text around box indicates the commands used to interact with each layer of the batch.

For each execution path e.g. the example execution path of to be tested the example batch tester of generates a list of the commands needed to manipulate stimulate force and or otherwise cause execution along a presently considered path. The list of commands includes the inputs required to follow an execution path and the outputs manipulated by the batch along that path.

An example interaction table representing a list of commands that manipulate stimulate force and or otherwise cause execution along the example execution path of is shown in . The example inputs of come from three different sources human interactions signals received from the simulated control layer s e.g. valve XV 101 is open and or signals received from an external program control e.g. start SFC . The example outputs of are signals to the simulated control layer s e.g. open valve XV 101 signals to an external program and or information about the current state of the batch e.g. Step S is Active . In the example interaction table of the column represents the sequence number of the command the input output column represents whether the command is received input or given output the agent column represents who executes the command and the type column represents the type of the agent .

To execute a batch path the example batch tester sends commands to change the state of the batch and or to receive feedback about what operation s occurred. Accordingly the example batch tester of augments the example interaction table of with additional commands which are shown with shading in the example test plan of two of which are designated at reference numerals and . The additional commands added by the batch tester allow the example batch tester to synchronize itself with the batch. As shown in the example batch tester verifies each operation behavior and or transition of the batch including the action s at each step. As such each step and or transition has pre conditions and or post conditions that are setup and or recorded by the batch tester as shown in . Example pseudo code that may be implemented by the example batch tester of to create a test plan is shown in .

As shown conceptually in the example batch tester envelopes the environment in which the batch executes and provides all the necessary feedback for the batch. For example an operator no longer provides inputs and or responses to the batch. Instead the batch tester provides the simulated inputs . However as shown in because the lower control layer s are simulated by the simulated control layer s the example batch tester need not provide and or record the signals between the controller s and the simulated control layer s .

To allow the example batch tester of to determine the commands used to exchange data with the process control system the example batch tester uses an interaction mapping table provided by for example an engineer of the process control system . The example interaction mapping table of defines and or specifies how data and or commands are written to and or received from the process control system . An example interaction mapping table is shown in . The example batch tester of uses the interaction mapping table to identify for each step in a test plan e.g. the example test plan of a particular command to execute that step.

To identify the paths through a batch the example batch tester of includes a path discoverer . The example path discoverer of traces and or executes all levels of a batch configuration script and or program as for example defined by the S88 standard and thus navigates through the batch hierarchy to identify all possible execution paths through the batch as disclosed above in connection with and .

To create test plans such as the example test plan of the example batch tester of includes a test plan creator . For each batch execution path to be tested the example test plan creator of generates a list of the commands needed to manipulate stimulate force and or otherwise cause execution of a presently considered path. The list of commands includes the inputs required to follow an execution path and the outputs manipulated by the batch along that path. The example test plan creator also inserts additional commands to allow a test plan executor to change the state of the batch and or to receive feedback about what operation s occurred.

To execute test plans the example batch tester of includes the example test plan executor . Using an interaction mapping table such as the example table of the example test plan executor of executes each command of a test plan. As the test plan is executed the example test plan executor stores results of and or state information obtained during execution of the test plan into a log file such as the example log file of .

To allow the example test plan executor to interact with the example process control system of the example batch tester of includes a control system interface .

To verify test results the example batch tester of includes a comparer . Using any number and or type s of method s logic s and or criterion the example comparer of compares a log file generated by the example test plan executor to other log files previously generated by the test plan executor . For example the comparer may verify that the batch reaches the intended state s and that the intended outputs of the process control system occurred. Additionally or alternatively the comparer can compare the log file and or portions thereof compared with a project design document and or functional test objectives. In such examples the project design document and or the functional test objectives and or portions thereof are stored using a format and or data structures that are accessible and or readable by the comparer to enable comparison s with the log file and or portions thereof.

While an example manner of implementing the example batch tester of is shown in one or more of the interfaces data structures elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example database interface the example path discoverer the example test plan creator the example test plan executor the example control system interface and or more generally the example batch tester of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example database interface the example path discoverer the example test plan creator the example test plan executor the example control system interface and or more generally the example batch tester may be implemented by the example processor platform P of and or one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s field programmable logic device s FPLD s field programmable gate array s FPGA s fuses etc. When any apparatus claim of this patent incorporating one or more of these elements is read to cover a purely software and or firmware implementation at least one of the example database interface the example path discoverer the example test plan creator the example test plan executor the example control system interface and or more generally the example batch tester is hereby expressly defined to include a tangible article of manufacture such as a tangible computer readable medium storing the firmware and or software. Further still the example batch tester may include interfaces data structures elements processes and or devices instead of or in addition to those illustrated in and or may include more than one of any or all of the illustrated interfaces data structures elements processes and or devices.

As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable medium and to expressly exclude propagating signals. As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals. Example tangible and or non transitory computer readable media include a volatile and or non volatile memory a volatile and or non volatile memory device a compact disc CD a digital versatile disc DVD a floppy disk a read only memory ROM a random access memory RAM a programmable ROM PROM an electronically programmable ROM EPROM an electronically erasable PROM EEPROM an optical storage disk an optical storage device magnetic storage disk a magnetic storage device a cache and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information and which can be accessed by a processor a computer and or other machine having a processor such as the example processor platform P discussed below in connection with .

The example process of begins with the example path discoverer identifying the execution paths through a batch block . The path discoverer may identify the execution paths by for example carrying out the example process of and or by implementing the example pseudo code of A E and . The path discoverer displays the list of identified execution paths for review by a user block . The example test plan creator receives from the user a selection of one or more of the displayed execution paths block and for each selected execution path generates a test plan such as the example test plan of block . The example test plan creator creates the test plan s by for example implementing the example pseudo code of .

The example test plan executor executes each of the test plans created by the test plan creator block and stores the results in a log file block . As directed by a user the example comparer compares all or any part of the log file to one or more other log files to verify and or validate the results of the executed batch paths block . Control then exits from the example process of .

The example process of may be carried out to identify the paths through a batch. The example process of begins with the path discoverer identifying all paths through the batch that start with an initial node and end on any termination or hanging transition by for example implementing the example pseudo code of block . The path discoverer identifies and merges paths that diverge and converge by for example implementing the example pseudo code of block . The path discoverer creates path descriptions for the merged paths by for example implementing the example pseudo code of block . Control then exits from the example process of .

The processor platform P of the instant example includes at least one programmable processor P. The processor P executes coded instructions P and or P present in main memory of the processor P e.g. within a RAM P and or a ROM P . The processor P may be any type of processing unit such as a processor core a processor and or a microcontroller. The processor P may be programmed to carry out the example processes of and or the example pseudo code of A E and or A J. Thus the coded instructions P P may represent the example processes of and or the example pseudo code of A E and or A J.

The processor P is in communication with the main memory including a ROM P and the RAM P via a bus P. The RAM P may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of RAM device. The ROM P may be implemented by flash memory and or any other desired type of memory device. Access to the memory P and the memory P may be controlled by a memory controller. The example memory P may be used to for example store the example operation database .

The processor platform P includes an interface circuit P. Any type of interface standard such as an external memory interface serial port general purpose input output as an Ethernet interface a universal serial bus USB and or a PCI express interface etc may implement the interface circuit P.

One or more input devices P may be connected to the interface circuit P. The input device s P can be implemented by for example a keyboard a mouse a touch screen a track pad a trackball isopoint and or a voice recognition system. One or more output devices P are also connected to the interface circuit . The output devices P can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT a printer and or speakers . The interface circuit P may thus include a graphics driver card. The input device s P and the output device s P may additionally or alternatively be used to provide information such as a list of identified execution paths and or test results and or to receive selections of execution paths to be tested.

The interface circuit P may also includes a communication device such as a modem transceiver or network interface card to facilitate exchange of data with external computers via a network.

In some examples the processor platform P also includes one or more mass storage devices P to storing software and data. Examples of such mass storage devices P include a floppy disk drive a hard disk drive a solid state hard disk drive a CD drive a DVD drive and or any other solid state magnetic and or optical storage device. The mass storage device P may implement the example operation database .

The coded instructions disclosed herein may be stored in the mass storage device P in the RAM P in the ROM P and or on a removable storage medium such as a CD or a DVD.

From the foregoing it will appreciate that the above disclosed methods apparatus and articles of manufacture to test process control systems. Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

