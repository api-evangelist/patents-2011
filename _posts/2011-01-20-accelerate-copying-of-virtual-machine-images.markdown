---

title: Accelerate copying of virtual machine images
abstract: A system, program product, and method are provided for copying a virtual machine image. An image library comprising a plurality of system images is provided by a target data processing system. A source image selection is received at the target data processing system. A given image from the image library is selected by the target system based on the received source image. The selected given image is transformed into a copy of the virtual machine image by receiving blocks from a source system that are part of the virtual machine image but not a part of the selected given image, such that only the blocks missing from the selected given image are transferred from the source system to the target system in order to form the copy of the virtual machine image. The source image is preferably a virtual data processing system image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08615588&OS=08615588&RS=08615588
owner: International Business Machines Corporation
number: 08615588
owner_city: Armonk
owner_country: US
publication_date: 20110120
---
The disclosure relates generally to efficiently copying data in a data processing system and more specifically to replicating high capacity virtual machine images.

A data center is a facility used to house computer systems and associated components such as telecommunications and storage systems. It generally includes redundant or backup power supplies redundant data communications connections environmental controls e.g. air conditioning fire suppression and security devices. The equipment may be used to operate and manage an entities telecommunication network provide data center based applications directly to the entities customers provide hosted applications for a third party to provide services to their customers or provide a combination of these and similar data center applications.

Virtual data processing systems sometimes called system virtual machines or hardware virtual machines allow the sharing of the underlying physical machine resources between different virtual machines each running its own operating system. The software layer providing the virtualization is called a virtual machine monitor or hypervisor. A hypervisor can run on bare hardware Type 1 or native VM or on top of an operating system Type 2 or hosted VM .

The main advantages of virtual data processing systems are 1 multiple OS environments can co exist on the same computer in strong isolation from each other 2 the virtual machine can provide an instruction set architecture ISA that is somewhat different from that of the real machine and 3 application provisioning maintenance high availability and disaster recovery.

One of the most time consuming tasks when setting up a data processing system is the installation and configuration of all the different software programs that will run on a given system such as the operating system and application programs. Entities who continually configure systems usually install the software using a pre configured operating system image. Installation from an operating system image significantly reduces the time required to either setup up a new data processing system virtual or physical or newly reconfigure an preexisting system to a new operating environment to provide new or upgraded functionality.

There may be instances when it is desirable to re locate the functionality being provided by a given virtual data processing system such as when a new data center is brought on line at another physical location in order to be in closer physical proximity to end users who are using the services provided by a given data center. Other scenarios for which a copy of a given virtual data processing system may be desired include virtual machine provisioning cloning a virtual machine to a different storage device cloning a virtual machine for a system health check a backup restore of a virtual machine a storage hardware upgrade or a hypervisor hardware upgrade without shared storage. However today s data centers and associated virtual data processing systems typically utilize enormous data storage capacity such as multi gigabyte and even multi terabyte capacities. The transfer of data between multiple data centers in order to replicate or relocate functionality from one data center to another can be difficult requiring use of high speed networks or physically relocating large and bulky storage devices between such data centers.

It would thus be desirable to provide an improved technique for relocating or replicating data from one data center to another and it would be particularly advantageous to relocate or replicate system image data from a virtual data processing system to another virtual data processing system that is physically remote from the virtual data processing system.

According to one embodiment of the present invention there is provided a system program product and method for copying a virtual machine image. An image library comprising a plurality of system images is provided. A source image selection is received. A given image from the image library is selected based on the received source image selection. The selected given image is transformed into a copy of the virtual machine image.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to an illustrative diagram of a data processing environment is provided in which illustrative embodiments may be implemented. It should be appreciated that is only provided as an illustration of one implementation and is not intended to imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server computer and server computer connect to network along with storage unit . In addition client computers and connect to network . Client computers and may be for example personal computers or network computers. In the depicted example server computer provides information such as boot files operating system images and applications to client computers and . Client computers and are clients to server computer in this example. Network data processing system may include additional server computers client computers and other devices not shown.

Program code located in network data processing system may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example program code may be stored on a computer recordable storage medium on server computer and downloaded to client computer over network for use on client computer .

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

Turning now to an illustration of a data processing system is depicted in accordance with an advantageous embodiment. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a number of processors a multi processor core or some other type of processor depending on the particular implementation. A number as used herein with reference to an item means one or more items. Further processor unit may be implemented using a number of heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Storage devices may also be referred to as computer readable storage devices in these examples. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation.

For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display x provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or computer readable storage media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disk that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system .

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electromagnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communications links such as wireless communications links optical fiber cable coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples.

In some advantageous embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different advantageous embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of running program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

In another illustrative example processor unit may take the form of a hardware unit that has circuits that are manufactured or configured for a particular use. This type of hardware may perform operations without needing program code to be loaded into a memory from a storage device to be configured to perform the operations.

For example when processor unit takes the form of a hardware unit processor unit may be a circuit system an application specific integrated circuit ASIC a programmable logic device or some other suitable type of hardware configured to perform a number of operations. With a programmable logic device the device is configured to perform the number of operations. The device may be reconfigured at a later time or may be permanently configured to perform the number of operations. Examples of programmable logic devices include for example a programmable logic array programmable array logic a field programmable logic array a field programmable gate array and other suitable hardware devices. With this type of implementation program code may be omitted because the processes for the different embodiments are implemented in a hardware unit.

In still another illustrative example processor unit may be implemented using a combination of processors found in computers and hardware units. Processor unit may have a number of hardware units and a number of processors that are configured to run program code . With this depicted example some of the processes may be implemented in the number of hardware units while other processes may be implemented in the number of processors.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

According to one embodiment of the present invention there is provided a system program product and method for copying virtual machines images. An image library comprising a plurality of system images is provided. A source image selection is received. A given image from the image library is selected based on the received source image selection. The selected given image is transformed into a copy of a desired source image. The source image is preferably a virtual machine data processing system image and the plurality of system images are golden virtual operating system images that may have been provisioned.

Turning now to there is shown at a system overview of a preferred embodiment that is operable in creating a copy of a virtual machine image. There is a physical asset that uses storage device StorageA that is depicted at . This physical asset is a server data processing system such as server system of and is a part of a local data center. Such server data processing system has a plurality of virtual machine instantiations VM VMrunning thereon such as elements and under supervision of Hypervisor as is known in the art. Storage device StorageA that is depicted at in is not necessarily a dedicated storage device for physical asset but can be shared by other physical assets as well such as being shareably connected to a network as depicted by element of .

At a remote or target location such as at another data center there is a similar physical asset that uses storage device StorageB that is depicted at . This is where a copy of a virtual machine such as virtual machine or is desired to be created such that the functionality provided by virtual machine or can be provided at this remote data center. Storage device StorageB that is depicted at in is not necessarily a dedicated storage device for physical asset but can be shared by other physical assets as well such as being shareably connected to a network as depicted by element of .

Also shown in is an image library having a plurality of system images I I and stored therein with such image library being located at the remote data center in a preferred embodiment. Also in a preferred embodiment these system images I I and are master or golden system images for respective virtual machine operating systems which may or may not be provisioned. Server provisioning is a set of actions taken to prepare a server with appropriate systems data and software and make it ready for operation. Typical tasks when provisioning a server are select a server from a pool of available servers load the appropriate software operating system device drivers middleware and applications appropriately customize and configure the system and the software to create or change a boot image for this server and then change its parameters. After these actions are performed the system is restarted and the new software is loaded in order to makes the system ready for operation. Once provisioned an image of such provisioned system can be obtained and used to clone or replicate this provisioned image in other systems to avoid having to manually provision each system individually. This is particularly useful when multiple systems such as multiple virtual machines essentially provide a same set of services as others of the multiple systems. Again the system images I I and of may or may not be provisioned accordingly.

The image library can be on its own data processing system or can be co located on the hypervisor. While not shown in the data center that includes server data processing system could also have an image library similar to image library if the local data center itself has capabilities for creating a copy of a virtual machine image in similar fashion to the replication capabilities described herein with respect to the remote data center from either the remote data center depicted in or yet another data center not shown .

Also shown in is a metadata store that contains a set of checksums. This set of checksums includes calculated checksums for all units of disk content for each of the provisioned virtual machines VM VM and for all units of disk content for each of the respective images I Iin the image library at the remote data center. Content on the disk is divided into smaller units of disk content which are referred to as disk blocks. The division may be based on fixed size units or variable size units such as based on units of files determined by scanning the file system used by virtual machines VM VMor images I I. This metadata store of checksums is used to select a given image from image library that will be used as the base or starting point from which a copy of a given source virtual machine will be created as further described below. The metadata store can be stored on a separate data processing system a virtual machine management system or can be co located on hypervisor at the local data center.

While not shown in the remote data center that includes server data processing system could also have a metadata store similar to metadata store if the remote data center itself has virtual machine images that need to be copied to other data centers. In that case the remote data center metadata store not shown would include calculated checksums for all units of disk content for each of the provisioned virtual machines on its remote system s and for all units of disk content for each of the respective images in an image library where a copy of the virtual image is to be created at yet another data center. In effect each of a plurality of data centers could have a locally maintained image library and metadata store that function in similar fashion to image library and metadata store however such is not shown for purposes of clarity in not replicating duplicate functionality.

In one embodiment the checksums for the local or source virtual machine are maintained by physical asset and the checksums for the virtual machines and images in the remote or target server center are maintained by physical asset . The checksums for the source images VM VMare sent by system to system . System performs a comparison to identify if any of the checksums it received are already present at system . System stores as meta data the association between the checksum mapped to a unique unit of content say a block which is then associated with one or more images that use that block. The checksums for system images I Imaintained in image library at the remote data center are sent by system to system .

Turning now to there is depicted a flowchart that depicts a preferred methodology that creates a copy of a virtual machine image without requiring that an entire copy of the virtual machine image be copied across a network or physically transported to another machine data center. The process starts at step and proceeds to step where a copy of a virtual machine from a source data center such as one of elements of is requested. Such request could be generated by a user at data processing system . A metadata store such as metadata store that includes a plurality of checksums is consulted to identify which one of a plurality of master or golden images maintained in image library at the remote data center is the closest to the requested source virtual machine maintained in the local data center at step . The closest golden image is provisioned at step . This is a standard provisioning that occurs in the target virtual environment such as through a virtual machine management system or an application programming interface API exposed by such system or via command line. Processing proceeds to step where the identified golden image is transformed into a copy of the requested source image as will be further described below with respect to . Processing then ends at step .

Turning now to this figure depicts the processing that occurs when either i there is no image library such as image library of at the remote data center where a virtual image copy is desired to be created or ii no golden image maintained in image library at the remote data center can be identified as being close to the requested source virtual machine and cannot be provisioned in step in . In this scenario a target image that will be a copy of a desired source virtual machine is created from units of content such as disk blocks already existing on a target storage device. For example as depicted in there is shown at a system for which an image library such as image library of does not exist. This system is similar to system of and includes at a physical asset that uses storage device StorageA. This physical asset is a server data processing system such as server system of . Such server data processing system has a plurality of virtual machine instantiations VM VMrunning thereon as shown be elements and under supervision of Hypervisor in similar fashion to that shown in with respect to the Physical Asset . At a remote location such as at another data center there is a similar physical asset that uses storage device StorageB that is depicted at . This is where a copy of virtual machine VM is desired to be created such that the functionality provided by virtual machine such as VM can be provided at this remote data center. In this embodiment there is a pre existing virtual machine that has previously been configured to run on Physical Asset . As will be further described below the desired target image is depicted at . Also shown in is a metadata store containing a set of checksums. This set of checksums includes calculated checksums for all units of disk content for each of the provisioned virtual machines VM VM and pre existing virtual machines on the target physical asset at the remote data center. Content on the disk is divided into smaller units of disk content which are referred to as disk blocks. The division may be based on fixed size units or variable size units such as based on units of files determined by scanning the file system used by virtual machines VM VMor pre existing virtual machines on target physical asset such as element . This metadata store of checksums is used to identify blocks that are common to both the requested source virtual machine such as VM and blocks existing on StorageB.

Returning back to since there is no image library at the remote data center or a golden image has been identified as being the closest has not been provisioned as previously described hereinabove a target image is created using blocks copied from a pre existing virtual machine on the StorageB storage device. The blocks that are used are common blocks belonging to virtual machine stored on StorageB and uncommon blocks from source virtual machine . Accordingly at step of a new target image is created by copying common blocks directly from StorageB and copying from StorageA only those blocks that are determined to not be common i.e. those blocks that are not on StorageB. In order to determine which blocks are uncommon in one implementation the source side sends the checksums of each block over to the target and that target system compares these against checksums at the target system to determine uncommon blocks. The target system then requests that these determined uncommon blocks be sent to it by the source system. Thus by copying only those blocks that are determined to not be common also known as delta blocks the amount of data needed to be remotely copied across a network is reduced by using local common blocks in the creation of target image . The process then ends at step .

Turning now to there is shown at further details of step of that transforms an identified golden image from image library of into a desired target image at physical asset of that is a copy of a source image that exists on physical asset of . The processing which is performed at the remote data center where a copy of a virtual image is desired starts at and proceeds to step where the identified golden image as per step of FIG. A is used as the base or starting point for the desired target image such as image of . As previously described this golden image was identified by system and such identify has been communicated to system . Then at step blocks are received from StorageA across a network that are determined to not be common i.e. those blocks that are not already part of the identified golden image that is used as the base to compose the final virtual machine image of .

There are many ways to perform the comparison. One embodiment of the comparison is as follows. The checksum of a block that is stored in the checksum store is indexed by the block ID and image or VM ID corresponding to the block belonging to that image or VM. When a copy is to be performed the source hypervisor consults the checksum store. The checksum looks up all checksums belonging to the source VM block by block. For each block it then looks up the checksum for the base image at the target for the same block position block ID . The checksum store compares the two checksums. If they are the same no work is performed. If they are different the checksum store sends the corresponding block from storageA over the network to storageB to overwrite the existing block that was provisioned at the target.

For both types of systems those with an image library such as element of and those without an image library as depicted in each respective metadata store such as element of and element of is updated when blocks on the storage devices have changed or on a scheduled regular basis.

In one embodiment the source image and the base set of blocks are the same size. If they are the same size then the action is only to replace the blocks on the base with blocks that are uncommon from the source. However if the base is smaller than the source the base is expanded by adding blocks to the end of the base image file until it is the same size as the source. If the base is larger than the source the base is truncated by deleting blocks from the end of the base image file until it is the same size as the source.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

