---

title: Collaborative system for capture and reuse of software application knowledge and a method of realizing same
abstract: A method and system for generating an information template from a domain ontology, where the information template is specific to a content management system (CMS). After a domain ontology specification is received, a platform independent model (PIM) is generated that includes elements that represent knowledge in the CMS. The PIM is converted to a platform specific model (PSM) that is based on the CMS. The information template specific to the CMS is generated based on the PSM. A result of generating the information template is a documentation of content for the CMS in a format specified by the information template. An existing CMS is reverse engineered to interoperable forms by retrieving content of the information template in the existing CMS, transforming the content to the PIM, and transforming the PIM to a domain ontology model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08712947&OS=08712947&RS=08712947
owner: International Business Machines Corporation
number: 08712947
owner_city: Armonk
owner_country: US
publication_date: 20110127
---
The present invention relates to a data processing method and system for collaboratively managing information and more particularly to collaboratively managing information about software applications.

Ineffective management of information about a large number of software applications for an enterprise customer is caused by knowledge erosion due to attrition or internal movement information scattered across diverse media and in the minds of people i.e. implicit knowledge and knowledge gaps that are inherited with a software application and that arise as people learn by experience. Knowledge about applications may be stored as a repository of documents in a content management system but the knowledge is often outdated inflexible and is limited to explicit knowledge such as architecture documents requirement documents etc. Using a wiki system the application knowledge may also be shared among a large number of people in an unstructured fashion but the content structure becomes inconsistent and a matter of perception of every individual or social group using the wiki system. Thus there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.

Embodiments of the present invention provide a method of generating an information template from a domain ontology the information template being specific to a content management system CMS . The method comprises 

the computer system generating a platform independent model PIM that includes elements that represent knowledge in the CMS 

based on the PSM the computer system generating the information template specific to the CMS wherein a result of generating the information template is a documentation of content for the CMS in a format specified by the information template.

In one aspect of the present invention the computer system reverse engineers an existing CMS to interoperable forms by retrieving content of the information template in the existing CMS transforming the content of the information template to the PIM and transforming the PIM to a domain ontology model.

In another aspect of the present invention the computer system dynamically validates an edit of an existing PIM by receiving the edit of the PIM determining an undesirable consequence of the edit check the edit and the consequence against predefined rules determine whether or not the edit is permitted based on the rules. If the edit is permitted the computer system generates and sends a warning about the undesirable consequence and performs action s on element s or part s of the PIM that are related or dependent on the element being modified by the edit.

A system program product and a process for supporting computing infrastructure where the process provides at least one support service are also described and claimed herein where the system program product and process for supporting computing infrastructure correspond to the aforementioned method.

Embodiments of the present invention provide a knowledge management system on a flexible unified extendable and scalable platform. The knowledge management system may include a consistent extendable information structure that allows an organization s professionals of varying expertise and experience to effectively organize share and access their knowledge of software applications. Further the knowledge management system may unify knowledge by allowing a community to share knowledge and convert tacit knowledge to explicit form. The knowledge of software applications may be shared in wiki pages in a consistent and professional manner within an organization. The knowledge management system may also provide a flexible information structure that allows modifications and extensions for different types of applications e.g. mainframe Java etc. and to implement different ontologies for different kinds of domains e.g. telecom banking retail etc. . Embodiments disclosed herein also provide a method of capturing the latest information model updates and metrics related the information model to validate consistency.

Embodiments of the present invention may provide a knowledge management system with an extensible and descriptive information model of a domain ontology. Embodiments disclosed herein may include a mechanism to impose a controlled structure on a content management system CMS e.g. a wiki by means of a domain ontology thereby providing consistency to usage and perception among users of the CMS. Model driven architecture and design may be applied to create a platform independent model PIM to customize CMSs where the PIM expresses generic abstract CMS constructs as modeling elements. Embodiments disclosed herein also may convert a PIM to platform specific models PSMs by parsing a PIM to generate and map an information template specific to a target system i.e. a wiki or other CMS . Embodiments of the present invention may also provide model driven reverse engineering of an existing wiki or other CMS to interoperable forms.

In one embodiment the aforementioned domain ontology models a specific domain by representing meanings of terms associated with software applications such as enterprise application software. In the embodiment described in this paragraph the wiki or other CMS that comprises the target system includes content associated with software applications.

PIM engine receives requirements of a domain ontology e.g. as an ontology requirements document from an information architect and or domain subject matter expert SME . The PIM engine converts the domain ontology model specified by the received requirements to a PIM and then provides PIM information to framework engine . Framework engine converts the PIM to a PSM and creates or instantiates an information template that is specific to target system . Framework engine provides the information template to target system to implement the PSM on the target system.

System allows the creation of a PIM for any domain ontology requirements and provides complete automation from the receipt of the domain ontology model to the instantiation of the information template. System also allows automated reverse engineering of a domain ontology and or a PIM from an existing information template. System utilizes PIM engine and framework engine as automated substitutes for a tool engineer where the tool engineer in a known system manually converts the domain ontology specification to a specific platform dependent content management implementation.

More details about the functionality of the components of are presented below in the discussions of .

PIM engine may be implemented in for example Eclipse which is a software development environment whose development in the open source software community is hosted by Eclipse Foundation Inc. located in Ottawa Ontario Canada.

Target system may include for example TWiki MediaWiki FileNet or Alfresco . TWiki is a structured wiki application offered by Twiki Inc. located in Sunnyvale Calif. MediaWiki is a web based wiki application developed by Wikimedia Foundation Inc. located in San Francisco Calif. FileNet is an enterprise content management application offered by International Business Machines Corporation located in Armonk N.Y. Alfresco is an enterprise content management system offered by Alfresco Software Ltd. located in Maidenhead Berkshire United Kingdom.

As used herein an ontology is defined as a formal representation of knowledge as a set of concepts within a domain and relationships between those concepts. As used herein a domain ontology is defined as an ontology that models a specific domain by representing meanings of terms as the terms apply to that domain. A domain ontology may be provided by an Extensible Markup Language XML document that includes a hierarchical classification of vocabulary that is specific to a domain. For example a domain ontology modeling a software application domain may be provided by an XML document that includes terms such as application as a root level class and database module physical system etc. as sub classes under the root level class. As another example a domain ontology may be provided by a language in the Web Ontology Language OWL family of knowledge representation languages. A domain ontology provided by an OWL language includes axioms that specify classes i.e. sets of individuals and a set of property assertions that relate the individuals to each other.

Entity repository is an XML file that lists and describes all the elements in the CMS i.e. target system in and stores the interrelationships between the elements as a model e.g. a model for a wiki . Plug in configuration file stores settings that enable a user to alter the behavior of the semantic wiki ontology modeling plug in see . For example the settings stored in plug in configuration file may enable the user to 

PIM engine receives domain ontology model from an information architect see arrow pointing to model and may store the model in a format provided by OWL XML or the Unified Modeling Language UML . Semantic wiki ontology modeling plug in calls model to model transformation plug in to convert the received domain ontology model to wiki PIM see arrow pointing to PIM . In one embodiment wiki PIM is stored in PIM engine as a UML model.

PIM engine may receive edits i.e. modifications to PIM from the information architect see arrow pointing to PIM . In one embodiment semantic wiki ontology modeling plug in determines and avoids undesirable consequences of the received modifications to PIM by automatically performing actions to change the structure of PIM by changing elements or parts of PIM that are related to or dependent on the elements of PIM being modified. Semantic wiki ontology modeling plug in logs the changes resulting from the automatically performed actions in PIM change log see arrow pointing to log . The process for verifying the modifications to the PIM is described in more detail in the discussion presented below relative to .

Semantic wiki ontology management engine receives wiki PIM see arrow starting at wiki PIM and retrieves changes to wiki PIM stored in log see arrow starting at log . Semantic wiki ontology management engine retrieves a wiki PSM mapping that indicates a mapping from PIM to a PSM that is to be implemented as a particular wiki i.e. target system in . Ontology management engine utilizes the retrieved mapping and calls model to template transformation adapter to generate information template see arrow pointing to template . Content received by the wiki target system is documented in a format specified by the information template .

Although the discussion about presented above describes components of PIM engine and framework engine as generating a PIM and PSM associated with a wiki platform it should be noted that the present invention is not limited to a wiki platform. The PIM engine and framework engine in contemplates the generation of a PIM PSM and information template for representation of knowledge in any type of CMS.

In one embodiment ontology management engine determines that a change retrieved from log enriches information template and therefore propagates the change to other PSMs as a new information structure.

In one embodiment information template specifies classifications of a software application related domain and these classifications may include Application Projects Programs Services and Technology Skills.

In one embodiment ontology management engine allows a search capability of the wiki content by creating search engine schema file in response to creating information template see arrow pointing to schema file . Search engine schema file is a search engine index file that operates as a keyword file that facilitates the scanning and indexing of wiki pages.

Step may include a user creating PIM see using semantic wiki ontology modeling plug in see in an editor e.g. Eclipse editor . To create the PIM in step the user first imports the domain ontology model into the editor which shows all the information elements in the model. Then using the editor the user associates i.e. interrelates the core CMS elements stored in entity repository see as described above. Finally the checks on the model are applied and the user makes necessary modifications and or refinements to PIM see . In response to completing the aforementioned modifications and or refinements of step the user may export PIM see as an XML or an XML Metadata Interchange XMI file in PIM change log see .

Although not shown in prior to step PIM engine see and may receive one or more edits to the PIM see and PIM engine see and stores the edit s in PIM change log see . The process of validating the edit s is described below relative to .

After step and prior to step PIM engine see and sends information in the PIM generated in step to framework engine see and .

In step semantic wiki ontology management engine see receives the PIM information i.e. PIM in see arrow starting at PIM from the PIM engine see and and retrieves any edits to PIM see that are stored in log see see arrow starting at log in . Also in step semantic wiki ontology management engine see retrieves a wiki PSM mapping see that indicates a mapping from PIM see to a PSM that is to be implemented as a particular wiki or other CMS i.e. target system in . Ontology management engine see utilizes the retrieved mapping and retrieved edit s and calls model to template transformation adapter see to programmatically generate information template see see arrow pointing to template in . Content received by target system see is documented in a format specified by the information template see .

The PSM mapping is a set of one or more XML files with schema e.g. XSD files that represents the information elements specific to different CMSs e.g. MediaWiki IBM FileNet etc. and the elements in the appropriate PIM to which they correspond.

The model to template transformation adapter see is a piece of software that implements Application Programming Interfaces APIs provided by a particular CMS to interact with the CMS in order to generate or create the information structure and content i.e. information template in .

In step computer system see implements the PSM generated in step on the wiki or other CMS i.e. the target system for which the PSM was created. After step the target system receives content that is documented in a format specified by the information template see .

In an optional step using the same PIM that was generated in step steps and are repeated one or more times to generate other PSM s based on other target system s and to implement the other PSM s to customize the other target system s . The process of ends at step .

In step semantic wiki ontology management engine automatically transforms the content retrieved in step to generate a PIM which is stored by PIM engine see as PIM see . Step performs the reverse operations analogous to the operations described above relative to step see where the adapter by means of the API provided by the particular CMS reads the information structure and content and generates the PSM.

In step semantic wiki ontology modeling plug in automatically transforms the PIM generated in step to a domain ontology model which is stored by PIM engine see as domain ontology model see . In one embodiment step allows a user to generate the domain ontology model with only the information elements from a PIM as represented by . The operation in step removes all associations to CMS elements and creates a domain ontology model that is independent of any particular CMS.

In step the reverse engineered PIM i.e. the PIM generated in step may be used to generate other e.g. newer CMS s by converting the PIM to other PSM s based on the other CMS s . That is one or more iterations of the process of are used to convert the PIM to the other PSM s .

In step computer system see implements the PSM s generated in step on the other CMS s for which the PSM s were created. After step the other CMS s receive content that is documented in a format specified by information templates generated by the process of that converts the PIM to the other PSM s . The process of ends at step .

In step semantic wiki ontology modeling plug in see determines one or more undesirable consequences of the edit on the structure of the PIM based on the ontology modeling plug in checking the edit against predefined rules. The determined consequence s are undesirable based on the predefined rules indicating that the edit if implemented leads to a loss or degradation of the expressiveness or usability of information template see .

In step semantic wiki ontology modeling plug in see validates the edit by checking the undesirable consequence s against the predefined rules to determine an action to be taken. If semantic wiki ontology modeling plug in see determines in step that the edit must be forbidden because of the check against the predefined rules then the Yes branch of step is taken and step is performed. In step semantic wiki ontology modeling plug in see forbids the edit i.e. prevents the edit from occurring and generates and initiates a display of a suggestion of a creation of a new PIM. Following step the process of ends at step .

Returning to step if semantic wiki ontology modeling plug in see determines that the edit is not forbidden based on the predefined rules then the No branch of step is taken and step is performed. In step semantic wiki ontology modeling plug in see generates and sends a warning to the information architect or another user about the undesirable consequence s of the edit. In step semantic wiki ontology modeling plug in see automatically performs re factor action s on element s or part s of the PIM that are related or dependent on the element being modified by the edit. In an alternate embodiment step includes the semantic wiki ontology modeling plug in see automatically sending a suggestion to perform the aforementioned re factor action s without automatically performing the action s .

In step semantic wiki ontology modeling plug in see stores the change s to the PIM resulting from the re factor action s being performed where the change s are stored in PIM change log . In step semantic wiki ontology modeling plug in see initiates a display of the logged change s on the computer utilized by the information architect or another user. Subsequently the information architect or other user reviews the displayed change s and sends an indication of whether to keep or undo the change s . The semantic wiki ontology modeling plug in see receives the indication from the information architect or other user whether to keep or undo the change s to the PIM resulting from the re factor action s . If the indication received in step is an instruction to undo the change s to the PIM then semantic wiki ontology modeling plug in see cancels the change s and returns the PIM to its state prior to the change s . Following step the process of ends at step .

Memory may comprise any known computer readable storage medium which is described below. In one embodiment cache memory elements of memory provide temporary storage of at least some program code e.g. program code and in order to reduce the number of times code must be retrieved from bulk storage while instructions of the program code are carried out. Moreover similar to CPU memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a local area network LAN or a wide area network WAN .

I O interface comprises any system for exchanging information to or from an external source. I O devices comprise any known type of external device including a display device e.g. monitor keyboard mouse printer speakers handheld device facsimile etc. Bus provides a communication link between each of the components in computer system and may comprise any type of transmission link including electrical optical wireless etc.

I O interface also allows computer system to store information e.g. data or program instructions such as program code and on and retrieve the information from computer data storage unit or another computer data storage unit not shown . Computer data storage unit may comprise any known computer readable storage medium which is described below. For example computer data storage unit may be a non volatile data storage device such as a magnetic disk drive i.e. hard disk drive or an optical disc drive e.g. a CD ROM drive which receives a CD ROM disk .

Memory and or storage unit may store computer program code that includes instructions that are carried out by CPU via memory to perform a model driven creation of an information template from a domain ontology a model driven reverse engineering of an existing wiki or other CMS to interoperable forms and a dynamic validation of an edit of an existing PIM. Although depicts memory as including program code and the present invention contemplates embodiments in which memory does not include all of code and simultaneously but instead at one time includes only code only code only code only a portion of code and or or a combination of code and .

Further memory may include other systems not shown in such as an operating system e.g. Linux that runs on CPU and provides control of various components within and or connected to computer system .

Storage unit and or one or more other computer data storage units not shown that are coupled to computer system may store entity repository see plug in configuration file see domain ontology model see wiki PIM see PIM change log see wiki PSM mapping see information template see and search engine schema file see .

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly an aspect of an embodiment of the present invention may take the form of an entirely hardware aspect an entirely software aspect including firmware resident software micro code etc. or an aspect combining software and hardware aspects that may all generally be referred to herein as a module . Furthermore an embodiment of the present invention may take the form of a computer program product embodied in one or more computer readable medium s e.g. memory and or computer data storage unit having computer readable program code e.g. program code and embodied or stored thereon.

Any combination of one or more computer readable mediums e.g. memory and computer data storage unit may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. In one embodiment the computer readable storage medium is a computer readable storage device or computer readable storage apparatus. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be a tangible medium that can contain or store a program e.g. program and for use by or in connection with a system apparatus or device for carrying out instructions.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electromagnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with a system apparatus or device for carrying out instructions.

Program code e.g. program code and embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code e.g. program code and for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. Instructions of the program code may be carried out entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server where the aforementioned user s computer remote computer and server may be for example computer system or another computer system not shown having components analogous to the components of computer system included in . In the latter scenario the remote computer may be connected to the user s computer through any type of network not shown including a LAN or a WAN or the connection may be made to an external computer e.g. through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations e.g. and or block diagrams of methods apparatus systems e.g. FIG. and and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions e.g. program code or . These computer program instructions may be provided to a processor e.g. CPU of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which are carried out via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium e.g. memory or computer data storage unit that can direct a computer e.g. computer system other programmable data processing apparatus or other devices to function in a particular manner such that the instructions e.g. program and stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer e.g. computer system other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions e.g. program and which are carried out on the computer other programmable apparatus or other devices provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Any of the components of an embodiment of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to performing a model driven creation of an information template from a domain ontology a model driven reverse engineering of an existing wiki or other CMS to interoperable forms and a dynamic validation of an edit of an existing PIM. Thus an embodiment of the present invention discloses a process for supporting computer infrastructure wherein the process comprises providing at least one support service for at least one of integrating hosting maintaining and deploying computer readable code e.g. program code and in a computer system e.g. computer system comprising a processor e.g. CPU wherein the processor carries out instructions contained in the code causing the computer system to perform a model driven creation of an information template from a domain ontology a model driven reverse engineering of an existing wiki or other CMS to interoperable forms and or a dynamic validation of an edit of an existing PIM.

In another embodiment the invention provides a method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process of performing a model driven creation of an information template from a domain ontology a model driven reverse engineering of an existing wiki or other CMS to interoperable forms and or a dynamic validation of an edit of an existing PIM. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The flowcharts in and the block diagrams in and illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code e.g. program code and which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be performed substantially concurrently or the blocks may sometimes be performed in reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

