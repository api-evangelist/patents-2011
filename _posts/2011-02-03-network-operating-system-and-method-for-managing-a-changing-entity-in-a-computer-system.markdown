---

title: Network operating system and method for managing a changing entity in a computer system
abstract: A system and method for a network operating system including a complex data medium that enables the continuous reconciliation of the collaborative information process and product. The system generally increases productivity by enabling a network dynamic among knowledge workers. The system and method generally unifies e-mail and shared file management, synchronous and asynchronous collaboration, serial and parallel work flow, top-down and bottom-up collaboration, and information lifecycle management.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08209286&OS=08209286&RS=08209286
owner: Coral Networks, Inc.
number: 08209286
owner_city: Arlington
owner_country: US
publication_date: 20110203
---
This is a divisional application of U.S. application Ser. No. 12 714 094 filed Feb. 26 2010 which has been granted as U.S. Pat. No. 7 984 067 which is a continuation of U.S. application Ser. No. 10 549 306 filed Sep. 16 2005 which has been granted as U.S. Pat. No. 7 698 346 on Apr. 13 2010 which is the National Stage application of International Application No. PCT US2004 008406 filed on Mar. 18 2004 which claims the benefit and priority of U.S. Provisional Patent Application No. 60 455 739filed on Mar. 18 2003 the disclosure of each are incorporated by reference herein in their entirety.

This invention is directed to a system and method of providing collaboration in computer environments and more specifically to a system and method of collaborative knowledge work in a computer or network environment.

In today s world the concept of collaboration has many different meanings. In attempts to provide some measure of collaborative knowledge work the marketplace has fragmented data access systems so that composite and unified sharing arrangements are essentially unachievable. For example but not limited to the following technologies are often used in attempts to implement collaborative knowledge work E mail Workflow Automation Groupware Peer to Peer Collaboration Enterprise Portal Services Personal File System Data Grid.

One aim of collaboration technology may be to increase the productivity of knowledge work. Available technologies have not accomplished this goal. Despite significant investment in collaboration technology such as those undertaken to various degrees by Groove Networks Lotus Notes and Microsoft SharePoint a leading industry analyst still asserts that e mail is used 90 95 of the time when people engage in collaboration. A leading industry executive summed up the problem as The best that can be done today is simply using electronic mail where you re just mailing out things and you get various people proposing edits on those things and you re trying to pull it back together. There s no real sharing there there s just e mail going back and forth. 

Another leading industry research group reports that e mail is not an efficient interactive tool. And finally a leading industry research group states that it does not believe vendors can perpetuate the value added myth that groupware is anything more than e mail . In this last quote groupware is referring to collaborative systems vis vis e mail. The group concludes by suggesting that there should be more to collaboration than e mail. 

Two categories of technology currently capture the substantial breadth of available collaboration systems e mail and the shared file system. Whereas industry leaders peg e mail as the problem and offer solutions enabling a shared file system e mail continues to dominate the market for collaboration. E mail is not the problem and the shared file system is not the solution.

The general form of a data and software system today may be a single static and hierarchical tree structure. The file system and relational database both typically share this structure.

Good system design today may involve reducing complexity by normalizing data and object structures within a single hierarchy as a uniform . Stated simply the current medium of information work is discontinuous with this result workers store data have knowledge and exchange information. Workers know what they store and retrieve in data systems pull . They receive what they do not know information by explicit means of communication. Thus what is stored in data systems is not the information product but a data product. Its value is not stored but known and communicated by explicit means such as e mail and telephone .

If collaboration is a function of information and not data then collaboration today is performed by explicit means only and is not managed systematically. Users directly communicate information based on contextual knowledge of data through e mail phone and at the proverbial water cooler . Explicit direct information transfer is largely slow ad hoc unreliable and incomplete.

Existing computer environments for knowledge work while frequently labeled information systems are in fact only data systems. The product of knowledge work is a complex combination of content and context. Knowledge workers currently store the content of data as a file but remember the data context the informational component of data. That is the element of data that is information is not stored in data systems today. Existing data mediums lack the critical element of information context .

This explains why the content of existing data systems is largely void of information. These data systems lack the context required to convert data into information. Knowledge workers remember data context and store data content. A knowledge gap then exists by definition between the contextual knowledge of one worker and another why knowledge workers need knowledge . The knowledge gap is the unknown unknown versus a known unknown . The knowledge gap makes information today largely invaluable and unmanageable. The knowledge gap resultantly leads to the hierarchical top down structure of knowledge work and organizational hierarchy and hence its systematic inefficiency and unmanageability.

Stored data currently lacks the context information required to interpret data content. As such the knowledge gap accounts for a lack of knowledge transfer and ultimately the loss of core value in the knowledge economy. The reality of knowledge work today was recently described by a well know industry executive as the cess pool that is the file system . A large volume of data lacking information context is meaningless. Given the limitations of the human mind stored data is largely unmanageable and incapable of providing long term value.

The knowledge gap explains why data systems today are pull oriented. Workers pull data out of the system based on their contextual knowledge of its content. The knowledge gap also explains why knowledge work is pull oriented beyond computer data systems and is why individuals become information specialists or contextual knowledge repositories such as for example an attorney with specific knowledge of a client or matter . Knowledge work has remained pull oriented because the only complex data medium presently in existence is essentially the human mind.

As such while data is managed information today is unmanaged. The fundamental limitation flaw of each of the above system as a technique of collaboration may be characterized as follows e mail 

E mail is purely decentralized a decentralized process and product . Context is the central enabling feature of e mail based collaboration. The inbox is a unique and private store for each user. A message comprises a unique information context containing the message and file attachments for a specified group of recipients. Context may be considered a private information space shared by a group of individuals context may also describe the component of knowledge currently uncaptured by data systems . E mail provides superior context by its ease of use and flexibility. Participating in a private information context is simply a matter of creating or replying to a message with attached files.

However its explicit mode of information transfer induces overwhelming complexity in a collaborative setting. The quantity of explicit information required to coordinate a collaboration increases exponentially with the number of workers on the order of 2 where n is the number of workers resulting in information exchange that is slow ad hoc unreliable and incomplete and which grows increasingly inefficient with the number of workers or volume of managed information .

Finally with each file exchanged by e mail attachment the collaborative product becomes dis integrated . File sets and their constituent versions divide and exponentiate in number across user inboxes and file systems creating an intellectually unmanageable product and process work of one individual is frequently lost unknown or conflicts with others work .

The shared file system is purely centralized. As a result it provides only one context itself. Pure centralization thus sacrifices context in favor of a uniform and shared file structure. But how can two users work on the same document or stage a review cycle Typically users resort to e mail. A single shared structure is incapable of supporting the requisite context of interaction among workers in a collaborative setting. For example consider what occurs if a team creates two shared spaces and accessed by different members. By creating multiple information spaces the team has simply fragmented or disintegrated the information product. In gaining collaborative context e.g. for example a private shared information space the team typically fragments the collaborative information product and loses continuity. Finally allowing users to simultaneously edit to a file does not in itself provide context since there remains only one albeit shared information context e mail remains the only medium for contextual collaboration .

Serial and parallel work flow in current data management systems remain unreconciled. For example assuming an information space is currently embodied as a shared file store recent implementations automatically synchronize a space in a parallel work flow by exchanging deltas among members of the space in real time. Such peer to peer systems effectively enable parallel work flow but miss the necessary element of serial work flow. As a result knowledge workers resort to e mail for serial work flow. E mail allows the staged transfer of files versions and as such is the de facto standard for serial work flow. In this way work flow is bifurcated between two systems the shared file store real time conferencing technology parallel work flow and e mail serial work flow .

Those technologies typically identified as work flow system such as for example Microsoft SQL Work Flow Designer or InfoPath require construction of a work flow prior to execution. Such work flow is used to perform repetitive tasks e.g. billing accounting or surveys . However this system class is effectively and in practice excluded from use by knowledge workers since neither the process nor product of knowledge work can be known before it is performed that knowledge is required to construct an a priori work flow .

Therefore knowledge workers are at present stuck with divergent and unreconciled methods of work flow which neither individually nor collectively provide a workable solution. As a result workers experience information overload as they attempt to manually execute work flow as they attempt to integrate file versions forked and scattered across hard drives distributed via e mail.

The invention reconciles these deficiencies and introduces a new paradigm for collaborative information management.

In an aspect of the invention a system and method for maximizing collaborative productivity of knowledge workers is provided. The system and method may include at least one component to logically decentralize a collaborative information process of knowledge workers to logically centralize a collaborative information product of knowledge workers and to continuously reconcile the decentralized collaborative information process and the centralized collaborative information product.

In an aspect of the invention a computer program system and method for maximizing collaborative productivity of knowledge workers is provided. The computer program system and method may include at least one component to logically decentralize a collaborative information process of knowledge workers to logically centralize a collaborative information product of knowledge workers and to continuously reconcile the decentralized collaborative information process and the centralized collaborative information product.

In another aspect of the invention a complex data medium is provided. The medium may include a means for capturing relational continuity across user work servers and networks.

In another aspect of the invention a system method and computer program of data evolution is provided. The system method and computer program may include a mechanism and process of unifying change and state within a temporal and relational complex data medium.

In another aspect of the invention an information system method and computer program is provided. The system method and computer program include an information process that may deliver users the relational evolution and context of data in real time.

In another aspect of the invention a method system and computer program of access evolution is provided. The method system and computer program may include a means of derived access and a means of evolving access. The system may provide temporal continuity in the complex data medium CDM and collaborative work flow.

In another aspect of the invention a method system and computer program of a dynamic view is provided. The method system and computer program may include a mechanism and process for integrating mapping and synchronizing a dynamic view.

In another aspect of the invention a network application architecture system and computer program is provided. The architecture system and computer program may include an XML view and context bar. The application may be driven bi directionally by the system and user which may create a network dynamic among users through system applications.

In another aspect of the invention a unified system method and computer program of e mail and shared file management is provided. The system method and computer program may provide a natural mechanism for allowing individual group collaboration while maintaining data in a continuous and integrated form.

In another aspect of the invention a unified system method and computer program of serial and parallel work flow is provided. The unified system method and computer program may provide continuous collaboration among users over time and at the same time.

In another aspect of the invention a unified system method and computer program of synchronous and asynchronous collaboration is provided. The system method and computer program may include a means of reconciling e mail and instant messaging.

In another aspect of the invention a method and unified system method and computer program of security context is provided. The system may provide a mechanism and process of regulating information exchange and lifecycle.

The server and associated database may together persist and manage information and data. The server and database may exist in other variations as one skilled in the art would recognize. The server may support different network applications e.g. for example word processor enterprise applications data base applications or the like . The server typically contains the set of data and information accessed by the client. The clients typically provide the interface through which users knowledge workers access a network application. The client may also store and execute software belonging to the network application e.g. for example thick client applications such as word processors or may also provide the application through a thin client interface e.g. for example the internet browser terminal services . Client firmware include the PC or thin web client.

The Internet may connect remote clients and peers to the network . The remote client may access the network through security mechanisms including a firewall and virtual private network VPN . The peer is typically both a server and a client including the database a server client within a in a single unit e.g. a laptop having a database stored on its local hard drive the server stored and executed locally and network applications stored and executed locally . Servers and are typically called peers when they are connected by Internet and network . As peers servers and may jointly manage the data environment .

The network application is typically driven by both the server and user enabling bi directional managed information and implicit collaboration among users as described further below.

The CDM may logically exist across one or more physical data repositories. may physically reside but is logically one thing The CDM may be present and pervasive throughout the entire network. The CDM is pervasive as servers execute the method of information pushing data across the network e.g. into user view making it pervasive. The data is complete and self describing within a continuum. Encompassing the entire network and across users networks system data time.

The set of fields typically comprises a k tuple of data components each having a textual identifier. A field is typically defined as containing data of a given type including binary e.g. an application image boolean date time decimal globally unique identifier GUID integer reference string time span XML Extensible Markup Language or the like. Each field may be considered an attribute or property of a form s instance.

The set of elements typically comprises the hierarchy of elements contained by a form. An element typically defines the form of an instance as it is contained within the hierarchy. The element is typically contained by the root form or another element belonging to the hierarchy. Elements may be used in combination to define the form of a complex data structure. For example a subdocument element of the document form may allow or require a document instance to contain a subdocument . The element may impose further restrictions on the content model of the form such as the number of element occurrences allowed in an instance of the form. The structure of a form may include certain groups such as choice and sequence which allow the user to further specify the content model.

The CDM includes form derivation which may allow the structure of one form to derive one or more other forms. In certain aspects the derivation structure of the CDM may be analogous to concepts of the object oriented programming model OOP . Derivation typically allows a form to inherit fields and elements of each base form. For example a form typically includes its fields and elements plus the fields and elements of its base form s . The relationship may also be specified allowing an element of a form to override or replace an element belonging to a base form.

The structure of an entity may typically be defined by a form. The form of an entity typically includes a globally unique identifier GUID field identified as Entity UID enabling continuity of the CDM across networks including the Internet.

As illustrates the relationship is typically a kind of entity deriving the form of the entity since the set of relationships may belong to the set of entities . As also illustrates the form is typically a kind of entity deriving the form of the entity since the set of forms may belong to the set of entities . In this way the CDM is self describing since the complex data structure defining a form and the complex data structure of a form s instance e.g. a document instance may both exist within a common structure the CDM.

The process of building up a form typically involves building a new form out of existing ones. At the beginning of the process the user typically combines primitive types that may be built into the system e.g. for example integer or string . The system database typically has tables corresponding to each element of the System Forms System Elements System Fields and other elements of the form since each instance is typically itself an entity. Therefore creating a new form typically results in a new instance of a Form entity typically stored as a record in the System Forms table as well as additional Element entities that may be contained by the Form typically stored as records in the System Elements table as well as additional Field entities that may be contained by the Form typically stored as records in the System Fields table as well as other entities that may be contained by the form structure e.g. for example including the content groupings Choice and Sequence as well as containment relationships typically creating the complex data structure of a form typically stored as records in the System Containment table as well as any base relationships that may connect the form entity with base forms or form elements with base elements typically stored as a record in the System Base table and so on.

Creating a new form typically also prompts the system to create the database table that may contain entity instances of the form. A database table typically embodies the entity instance of a form. The database table typically comprises a set of columns corresponding to each field of the form. The database table is typically automatically created by the system when the new form is defined e.g. for example when the complex data structure of a form and elements is created . The table s name typically adopts the qualified name of the form e.g. for example System FormName . An entity instance of the form may then be contained as a record in the table corresponding to the form. Elements of an the instance of a form instance are typically connected to the instance of a form by containment relationships. For example a containment relationship may connect a document instance whose form is document with its nested subdocument s which may be defined as element s of the document s form .

The CDM comprises a graph network of entities and relationships. The entity may be an anchor of reference or relationship target the relationship may be implemented as an entity subtype . The entity may have a set of properties fields attributes. The relationship may be a k tuple wherein each member may be a reference to a target entity or a literal value. The meaning of an entity may typically be defined by relationships connecting it with other entities. To this extent as an entity may be defined vis vis other entities the relationships defines both meaning and context of the entity.

The CDM may be an evolving and temporal medium. The medium reconciles change and state. The entity may typically be the unit of state. The relationship may typically be a unit of change and time. To the extent that a relationship may be an entity subtype it becomes a part of the data state. Entities and relationships are created but are not necessarily destroyed they may be immutable and cumulative.

The process of change or data evolution in the CDM may be largely driven by the addition negation of relationships. For example an entity typically changes when a relationship is added for which it is a member target reference. In this exemplary case the relationship is the change and the target entity is that which is changed. The entity may also be considered as changing by transitive association with other entities through association with any entity belonging to the same graph with which the entity is associated . The process of change in the CDM may also be driven by the creation addition of entities.

The relationship may record the time at which it is added to the graph. At the conclusion of a relationship between entities a relationship may be negated. Negation is the additive inverse of creating a relationship effectively canceling out a relationship while not necessarily deleting it an embodiment may structure negation as a property containing the time at which negation occurs . If each relationship is considered a term and addition negation the term s sign positive or negative then the state of an entity at time t may be considered the sum of all relationships up to time t . In other words summing change yields state. This may be considered the relational algebra. This captures the notion of an evolving data system .

If on Thursday document is removed from folder the relationship is not necessarily deleted. Rather the negated bit of the relationship is changed from its default value false to true. To integrate the current state of the folder the system may treat each relationship entity pair in a way analogous to algebra such that the current sum of folder is the document document document document or by canceling out the negated document document document or the set document document . Note that neither Document nor Relationship has been deleted from the CDM following the removal of Document . To compute the state of the folder immediately preceding the negation of Document the system sums the previous set of terms not including document arriving at document document document or the set document document document . One of ordinary skill in the art would recognize that the example of is not limiting and in fact may easily include other varying scenarios which may be very complex.

Continuing with at step an actor may choose a set of entities to relate. For example the actor may choose to instruct the system to insert a document in a given folder. At step the actor may instruct the system to insert the containment relationship linking the folder as containing entity parent and the document as the contained entity child . If this action is allowed it causes a change to the folder entity. At step the process ends.

Prior to the invention data systems fall under several categories of physical data location. The client Client Server method is centralized serving data from a central server. The peer to peer P2P mechanism is decentralized replicating or sharing data across a distributed array of data storage systems.

The invention may reconcile physical data centralization decentralization by including a method of identifying entities by a globally unique identifier. Unlike the World Wide Web prior to the invention the entity s unique identifier UID is not typically based on the data s physical location. Rather the UID may generated randomly with global uniqueness for example an embodiment may be the System.Guid.NewGuid method included in Microsoft s .NET framework . Each entity may then be identified by its associated UID an embodiment may include UID as a field in the form definition of the entity .

The invention may provide for essentially any system e.g. a PC or a Server to become a system site. System sites may persist and manage data and participate in a distributed P2P configuration decentralized . That site may simultaneously assume the role of server or client in the centralized client server configuration wherein the client accesses data remotely managed by a server .

As a result the invention may decouple the logical structure from the physical structure i.e. location of data. This allows the platform to automate fully the physical placement of data and its replication synchronization. The manner of data placement replication synchronization may be optimized by the system on the basis of one or more 

The invention establishes and provides a process of complexity . The process may be driven by a computer managed environment the environment operating environment network operating system system platform or platform environment in which data and information consumers actors participate receive process and create information data in CDM managed by the environment.

The invention defines complexity as relational density in a data structure. A function of the system according to the invention may be to increase data complexity on the basis that data manageability is a function of complexity. The process of complexity may have the effect of creating a data continuum in the CDM. The process of complexity may occur through following operations including linkage expansion granularization and contraction unification contraction and expansion may considered symmetric elements of the process of complexity . These operations have the effect of increasing complexity and continuity of a given CDM for example 

Relational linkage includes the process of creating new relationships. The effect of linkage includes driving information and data value transfer since relationships may serve as entity attractors . That is the effect of linkage includes maximizing the visibility of entities of perceived value while minimizing the visibility of little perceived value. Linkage adds new relationships to the information network increasing relational density. Linkage may drive information transfer as relationships serve as entity attractors . Linkage promotes entities of value and eliminates entities of little value over time. Linkage may ultimately be a process of contraction increasingly collapsing the space upon itself as a data continuum.

Entity expansion or granularization includes the process of increasing the number of entities by subdividing an object concept such as for example labor or a document or the like as multiple entities increasing the potential linkage and thereby increasing the relational density over time . For example a user may subdivide a document as a collection of one hundred documents each serving as a site for relationships. Granularization increases the precision of information. Granularization is also a logical extension of the evolution of thoughts and ideas.

Unification according to the invention includes the process of the entity contracting or collapsing upon itself. This may occur as multiple entities are combined as one. For example if attorneys discover that several legal documents serve the same function they may substitute the group of documents with a single instance. Unification includes the effect of increasing the data continuity.

The process of complexity may substantially contribute to the formation of a data continuum . Prior to the invention the simple structure of existing data systems fragments and dis integrates data for example file copies versions messages stand alone data stores networks . The invention allows the complex medium to evolve as a network of information that typically becomes with increasing continuity increasingly Consistent complete correct self describing and closed engulfing network externalities . The process may also include the effect of eliminating data inconsistency and redundancy.

An aspect of the data continuum is its effect on productivity. The continuum includes the effect of driving implicit collaboration among knowledge workers a dimensional force feedback induced by the intersection of information product and process. For example as users work within the same space the intersection of data through relationships may force the alignment and normalization of their individual processes and work product dramatically increasing productivity.

An evolving access model provided by the invention may allow actors e.g. users groups components organizational units to gain access to data and information through access derivation . Access derivation typically includes a hierarchy along which access permission is created and flows evolves. Each node in the hierarchy may be an access control providing an actor e.g. user access to a set of entities the access group . An access control may derive access through a relationship connecting to a base access control. An embodiment of the invention may create the system as the root actor in the hierarchy of derived access.

Access derivation typically includes a process of extension. For example a user A may extend his her access to another users group B. User B may in turn extend access to other users groups if the user A set a transfer bit allowing her to do so. The bits the user A may have set include change manage evolving transfer 

The derivation hierarchy may exist as a data structure within the CDM as a part of the data continuum and may be constructed as a set of the following entities and relationships 

Knowledge work is largely a process of change. The flow of change includes two forms in parallel and serially. Serial work flow includes the staged transfer of change along a linear path i.e. from one space to the next. Parallel work flow includes the transfer of change within a space typically among members of the space .

The invention provides a method of reconciling unifying serial and parallel workflow. Such unification includes an evolving access control model or evolving access built within the CDM. The method of unification includes the coupling of evolving access and evolving data. Members of an information space participate in parallel work flow as the environment automatically propagates work among member views in real time. Users and groups sequence work staging information flow in an automated process of serial work flow. The following sections describe embodiments that perform parallel and serial work flow.

Access may evolve in parallel and serially. Parallel evolution may occur as members of an information space create change the product of work . Those changes relationships with attached entities may then automatically become available to other members of the space and their views continuously updated in real time. The space in which parallel evolution occurs may be called an information space since a user may share access to all change made in the information space. Serial evolution may occur as members complete work they have been assigned or have obtained by derived access. Those changes made by the member which typically belong to the access group of the member s access control may then automatically be transferred to base access controls and derived access controls according to the exclusion and evolving bit. The exclusion bit typically prevents the flow of change to a base access control until the work is completed when the exclusion bit is reset . However change typically continues to flow to derived access controls during that period or when the exclusion bit is false if the evolving bit of those derived access controls is set as true.

A recursive mechanism enables combinations of serial and parallel work flow that are powerfully complex while systematically automated by the invention.

Creating change in the form of new entities through derived access may automatically expand the access group under the access control used to make the change . is a flow chart of an embodiment showing the steps by which the access group of an access control may be expanded starting with step . In step the user may create a new entity E through access control A. At step the system may automatically expand the access group G of access control A to include entity E. For example if user changes entity Y by first creating and then inserting entity E via a containment relationship R also created through access control A the system may typically expand the access group to include both relationship R and entity E. At step the process ends.

The personal computer PC is often considered the domain of knowledge work which is complex. The distinction between structured and unstructured remains because no data structure has yet achieved the requisite complexity to store the complex product of knowledge work. While the relational database is structured its structure is too simple to contain the product of knowledge work simple data medium . It is also static relational structure vs. the dynamic relational structure that may capture the product of knowledge work. Existing simple data systems may contain unmanaged information but do not include managed information . An example of managed information is actual relationships stored in the data medium which capture the relational context and meaning of data.

The invention establishes context as the relational component of data that may capture and convey contextual information. This is the meaning of information bearing data . Prior to the invention such contextual data is not typically stored it is remembered by knowledge workers and communicated by explicit means of information such as for example e mail.

An aspect of the invention includes a computer managed complex data medium CDM a network of information bearing data. The invention dramatically increases productivity on the basis of the relational complexity that becomes the informational component of data. Such complexity becomes the relational data context of data content. The invention maintains relationships or managed relationships as the vehicle of complexity and by extension managed information. The invention serves to increase data complexity through interaction by multiple knowledge workers within a common information space. The invention fosters the cumulative effect of complex data that is compound value creation through a scalable information process.

The invention provides an information system the platform or platform environment as a mechanism for managing and delivering stored information. The information system establishes implicit information as the catalyst of collaborative knowledge work. Implicit information includes relationships delivered to the user as they are created. For example when a user inserts a document into a folder a new containment relationship typically connects the parent folder with child document. The new relationship may be delivered as implicit information to any user consuming e.g. viewing accessing updating or the like the folder whose view of the folder is updated. When a user sends e mail within the information system an access relationship may be created associating the message and recipient. The information system may deliver implicit information when it notifies the recipient of the new message received.

Prior to the invention knowledge workers communicate information and coordinate the process of knowledge through direct and explicit means of information. The interaction is direct worker to worker. However the invention provides indirect coordination worker information system worker of knowledge workers through implicit information. As a result to work in the complex data medium is to collaborate. For example since users share a common information space relationships created by one user may impact the process of another user hence aligning their view of the information product or allowing them to collaborate implicitly. Or since user action is induced by his view of the information product by allowing users to occupy the same information space they become aligned implicitly in their collaboration. Information transfer is the consumption of relational information created by other users allowing the alignment and efficient collaboration to exist between users. By making information transfer an implicit inherent part of working with the CDM the invention establishes knowledge work as inherently and systematically collaborative. Managed information becomes the catalyst of collaboration product coherency efficient process coordination and organizational productivity.

The invention provides for a computer application such as for example a word processor to evolve from a unidirectional one way to a bidirectional two way data processor. The application may become a bidirectional medium since it is driven by both the user and the platform. Applications currently reach into a platform through the platform s application programming interface API pull . However the invention establishes the bidirectional channel such that platform may also reach into the application delivering information direction push . As such the platform API may become a bi directional data environment. In this way the environment allows in effect the work of all users to reach into the environment of any single user.

An embodiment of the bidirectional interface may include the dynamic view. An embodiment of the dynamic view may be an XML projection XML View of the CDM that. The XML View is typically consumed by an application. The XML View may present a flat hierarchical projection of relational data of the CDM. The XML View may use the document object model DOM as a universal representation for the XML View. The XML View typically maps entities to XML Elements and the relationships to the parent child containment structure. The view is typically automatically integrated by the environment along a set of axes such as containment and time typically as a dynamic view and is typically synchronized with the CDM in real time. The XML View may provide an efficient process communication with the server by sending incremental updates between bulk updates. For example if a user changes element E in the Xml element hierarchy of an XML View the XML View class or system may determine which entity the element corresponds to. If the user has created a new relationship with the given entity the XML View system may send an incremental update in the form of a message which may indicate the kind of relationship created and entities connected by the relationship. If the user updates the data of an entity e.g. for example a field the XML View system may send an incremental update in the form of a message indicating the entity to update field name and new field value. An embodiment of the XML View is explained more fully in U.S. Provisional Application No. 60 455 739 entitled Network File System and Method which is incorporated by reference herein in its entirety including the computer program listings of the appendix.

In embodiments the relational context bar or information bar or side bar or information side bar may deliver contextual information to the user in real time. It is typically positioned as a window within or beside the window of the application. Contextual information is typically considered relational information for entities a user application Consumes at any given moment e.g. for example entities a user is browsing editing selecting working with and so on . As the user consumes an entity a relationship may be established between the entity and user allowing the platform to deliver relational information associated with the entity. For example the user may receive a list of messages comments associated with the section of a document see who else is editing the section or browse its semantic web of association. The context bar includes all tasks which apply to specific entities consumed by the user at any given moment. For example the task share document allows the user to share the document the user is currently editing with other users.

By way of example is a flow chart of an embodiment illustratatively showing steps of the application context bar starting at step . At step the user may browse or select an entity s . The user may be considered as actively consuming the entity s while the entity is selected. At step the context bar may automatically display all relational context of the selected entity s as well contextual tasks applying to the entity s or other entities. At step the user may select the task Manage or any other task gaining exclusive manage access to the entity. At step the context bar may automatically displays relational context showing the user as having exclusive manage access to the entity s . Such automatic relational discovery of contextual information or data related to entity s consumed by the user and presentation is typically a component of the process of information. At step the process is complete.

The process of access evolution in combination with the evolving data medium may fulfill the level of complexity required to support complex work flow and dynamic interaction among knowledge workers. The process includes relational context which may provide users an entirely personal view of the information space depending upon the groups activities and other information contexts of which they are a member. That is two users may receive an entirely different view of the same document entity. The system includes a dynamic view typically of the CDM which is typically custom integrated for a specific user or any actor consumer in the system .

By way of example is a functional block diagram showing an embodiment of compiling a unique view for the user. illustrates a folder containing folders and through containment relationships and . Access control may consume through relationships and the folders and . Access control may consume through relationships the folders and . That is access control may grant access to folder which is not granted by access control . The state may be the result of the following scenario. For example User A who may have access to folders and through access control may create creates derived access perhaps by attaching folder to an e mail message through access control for user B. User A may also grant manage access to access control user B. User B subsequently obtains an exclusive manage access an exclusion on folder entity . User B then inserts folder in folder by way of the containment relationship . User A does not at that point gain access to the newly inserted folder since user B holds an exclusion on folder . Therefore when users A and B view the folder. the system may typically generates two separate views for each user. User A s view may show folder as containing folder . User B s view may show folder as containing folder and folder . In this way each user may receive a dynamic view based on their typically unique set of information contexts of which they are a member. When user B releases the exclusion the system typically updates user A s view in real time based on the access evolution which creates a new consumer relationship connecting access control and folder . In this way user B may work ahead of user A in time e.g. from user A s frame of reference and B may sit behind user A in time e.g. from user A s perspective illustrating temporal continuity in the CDM process of access evolution and work flow.

Real time updating provides an example of how implicit information or managed information may be consumed by an application in this case the file explorer . When the relationship is created the system typically responds to the change in the form relationship by looking at all entities affected by the change. These entities may include folder . The system typically then notifies the application consuming folder i.e. both instances of file explorer run by users A and B of the change or relationship . The application may respond by automatically updating the view to include Folder .

Referring again to the integration of a dynamic view at a specific point in time is demonstrated. To integrate the hierarchy at a specific time the system typically filters the containment relationships along the time dimension such that only those relationships and by extension the contained entities existing at or before the specified time are typically included in the dynamic view. may illustrate the process of generating a dynamic view at time t . If containment relationships and were created before time t and after time t the system may include in the dynamic view of folder documents and via relationships and but Would not typically include document via relationship .

Generally the dynamic view may be considered a 2D representation typically flat such as XML View and mapping of 3D relational data typically the CDM . The dynamic view may be further considered by its typical process of real time bi directional synchronization. The dynamic view may be further be considered by its typical ability to reflect access evolution. The dynamic view may further be considered by its typical ability to link the information process e.g. for example including contextual information to the representation e.g. for example allowing a user to navigate relationships attached to entities contained in the view . The dynamic view may further be considered by its typical ability to provide a standard 2D view of relational data to an application.

The invention may provide automation as the autonomous actor in the system typically comprising a computer program. The automation typically interacts with platform in the same way an application interacts with the platform and typically interacts through the same interface used by an application except that automation is typically self governed and may be considered an actor in the system compared with an application which typically acts on behalf of a user where the user is typically an actor in the system .

The invention may automatically raise or load the automation to process an event. For example the system may raise the component automatically to process new information relating to data consumed by the automation. The automation may be considered a component of the system. For example a user may automate a semantic web allowing the automation to respond to interaction users have with members of the semantic web.

The automation may receive several events including before change and after change . These events may belong to the general interface provided by the system as a component of the information process. The before change or pre change event typically allows automation to respond to a change before it is made. The automation may be allowed to preempt change by throwing an exception which is typically captured by the platform . The after change or post change event typically allows automation to respond to a change after it is made. The before and after change events may be a standard element of the platform API e.g. for example applications may process the same events .

The platform may manage automation as data persisted within the CDM. When managing automation the system typically automatically loads and terminates automation based on data the automation may be known to consume e.g. for example through consumer access relationships .

Marketplace fragmentation is largely due to polarization. A natural tension exists along the real dimensions of knowledge work including centralization decentralization and synchronous asynchronous but which the current data paradigm is incapable of reconciling. Systems have swung to the polar extrema of each dimension in an effort to gain a uniform design. As a result the market is fragmented among many systems which neither individually nor collectively provide a workable solution. The invention reconciles the major axes of collaboration which currently exist as a fragmented set of disparate technologies.

Information management largely lies in the reconciliation of centralization and decentralization. The invention enables information management by reconciling two forces of collaboration the decentralized information process and the centralized information product.

Knowledge work includes a continuous cycle of information product and process . The process of knowledge work is change which may feed a collective information product. Product feeds process as knowledge workers allocate work based on their knowledge of their collective work product. Process may then feed product as workers execute work change.

The process is necessarily decentralized since knowledge work is at any moment an individual effort. But the product is necessary centralized as a collective and integrated work effort. Thus reconciliation of a decentralized information process and centralized information product is a necessary element of collaboration.

However the CDM according to the invention is sufficiently complex to contain a process of contextual workflow information process within a single continuous and integrated information product repository information product . The invention includes the effect of maximizing worker productivity by continuously reconciling the collaborative process with a collective work product through implicit relational information. The invention may push to the user in real time the relational context of entities which are consumed by the user s data view at a given moment. As the user works with a given entity e.g. browsing or editing the environment may present the set of information which exists through relationships connecting the given entity. Those relationships may not only provide the entity s context but may also control the context in which the user works with the entity.

The context controlled by relationships includes for example a user s view of a given entity control of the entity and action taken upon the entity. Such control may include the evolving access model which may give two users different views of the same entity e.g. document based on their role in a process of serial work flow. For example the environment may display the draft version of a document to one user e.g. who may be working on the latest set of best practices and a previous version of the document to another user who needs to review the working set of best practices . Another example of contextual control is the activity which contains set of work change contained across a set of files. The access constraints of the activity prevent any user who is not a member of the activity from seeing or editing document sections changes belonging to the activity. But for those members of the activity the environment may display work change in real time across the set of filed or allow the user to browse and review the set of change.

The context provided by relationships may illustrate the meaning and appropriate interpretation of a given entity. For example the activity previously illustrated also comprises a semantic web of association linking work change belonging to the activity. As a result a user who browses the content of a document containing such a change assuming required access is notified e.g. in a side view that the change was created as part of the activity and for its stated purpose of the activity in association with all other changes belonging to the activity which the user may browse and review . Also associated with the change and pushed into the users side view may include discussions and messages exchanged by users in course of making the change which allow the user to understand the exact wording of the change. If the user decides to edit the section containing the change the environment may automatically block other users from editing other members of the semantic association protecting consistency of the association . The mechanism of collaboration reconciling centralization and decentralization may be analogous to the industrial revolution s assembly line which continuously reconciled the division of labor among workers and individual stations a decentralized process and the integrated collective product of their work a centralized product . The invention may be considered as transferring collaborative complexity typically managed in the minds of knowledge workers into data and data relationships within the managed CDM . Mitigating complexity by this mechanism may typically allow the invention to manage and enable collaboration on a large scale e.g. for example enterprise wide or inter enterprise collaboration and knowledge management .

The invention provides a network file system NETFS as a method of collaboration for file oriented or traditionally unstructured and PC centric knowledge work. The file system is built within the CDM. The file may be implemented as an entity its structure defined by a form . Every entity managed by the user in the file system is of a form which derives the file. For example the message and folder and activity are typically files deriving the file s form . The relational structure of the network file system is built using a variety of relationships including the containment relationship access consumer relationship.

A mechanism of access control and sharing in NETFS includes e mail built directly within the network file system. Users may create derived access to a message and attached files in an e mail interface thereby sending the message. The e mail infrastructure of NETFS may be integrated with existing client applications such as Microsoft Outlook. Users may also access messages as files through the NETFS file explorer.

An embodiment of the explorer contains at the root level My Documents and My Inbox. My Documents contains files accessed managed by the user providing a folder in which the user can organize his her data. My Inbox contains messages sent to the user through derived access. When derived access may be created the new relational data connecting the user with the message automatically updates the user s Inbox view.

The invention embraces the e mail paradigm as a powerful mechanism for creating collaborative context. The work flow model of the invention unifies e mail and shared file management within a single continuous information space. The invention may provide e mail as an element of the network file system reconstituting the infrastructure of e mail within the CDM platform. Messaging becomes an integrating factor prior to the invention it is a dis integrating factor as users draw one another into shared information spaces which belong to the continuous CDM. The access control model is able to allow a user to exchange e mail in a way that is consistent with the current e mail paradigm while synchronizing and streamlining the subsequent process in real time.

The e mail message may be a vehicle for creating derived access sharing the message and its contained file hierarchy. Contained files may include submessages for example a reply to the entire message or an in line reply to a section of a message. Contained files may also include file attachments . Since the folder may be implemented as a file subtype users may exchange an entire folder system by e mail. By the process of data complexity and continuity the folder system may remain fully synchronized and integrated regardless of how it is accessed and updated in serial and parallel work flow.

In the same way groups organize work in a single document by multiple activities groups may organize internal discussions within a common message. Therefore while two users may have different views of the same discussion the discussion remains an integrated body of messages. Users may invite others into a discussion by forwarding them the message containing the discussion. The e mail forward in NETFS includes other messages or files involving users in a shared space by invite.

By way of example is a flowchart of an embodiment showing steps of creating derived access through e mail starting at . At step the user may select a set of entities to send via e mail attachment. At step the user may instruct the system to send the selected files as e mail attachment. At step the system may create an empty message entity. The user may alternatively send the message with no attachment. At step if the user made attachments the system may insert the selected attachment entities as a children contained by the message entity. At step the system may present the e mail editing interface allowing the user to edit the body recipient and other fields of the message. At step the user may edit the message and other fields. At step the user may instruct the system to send the message. At step the system may create derived access for the message and other contained or attached entities e.g. the set E . In creating derived access the system may typically include in the access group the containment hierarchy of every entity belonging to the set E. For example attaching a folder system F to message M may typically include all files contained by F e.g. for example the folder hierarchy in the access group. At step the system may automatically established derived access for the message entity and nested entities for recipients of the message. The system may establish derived access for recipients individually. The system may establish derived access for recipients as a group. At step the process ends.

The invention may include a hierarchical structure containing organizational units OU s . The organizational unit typically contains other organizational units and users in some implementations the user may be considered an OU . The group is typically implemented as an organizational unit. Access control may designate the organizational unit as a recipient of shared access. For example a group may receive shared access to an entity. Any member of the group may then receive access to the entity. The scope of an organizational unit in terms of security policy typically includes its membership typically any user or organizational it contains carries access the OU derives .

By way of example is a flowchart of an embodiment showing steps of creating derived access for a group of recipients starting at . At step the user may select a plurality of users. At step the user may assign the set of users access to one or multiple entities. At step the system may automatically take the set of users and create a group a new organizational unit containing each assigned user group member . At step the system may automatically create derived access for the group. At step members of the group may automatically receive access to the entity s as a group. At step the process ends. Prior to the invention setting up groups for purposes of collaboration typically involved an central administrative procedure creating a static group . The invention may thus allow knowledge workers to self organize in groups dynamically and easily perform group work while preserving and remaining within a continuous and integrated data medium as may illustrate.

The invention includes a mechanism of reconciling synchronous and asynchronous collaboration within the CDM. The mechanism is based on the transformation from explicit to implicit information. The invention establishes a powerful mechanism of asynchronous information collaboration based on the relational structure of the CDM. The invention may enable asynchronous information by pushing relational information that is in context to the user in real time typically entities consumed by the user at a given moment are in context . The method of asynchronous collaboration may then subsume synchronous collaboration allowing reconciliation of synchronous and asynchronous collaboration.

The system provides structured messaging as a mechanism of unifying synchronous and asynchronous messaging. The mechanism may unify e mail instant messaging and threaded discussions as a single relational structure. The common container used is the message entity which may be for example an ordinary file.

The message may extend the file as a unified method of communication among workers. It may be a recursive structure enabling the Message to become a threaded discussion among multiple workers either synchronously e.g. as an instant message discussion or asynchronously e.g. as an e mail message . The user may insert an attachment e.g. any file within the body of the Message. The application may display the attachment in line and or as belonging to a set of attachments.

The mechanism of structured messaging may thus be hierarchical. The mechanism is described in further detail for various elements of messaging including 

The existing e mail paradigm fits and is well behaved within the unified structure. The invention improves the e mail paradigm by adding structure to a medium which is presently flat. Whereas the inbox is typically a list of messages i.e. prior to the invention the invention now includes the ability to create structure in a message store such as My Inbox . The structure may be applied as for example A reply message A to message B inserts message A as the child of message B as though B were a folder containing a document. A forward message C of message A inserts message A as a child of message C. A file F attached to a message D inserts file F as a child of message D. The CDM allows and provides for a user to attach an entire folder system since the root folder is file . The body of a message may also include in line comments or messages which are related to sections of the body of the message. This allows a user to respond to sections of a message individually.

The existing instant message IM paradigm also fits and is well behaved within the unified structure. The invention improves the paradigm by allowing IM to become a part of a persisted structured prior to the invention IM lacks the relational context in which to persist a transient message . As a result the invention may allow a discussion to occur and continue synchronously and or asynchronously. The invention may also allow a member of a discussion to spawn subdiscussions. A subdiscussion B of message A may be comprised of messages SI to Sn where n is some positive number greater than one . Each message Sx where x is a positive integer number may be inserted as a child of message A. In this way message A may become a discussion thread . The user view of a same time instant messaging discussion may include a header showing the containing message or discussion thread and a list of discussion points content of messages contained by the discussion thread .

The invention provides for establishing messaging as the comment mechanism in the document review process. This allows a user to insert a comment by selecting a range of document content and clicking insert comment . A window or sidebar entry point appears in which the user may enter his or her comment. The comment is a message in one implementation the document contains a range object which is contained by the message . The environment may immediately integrate the comment into the document views of users who are also working on that document and who have access to the message . The message may then become a group discussion as users create submessages within the comment by e mail reply or instant message . The same mechanism may enable a user to select and reply to sections of an e mail e.g. in a manner similar to embedding comments between carated sections of a traditional e mail message .

A structured message hierarchy may include messages created in same time and asynchronous format. Users may create an e mail message in the e mail editor for asynchronous communication while other users may create a same time discussion where the e mail message may become a discussion thread each IM message becomes a child of the e mail message in the same way an e mail reply is inserted as a child of the message . In this way users are able to select the appropriate medium synchronous or asynchronous and an associated user interface e.g. e mail editor IM discussion viewer or other interface while creating an unified message space.

Therefore whether the user selects for example an e mail interface or IM interface to create a message the environment delivers the message in real time by relational association with documents or other entities which other users consume . As a result each user consuming an entity associated with the message may respond synchronously. Or a user may respond asynchronously e.g. as he she browses the document at a later date the message automatically appearing in the relational context side bar assuming read access . By relating messages to other entities communication among workers becomes implicit.

The knowledge gap created by direct and explicit information may include the following organizational effect. The organization manages the exponential difficulty of managing a process through direct coordination due to the exponential growth of explicit information in a network by instituting top down hierarchy. As a group expands it becomes increasingly subdivided and hierarchical in an effort to gain manageability. Managers assume positions in the hierarchy. Hierarchy is required in the context of explicit information but has the effect of making the organization static and unresponsive to change.

A principle of knowledge work established by the invention is that knowledge work is fundamentally dynamic. Neither the product nor process of information work can be known before the work is performed. Otherwise the information product would already exist. Unlike a manufactured good there typically is only value in creating information once. There is value in creating the same automobile many times there is typically no value in creating the same information twice. This is the fundamental difference between the new knowledge economy and the old manufacturing economy. Knowledge work is fundamentally dynamic manufacturing work is fundamentally static.

The principle of knowledge work explains why hierarchy fails in the knowledge economy. It also explains why attempts to apply static workflow automation in knowledge environments such as Microsoft s SQL Workflow or Lotus Notes appear to be insufficient and why a priori process management software such as Microsoft Project appear to be in limited use. The principle also explains why central statically ordered file sharing systems have failed to capture market share while personal file systems and flexible e mail transfer have become ubiquitous as knowledge work. These systems have failed because they are static and linear. Knowledge work is dynamic and non linear.

In contrast the invention establishes a mechanism of knowledge work from the bottom up and as a network dynamic . Individuals groups activities may self organize based on the relational information which fuels implicit collaboration. Workers do not need to coordinate their work explicitly or even know they are working with one another. To work in the space is to collaborate. Processes of individuals groups and groups of groups become aligned and efficient as a product of individual work within the shared environment.

The invention may also reconcile bottom up and top down collaboration by allowing users to assign work to others top down or to self assign work bottom up based on relational information. The environment may allow an organization to roll up activities creating from the bottom up into a top down hierarchy to assess productivity an evolving product or evolving process. Executives may receive a continuously integrated view of the process and product of knowledge work.

The environment provided by the invention establishes a framework for maximizing bottom up collaborative productivity and top down decision support business intelligence. Data systems manage state. The information system of the invention establishes managed change. Prior to the invention change is unmanaged. An example is Microsoft Word s document format which captures change only until it is absorbed by document state e.g. when a user accepts a change . Prior to the invention systems may have the ability to capture change but users manage change. Those users manage the reconciliation of data change they manage the transfer of changed data via e mail they communicate and direct the process of change by e mail and other explicit means and they manage the subsequent meaning of change.

The invention enables the fundamental reconciliation of state and change within the CDM as the confluence of managed process change and managed product state. Several constructs built upon the mechanism of relational change further illustrate the reconciliation.

The invention provides for establishing the activity as a natural container of work change . The activity may be implemented as a file for example. The activity s membership may be determined by derived access an access control granting view and or manage access to members of the activity. A group is typically created to contain the membership of the activity. This group is typically the recipient of derived access. The activity may include a summary or statement of purpose a set of threaded discussions a set of shared tasks a set of working documents and a structure called a semantic web which captures work performed by activity members. The structure of the activity may be recursive containing sub activities. In combination with the shared task set the activity may provide a data structure corresponding to the task hierarchy of project management software such as for example Microsoft Project enabling fluid integration of project tasks and shared data.

The invention provides for establishing the semantic web or semantic association as a mechanism of managing and maintaining the correctness completeness and consistency of data 3C . Semantic association may capture the linkage which exists in the embedded meaning of data. The semantic web includes the ability to capture that meaning. The web may relationally link data within a structure such that members of the structure are considered elements of a whole. The web may exist on multiple levels as in a hierarchy. Automation may allow a semantic web to respond dynamically and in real time to the consumption view change of member data. Automation may allow the web to maintain 3C. Action taken by a web may be governed by its access to member data. For example the web may preempt change being made by a consumer or provide information to a consumer.

An activity may capture work as a semantic association. Each change to a file belonging to the working file set contained by activity may become part of the association if the change to the file is made under the activity . If several activities contain the same file the user may choose the activity under which the work is performed. The activity and its semantic web may allow groups to work in the same document or set of documents under different activities. Access to work performed within one activity may then be restricted to members of the activity. If a user belongs to several activities which produced change in the same document the user s view of that document may then automatically contain both changes.

The activity enables data atomicity and consistency by releasing to evolution the set of change only when the activity has been completed . The semantic web controls the subsequent correctness and consistency 3C of the change set. For example if a user browses a section containing a change which belongs to the web the relational information sidebar will display the association explaining the context in which the change was made. The information provided may include the activity allowing the user to understand the purpose and meaning of the change. For example consider a set of documents containing a set of changes made to satisfy a certain provision of an employment agreement perhaps as part of an activity delegated and carried out by several attorneys . Eliminating or changing any element can destroy the force or meaning of a provision. The semantic web may allow each attorney reviewing the document to understand its meaning. Each attorney typically receives contextual information in the context bar showing the relations that exist among changes sections across a set of documents. In this way the semantic web may allow a group of collaborators to protect the meaning consistency and correctness of data content.

The semantic web may also have automatic trigger logic tied to a specific data element. Therefore if the element changes the web executes the automation. For example the semantic web may target a section of California law which if changed by the California legislature may impact the correctness and or force of a document. Event driven logic is triggered when the section of taw is updated notifying the appropriate attorney such as for example the attorney who drafted the document. As a result the automation sends a message to the appropriate attorney.

The semantic web may implicitly link the work of users and enforce constraints. For example if two users working in separate documents begin to edit different members of the same semantic association its automation may send each user information in real time enabling same time collaboration and allowing them to discuss consistency . Or if a user begins to update any document content contained by a semantic association as an example relationship logic may automatically extend the exclusion making the section read only to other users to other members of the association for the duration of editing.

The semantic web may be used to link other related data such as the section of a document describing a graph and the graph itself. If the graph changes the text explaining the graph may be incorrect or visa versa. If the graph automatically updates as a result of linking within the graph the association may automatically notify the appropriate user.

In these ways the invention enables an organization to manage change. Once a knowledge worker understands the meaning of an information product he she is prepared to deploy its value. In a shared environment the effect of self describing relational information includes the creation of compound value. The environment of the invention drives traffic e.g. changes to the entities via relationships. Therefore the relational density surrounding an entity may quickly recognize its value to the organization or alternatively eliminates the entity from view if of deminimus value. In this way information value may be continually reinvested and redistributed throughout the organization enabling knowledge management.

Referring again to the dynainic view provided to each user browsing or editing consuming the set of documents is constructed based on her activity membership more specifically the access control her granting access to the activity and member content . If the user belongs to only one of the activities a document belonging to the file typically includes only change belonging to that activity. That is the dynamic view may integrate all change belonging to activities of which the user is a member. For example if the user belongs to both activities and the dynamic typically integrates the sum change of each activity.

As additional contextual information the relational context bar may automatically display which sections of a document are controlled by which activities. If an activity via access control holds a manage exclusion on a part of the document e.g. a subdocument and the user is not a member of the activity the application may display the content as read only allowing the user to understand which sections are controlled by other activities.

In the same example when a group completes an activity the system may typically lift the manage exclusion of the associated access control. For example when group completes activity associated with access control and the access exclusion of is reset the system may immediately evolve access in the views of members of activity that is members of access control who were not members of access control but who share access to the evolving content through access control . In this example the activity may allow a group to perform a set of change work as an atomic and isolated whole maintaining the integrity and consistency of the unit of work while hiding protecting the change work from non members of the activity until the activity is completed .

The system may also provide data reuse through the temporal data medium. The system may implement data reuse in NETFS as a form of temporal containment. For example a user may specify that a legal document contain another document at some time in the past. As a result the system typically provides a view of the legal document embedding the old version of the contained document even as other users may update the contained document.

The system may typically also provide multiple containment of an entity by multiple entities. The system may include multiple containment as a feature of NETFS. For example several folders may contain the same document. The feature may allow as an example a user to cross index files in folder hierarchies.

Multiple containment may allow several entities to contain a common part. For example two documents may contain a common subdocument. As the subdocument is changed both documents are in effect updated with the latest subdocument version. As users discover valuable content they may reuse or share the content in new documents. Each instance of reuse may create a new relationship connecting the desired content which increases the probability that the content is in the future found and leveraged by other users. Relational search allows a user to search for content based on a mechanism which may value content by its relational density or relational connectivity.

The system typically provides association as a feature of NETFS allowing users to associate one entity with another. An association relationship may capture the association.

The system may typically provide a file explorer application as part of NETFS which may allow users to browse and manage all files within a single application e.g. for example documents folders messages activities . The file explorer may provide a hierarchical view of files illustrating the file containment structure . The file explorer may respond to the user s selection of a file by displaying a read only view of the file in a pane or other window.

The system may also allow users to access files remotely. An example includes accessing searching browsing and managing files and their relational structure through a web browser. The system may provide a clean mapping of managed data to HTML given its relational structure. The system may provide a method of managing web content. The system may act as a world wide web server. For example the system may provide a web server through HTTP. The system may provide HTML or XML as a representation of system managed data. The system may allow users to consider system managed data the working data medium and HTML or XML a representation or view.

The system may capture change in a word processing document in the following way. Each change to the document may become an entity. Inserting a change may correspond to adding a containment relationship that inserts an entity bearing data of the change as a child of a document subdocument or other contained element of the document. Removing a change may correspond to negating the containment relationship. The sequence of entities contained the entity may be recorded by the containment relationship which may store the child s position in the sequence contained by the parent entity . In this way the document may comprise a large set of evolving entities including subdocuments changes and other contained elements of the document. The document s evolution may be viewed as a process of granularization unification. The user may unify change as whole sections of a document may be considered the process of contraction unification and may granularize the document by change may be considered the process of expansion granularity . The word processing environment typically receives and updates change in real time. For example user A s view of a document may receive change being made to the document by other users and visa versa. The following example illustratively shows this process.

Prior to the invention files are typically managed in a compound document format . XML may also be viewed as a compound document format. Whereas the compound document format compels data into a strict tree hierarchy the invention may levy no such requirement. Whereas the compound document format compels one entity to subsume another the invention may make no such requirement. For example the CDM may allow a document and comment to exist as separate and autonomous entities joined by association or an other means of relation.

In a broader class hierarchy imposed prior to this invention carries into many realms of computer data and systems management. The invention may free computer systems from this limitation. For example the security model prior to the invention typically require that spaces fit within a tree. The result of the security model prior to the invention makes a lateral relationship impossible or if a solution exists it exists typically as a work around . For example two companies would have extreme difficulty prior to the invention creating a shared data system between servers regularly used to manage data in each organization e.g. not a special purpose entity during the course of an alliance since neither security space may subsume the other. This holds for B2B and extranet relationships of many verities.

The invention solves the problem at a fundamental level by establishing what may be in part a lateral network dynamic. For example two firms may easily and quickly establish a working collaborative relationship using the invention since the data information security space may be considered continuous across each organization when paired as a network . For example a user in firm A may send an e mail message to a user in partner client B. The system typically creates a unique information context for that specific collaboration with entity E imposing no static hierarchy at the level of the firm in the security relationship between A and B while allowing A to control B s access to entity E. In this sense the context generated by an individual e mail or any greater collaborative construct may be considered a dynamic virtual private network VPN which may enable powerful lateral collaborative relations between entities e.g. for example including enterprises and universities or autonomous governmental agencies in the context of intelligence sharing .

The invention s access model may also enable an organization to create guaranteed file retention policies simultaneously applied to documents and e mail. As a result of e mail prior to the invention file replication across hard drives is uncertain and unmanageable. Prior to the invention the content of an e mail message is duplicated every time the message is downloaded copied into other folders forwarded to other users or included as part of a reply. The same is true for attachments prior to the invention. NETFS may provide a managed system of file e mail lifecycle management. Features of the invention enabling lifecycle management include a each message file as a global entity b the continuous data structure preventing entity duplication.

Prior to the invention about 90 95 of collaboration takes place via email allowing information to spin out of control. Prior to the invention email transfer is not secure or regulated files may typically be copied everywhere as attachments and there is no concept of centralized storage and organization. The invention however includes the ability to enforce information boundaries and regulate how information is exchanged. Whereas systems prior to the invention only manage how information is accessed the invention permits an organization to manage how the information is exchanged and its access subsequently revoked within a fully controlled environment. Under the invention s security paradigm workers still use email which they are comfortable with as the primary mechanism of exchanging information. However according to the invention email and attachments may now be managed and may remain within a single and secure information context. In this way the invention establishes a secure information environment as shown above.

The access model of the invention may enable an organization to control information exchange via the invention s security model and rules policies best practices. The invention may allow an organization to define information boundaries . Information boundaries may exist within a single organization or span multiple organizations. The information boundary may provide a container in which information exchange is limited. For example a container may exist surrounding members of an organizational unit or enclose a client and or matter in the context of legal work e.g. for example including certain members of a law firm a client enterprise and an investment bank . As a part of the invention s file system e mail may be subject to additional security provided by an enterprise security implementation such as for example Microsoft s ActiveDirectory. Since e mail and files may remain in the single information space users are not able to bypass security by moving data between systems. For example a user may not be able to e mail a file to a user who would not otherwise have file access. Prior to the invention even if access to a file is restricted by the security model to a select group of users a member can simply e mail the file to unauthorized users. The invention may allow an organization to contain data within a single secure space while preserving the end user experience e.g. the user typically cannot unintentionally or maliciously move data out of the security context or boundaries .

The invention may provide a dynamic virtual private network for any context in which users collaborate across distributed sites of the platform . Those sites may belong to one or multiple organizations. Since each context may be managed individually the method does not require that one organization contain the other from a top down perspective. The trusted information model of the invention may provide secure peer to peer exchange connecting peers over the intranet extranet or Internet. Today security requires public key cryptography to be managed individually by e mail sender and recipient. The invention may enable secure public key exchange between sites freeing individual users from the security implications of data transfer. In this way the invention may provide a superior implementation of DRM Digital Rights Management .

While the invention has been described in terms of embodiments those skilled in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims.

