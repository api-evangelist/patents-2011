---

title: Transferring web data between operating system environments
abstract: An electronic device having a multi-environment operating system (OS) is disclosed. The electronic device creates a web session and/or updates a browser configuration in a first OS environment based on a web session and/or a browser configuration in a second OS environment. The web session is created and/or the browser configuration is updated when a primary OS environment transitions from the second OS environment to the first OS environment. The transition may occur when the device transitions from a docked mode to a mobile mode, or from a mobile mode to a docked mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782258&OS=08782258&RS=08782258
owner: Motorola Mobility LLC
number: 08782258
owner_city: Chicago
owner_country: US
publication_date: 20110104
---
The present invention relates generally to operating systems and more particularly to operating systems including multiple environments.

General purpose operating systems such as Linux and Windows have an extensive set of features such as file systems device drivers applications libraries etc. Although general purpose operating systems may be suitable operating systems for generally stationary computing devices such as a desktop computer the general purpose operating systems may not be suitable operating systems for mobile devices such as mobile phones smart phones and tablet computers. Operating systems that have the features of an embedded or real time operating system including real time performance may be more suitable for mobile devices. As the computing power of the mobile devices increases the mobile devices may be used as standalone devices in mobile environments as well as used with peripheral devices such as computers monitors and projectors in relatively stationary environments. When mobile devices transition from the mobile environments to the stationary environments or vice versa the operating systems of the mobile devices may transition from a mobile operating system environment to a general purpose operating system environment or vice versa.

In both the mobile environment and the stationary environment the mobile device may have network connectivity such as the ability to connect to the Internet or to a private intranet using a wired or wireless connection. While connected to the internet a user of the mobile device may create a web session that consists of open websites webpages web applications or other information that was accessed over a network using a uniform resource locator URL . The user of the mobile device may wish to have the web session stay open or easily recreate the web session when changing environments. As an example a user may be viewing a webpage on the mobile device at home over a wireless home network. While connected to the wireless home network the mobile device is operating in the general purpose environment. If the user has to leave the home such as to go to work or run an errand the user may want to keep the webpage open or easily reopen the webpage.

When leaving the home the mobile device may transition from the general purpose operating environment to the mobile operating environment. In order to reopen the webpage the user must copy the URL associated with the webpage in the address bar while still in the general purpose environment. After the mobile device transitions from the general purpose environment to the mobile environment the user opens a browser in the mobile environment and pastes the URL in an address bar in the browser in the mobile environment. Copying and pasting functions may be difficult and time consuming using mobile devices. The copying and pasting functions become even more problematic if multiple websites or webpages are open in multiple tabs or multiple browser windows. Further if the user is running a web based application such as an email account the user does not have an easy way to re access the email that he or she was viewing. Instead the user has to login again and reopen the email that he or she was viewing.

Additionally while the user is navigating through websites and or entering information in the webpages using a web browser the configuration of the web browser may change. For example the user s browser history may change or the user may have entered a new password. When transitioning from one environment to another environment the web browser that is opened in the other environment does not know any of the configuration changes that were made in the first environment. The user may have to enter the configuration information into the browser in the other environment.

The present disclosure describes creating a web session in a first operating system OS environment based on a web session in a second OS environment when a primary OS environment transitions or changes from the second OS environment to the first OS environment. The present disclosure also describes updating a web browser configuration in a first OS environment based on a web browser configuration in a second OS environment when the primary OS environment transitions or changes from the second OS environment to the first OS environment. The first OS environment and the second OS environment may be simultaneously run on a single kernel in an OS of an electronic device. The electronic device may include a processor coupled to a memory having executable instructions configured to initiate the OS.

As shown in the second OS environment includes a docking manager module that may be configured to determine a transition or change of a primary OS environment from the second OS environment to the first OS environment . The docking manager module may also configured to determine web session data associated with a web session in the second OS environment . The web session may include web sites web application web content or any other electronic information such as text images sounds videos and or animations that can be accessed over the Internet an intranet or other computer network. The web session may be an open web session such as a web session that includes websites open in an active web browser and or displayed to a user in the second OS environment . The web session may also include web sites and or web applications that are identified in a web browser s history. The web session data may be data associated with the web session that activates one or more applications in one of the OS environments . The application may be used to access and or open the web session. The web session data may include a uniform resource locator URL favicon and or title of the website webpage or web application.

The docking manager module may also be configured to receive a mode state change signal. The mode state change signal may indicate that the primary OS environment has transitioned or changed from the second OS environment to the first OS environment . Alternatively or in addition the mode state change signal may indicate that the electronic device has changed from a docked mode to an undocked mode or from the undocked mode to the docked mode. The mode state change signal and generation thereof is described in more detail below. The undocked mode may be referred to as a mobile mode. The docked mode may be a mode that the electronic device is in when the electronic device is connected to a peripheral device not shown such as a monitor and the general purpose OS environment is the primary OS environment. Also the mobile mode may be a mode that the electronic device is in when the electronic device is not connected to a peripheral device and the mobile OS environment is the primary OS environment. As shown in the docking manager module may be in communication with an application such as a web browser. The docking manager module may be configured to query the web browser in the second OS environment for the web session data. The docking manager module may be configured to query the web browser after determining a transition of the primary OS environment from the second OS environment to the first OS environment . In one example the docking manager module is configured to query the web browser in response to receiving a mode state change signal. The web browser may be configured to provide the docking manager module with the web session data in response to being queried by the docking manager module . The web browser may include one or more individual components or modules that receives the query from the docking manager module and or provides the web session data to the docking manager module . The docking manager module may also be configured to send or transfer the web session data to the first OS environment .

In an exemplary embodiment the first OS environment may include a web session framework that provides one or more application programming interfaces API used to send and or receive the web session data. The docking manager module may use the framework to send the web session data to the first OS environment . The first OS environment may also include a connector module that is configured to receive the web session data from the second OS environment . The connector module may also be configured to parse and or store the web session data. The connector module may parse the web session data based on individual web sites and or web applications that make up a web session. For example the web session data may be divided or organized based on URLs favicons and or titles associated with individual websites or web applications of the web session and the connector module parses the web session data according to the URLs favicons and or titles. The URL favicon and or title information may be separated organized or grouped into fields and the connector module may parse the web session data according to the fields. The connector module may store the parsed web session data in one or more storage locations in hardware not shown in of the electronic device .

The connector module may be used to create a web session in the first OS environment . The web session in the first OS environment may consist of one or more websites web applications and or other web information from the web session from the second OS environment . The web session in the first OS environment may be created by activating an application such as a web browser in the first OS environment . In one example the connector module may be configured to automatically activate one or more applications that access and or open the websites web applications and or other web information associated with the web session data that was parsed and or stored. Alternatively or in addition the connector module may be configured to display the web session data or information indicating the web session data in a user interface . The user interface may be a component of the web connector . Alternatively the user interface may be an application of the first OS environment that is separate from the web connector . The user interface may be invoked by an application launcher short cut in a launcher menu of the first mobile OS environment. In addition a notification in a status notification bar of the first OS environment may be displayed in which a user can easily access the user interface by selecting the notification.

The web session data may be displayed in the user interface for a user selection. After the user selects one or more web session data in the user interface the web session is created in the first OS environment based on the user selection. As an example the user interface may display a URL. After the user selects the URL an application such as a web browser in the first OS environment is activated and the web browser accesses and or opens a website web application web page and or other web information associated with the selected URL.

Alternatively or in addition the docking manager and the connector module may switch functions. For example the connector module may be configured to determine a transition from one of the OS environments and query the web browser for web session data. The connector module may also be configured to send or transfer the web session data to the second OS environment . The connector module may use the web session framework to send or transfer the web session data to the second OS environment . The docking manager module may be configured to receive the web session data from the connector module . The docking manager may be configured to create a web session in the second OS environment based on all or part of the web session data received from the first OS environment . The docking manager may be configured to parse and or store the web session data. In addition the docking manager may be configured to activate the web browser that opens one or more websites webpages web applications or other web data associated with the web session data. The docking manager may also be configured to display the web session data using a user interface . The web session data may be displayed in the user interface for a user selection. After the user selects one or more web session data in the user interface the web session is created in the second OS environment based on the user selection. As an example the user interface may display a URL. After the user selects the URL the web application such as a web browser in the second OS environment is activated and the web browser accesses and or opens a website web application web page and or other web information associated with the selected URL.

Alternatively or in addition the docking manager module and the connector module may be configured to perform dual roles. For example when the primary OS environment switches from the second OS environment to the first OS environment the docking manager module queries the web browser for web session data and sends the web session data to the first OS environment . The connector module receives the web session data and creates the web session in the first OS environment. On the other hand when the primary OS environment switches from the first OS environment to the second OS environment the connector module queries the web browser for web session data and the connector module sends the web session data to the docking manager module . The docking manager module receives the web session data and creates the web session in the second OS environment .

As explained above one of the OS environments may be a mobile OS environment and the other of the OS environments may be a general purpose OS environment. When the primary OS environment transitions from the general purpose OS environment to the mobile OS environment the electronic device is transitioning from a docked mode to a mobile mode. Likewise when the primary OS transitions from the mobile OS environment to the general purpose environment the electronic device is transitioning from a mobile mode to a docked mode. If the first OS environment is the mobile OS environment and the second OS environment is the general purpose environment then when the electronic device transitions from the docked mode to the mobile mode the docking manager is configured to send the web session data to the first OS environment . Likewise when the electronic device transitions from the mobile mode to the docked mode the connector module is configured to send web session data to the second OS environment. On the other hand if the first OS environment is the general purpose environment and the second OS environment is the mobile environment then when the electronic device transitions from the docked mode to the undocked mode the connector module is configured to send the web session data to the second OS environment . Likewise when the electronic device transitions from a mobile mode to a docked mode then the docking manager is configured to send the web session data to the first OS environment .

Alternatively or in addition a configuration of the web browser in the first OS environment may be updated modified reset and or changed based on a configuration of the web browser in the second OS environment when the primary OS environment transitions or changes from the second OS environment to the first OS environment . In response to determining that the primary OS has transitioned from the second OS environment to the first OS environment the docking manager module may be configured to query the web browser in the second OS environment for configuration data of the web browser . The configuration data of the web browser may include one more of the following browsing history download history search history form field entry history cookies login and or password data home page information bookmark information pop up information and or webpage display information. Other web browser configuration data or settings may be included. The web browser may be configured to send the web browser configuration data to the docking manager module . One or more individual components or modules of the web browser may be configured to receive and or send the configuration data to the docking manager module .

The docking manager module may be configured to send the web browser configuration data to the first OS environment . The docking manager module may be configured to send or transfer the web browser configuration data with the web session data. Alternatively the docking manager module may send or transfer the web browser configuration data separate from the web session data. The docking manager module may use the websession framework in the first OS environment in order to send the browser configuration data to the first OS environment . The docking manager module may send the web browser configuration data over an unsecured or a secured channel. One or more techniques may be used to create a secured channel such as using encryption hash functions certificates tokens and or any other techniques known for creating a secured channel.

The first OS environment may receive the web browser configuration data using the connector module . The connector module may be configured to receive parse and or store the web browser configuration data. The connector module may also be configured to update modify reset and or change the configuration of the web browser in the first OS environment using the web browser configuration data received from the second OS environment . The connector module may also be configured to display the web browser configuration data in a user interface . The connector module may be configured to display all of the configuration data in the user interface . Alternatively the connector module may be configured to display in the user interface only the configuration data that is applicable to the web browser in the first OS environment . For example if one of the configuration data from the browser in the second OS environment is not used in the configuration for the web browser in the first OS environment the connector module may not display that configuration data in the user interface . The user interface used to show the configuration data may be a different user interface than the interface that is used to show the web session data. Alternatively the user interface used to display the web session data and the user interface used to display the browser configuration data may be the same. A user may select one or more configuration data to update modify reset and or change the configuration of the browser . The user may select all of the configuration data displayed in the user interface . Alternatively the user may customize the configuration update of the web browser in the first OS environment by selecting less than all of the configuration data that is displayed.

Alternatively or in addition the docking manager and the connector module may switch functions. For example the connector module may be configured to determine a transition from one of the OS environments and query the web browser for web browser configuration data. The connector module may also be configured to send or transfer the web browser configuration data to the second OS environment . The connector module may use the framework to send or transfer the web browser configuration data to the second OS environment . The docking manager module may be configured to receive the web browser configuration data from the connector module . The docking manager may be configured to update modify reset and or change the configuration of the web browser in the second OS environment based on all or part of the web session data received from the first OS environment . The docking manager may be configured to parse and or store the web browser configuration data. The docking manager module may also be configured to display the web browser configuration data in a user interface . The docking manager module may be configured to display all of the configuration data in the user interface . Alternatively the docking manager module may be configured to display in the user interface only the configuration data that is applicable to the web browser in the second OS environment . For example if one of the configuration data from the browser in the first OS environment is not used in the configuration for the web browser in the second OS environment the docking manager module may not display that configuration data in the user interface . The user interface used to show the configuration data may be a different user interface than the interface that is used to show the web session data. Alternatively the user interface used to display the web session data and the user interface used to display the browser configuration data may be the same. A user may select one or more configuration data to update modify reset and or change the configuration of the browser . The user may select all of the configuration data displayed in the user interface . Alternatively the user may customize the configuration update of the web browser in the second OS environment by selecting less than all of the configuration data that is displayed.

Alternatively or in addition the docking manager module and the connector module may be configured to perform dual roles when updating modifying resetting and or changing the web browsers in the first and second OS environments respectively. For example when the primary OS environment switches from the second OS environment to the first OS environment the docking manager module queries the web browser for web browser configuration data and sends the web browser configuration data to the first OS environment . The connector module receives the web browser configuration data and updates modifies changes and or resets the web browser configuration in the first OS environment . On the other hand when the primary OS environment switches from the first OS environment to the second OS environment the connector module queries the web browser for web browser configuration data and the connector module sends the web browser configuration data to the docking manager module . The docking manager module receives the web browser configuration data and updates modifies changes and or resets the configuration of the web browser in the second OS environment . As explained above one of the OS environments may be a mobile OS environment and the other of the OS environments may be a general purpose OS environment. When the primary OS environment transitions from the general purpose OS environment to the mobile OS environment the electronic device is transitioning from a docked mode to a mobile mode. Likewise then the primary OS transitions from the mobile OS environment to the general purpose environment the electronic device is transitioning from a mobile mode to a docked mode. If for example the first OS environment is the mobile OS environment and the second OS environment is the general purpose OS environment then when the electronic device transitions from a mobile mode to a docked mode the docking manager module is configured to query the web browser for the web session data and send or transfer the web browser configuration data to the first mobile OS environment . Similarly when the electronic device transitions from the docked mode to the mobile mode the connector module is configured to query the web browser for the web browser configuration data and send or transfer the web browser configuration data to the second OS environment .

The web session data and or the web browser configuration data may be transferred to and from docking manager module the connector module and or web applications browsers using intents. An intent may be a data structure that contains a description of an action to be performed on data. An intent may include the data on which an action is to be performed. The intent may also include indicate and or specify the action. In one example after the docking manager determines a transition of the primary OS environment from the second OS environment to the first OS environment the docking manager module generates an intent and sends the intent to the first OS environment. The intent may include the web session data and or the web configuration data. The intent may also include one or more actions to perform on the data such as parsing the data storing the data opening the web application browser opening a user interface that displays the web session data and or the web browser configuration data and or configuring the web browser . Similarly as an example after the connector module determines a transition of the primary OS environment from the first OS environment to the second OS environment the connector module may generate an intent and send the intent to the second OS environment. The intent may include the web session data and or the web configuration data. The intent may also include one or more actions to perform on the data such as parsing the data storing the data opening the web application browser opening a user interface that displays the web session data and or the web browser configuration data and or configuring the web browser .

Alternatively or in addition an intent may be generated by the docking manager module and or the connector module after a user makes a user selection of the web session data and or the web browser configuration data. As an example after the connector module displays the web session data on the user interface and the user selects the web session data the web connector generates an intent and sends the intent to the web browser in the mobile OS environment framework e.g. an Android framework . The intent contains the selected web session data such as a selected URL. The intent may also contain one or more actions such as to open one or more websites or webpages associated with the web session data in the web browser . After receiving the intent the web browser is activated and the websites webpages web applications and or other web information associated with the web session data are opened in the web browser . If for example the web session data is associated with a web based application then the mobile OS environment framework would instruct the application associated with the web session data to open and handle the web session data. For example if a URL is associated with a YouTube video the mobile OS environment framework launches a YouTube application and the YouTube video associated with the URL is displayed in the YouTube application. In another example the web based application may be accessed and or opened using a software application such as Prism. Prism provides the ability for a website or web application that would otherwise be accessed and or opened in a web browser to be opened as a standalone window similar to how a standard or non web based desktop application is opened. If a particular website or web application was configured to be accessed and or opened as a standalone application rather than through a web browser in the first OS environment such as be using Prism then after receiving the intent the standalone application associated with the web session data is activated rather than the web browser.

The following show an example electronic device and exemplary components of the electronic device in which the components of the present disclosure may be used and or implemented. Referring to a mobile electronic device is provided. The mobile device includes a graphical user interface GUI and a plurality of data input buttons . The mobile device may be but not limited to a mobile personal computer PC a tablet PC a netbook a mobile telephone a laptop computer a handheld computer or a smart phone. Other electronic devices may be used. A user may connect the device to a variety of peripheral devices not shown . The peripheral devices may be but not limited to a computer monitor a laptop computer a desktop computer a tablet PC or a screen projector.

The first OS environment and the second OS environment may operate and co exist independently of one another. As an example each of the OS environments may operate by itself without the presence of the other OS environment . As another example the OS environments may be different types such as one OS environment being embedded and the other OS environment not being embedded . As another example the OS environments may perform different operations or functions while in communication with the kernel the device hardware and or with a user of the device. Alternatively or in addition the first OS environment and the second OS environment may be interdependent. For example the first OS environment and the second OS environment may compete for resources of the kernel . Alternatively or in addition the first OS environment and the second OS environment may operate in conjunction with one another.

In an exemplary embodiment one of the OS environments is an OS environment intended for use in mobile devices e.g. cell phones smart phones mobile personal computers netbooks lap tops and handheld computers and the other OS environment is a general purpose OS environment that is not intended for use with mobile devices and or that is intended for use with stationary devices e.g. a desktop computer . As non limiting examples the mobile OS environment may be an Android Window Mobile Symbian iOS or RIM Blackberry mobile operating system environment. Other mobile OS environments may be used. As non limiting examples the general purpose OS environment may be a standard GNU Linux Windows Unix Mac OS X or Google Chrome OS environment. The general purpose OS environment may also be a webtop environment. Other OS environments may be used. The mobile and general purpose OS environments may be implemented with various types of kernels e.g. Linux based kernel Windows based kernel . Additionally more than two OS environments of any of a variety of types may independently co exist on the same kernel . For simplicity as shown in the first OS environment is designated as the mobile environment and the second OS environment is designated as the general purpose environment. The OS environments may include several software components. As shown in the mobile environment includes applications e.g. user applications . The mobile environment may also include middleware . The applications may include stacks and other application software components and also include computer instructions that are recognizable by the middleware atop which the applications are juxtaposed. The middleware includes mobile application framework and mobile run time programming . The applications may be managed by the application framework and interpreted by the run time programming .

The general purpose environment includes applications e.g. user applications coupled to middleware . The middleware may include both an application framework and libraries tools . The libraries tools may include a variety of components including libraries such as Qt or GIMP Toolkit GTK which may be useful for display of information on a GUI. Other tools and or libraries may be used. The applications may be native applications in that the executable code of the applications corresponds to the instruction set architecture of the kernel and or the device hardware . Like applications in the mobile OS environment the applications in the general purpose OS environment may include stacks and other application software components and may also include computer instructions that are recognizable by the middleware atop which the applications are juxtaposed.

The device hardware may include a variety of hardware devices such as a memory storage device not shown coupled to a processor not shown which stores computer executable instructions that are configured to perform various functions and operations. Additionally the device hardware may include a variety of other components resources such as cellular Bluetooth and or WiFi transceivers or radios keyboards other input devices such as speakers and or video screens hardware accelerators IP sockets etc. The kernel allocates resources of the mobile device by connecting and managing interaction between the device hardware and the middlewares of the OS environments . The software components included in the middleswares e.g. the application frameworks run time programming and or libraries tools may be referred to as the middleware because they are logically interposed between the kernel and software applications .

Modules and are configured to serve particular functions. The AIW module may be configured to display a first environment application window on the GUI shown in while the second OS environment is the primary OS environment. The portal service module includes a set of instructions configured to allow service for the first OS environment and directs all communication to the resource manager . While the mobile device is operating the portal service module is preferably running at all times. Additionally the portal service module is connected to activity associated with the portal activity module . The portal activity module may be a second OS environment application located on the first environment stack. As an example if the second OS environment is an Ubuntu environment the portal activity module may represent a Ubuntu application and when the portal activity module has focus i.e. when the portal activity module is on top of other applications displayed in the GUI Ubuntu is in view through the GUI .

As shown in the resource manager module in the second OS environment and the portal services module in the first OS environment communicate directly with each other. The resource manager module and the portal services module may communicate directly with each other to avoid conflicts in operation of middleware and middleware . The resource manager module may be a set of instructions configured to manage the resources shared by the first OS environment and the second OS environment . The shared resources include display devices input devices power management services and system state information. Further the resource manager may be configured to control the accessing of the device hardware by the OS environments . Additionally the resource manager may identify and control which user interface associated with the environments is displayed through the GUI . The portal service module may be the source of all communications from the first environment to the resource manager . Additionally the portal service module may be a sink for all callbacks from the resource manager to the first OS environment .

In addition shows the components of the present disclosure used to create a web session and or update a web browser configuration in one of the environments based on web session data and or web browser configuration data from the other OS environment . As shown in a docking manager module mobile is located in the resource manager module . An application web browser is located in the general purpose OS applications module . A framework for transferring intents containing web session data and or web browser or configuration data between the mobile OS environment and the general purpose OS environment is located in the portal services module . A connector module and a web application web browser are located in the mobile OS applications module .

As described above with reference to when the primary OS environment of the operating system transitions from the second OS environment to the first OS environment the docking manager module located in the resource manager module may receive a state change signal. In response to receiving the state change signal the docking manager module may query the web browser located in the general purpose OS applications module for web session data and or web browser configuration data. After the docking manager receives the web session data and or the web browser configuration the docking manager may generate one or more intents containing the web session data and or the web browser configuration data. The intent may also include actions to perform on the data. The docking manager module may transfer the intent to the mobile OS environment using the framework located in the portal services module . The connector module located in the mobile OS environment applications module may receive the intent. The connector module may be configured to parse and or store the data in the intent in a storage location e.g. in a storage location in device hardware . The connector module may create a web session and or configure the web browser based on the received web session data and or the web browser configuration data. In one example after receiving the intent the connector module may display the web session data and or the web configuration data in a user interface for a user selection. After the web session data is selected the connector module may generate an intent based on the user selection which is used to activate the web browser or other web application associated with the web session data and the web browser opens the one or more websites webpages web applications and or other web data associated with the web session data that was selected. Alternatively or in addition after the web browser configuration data is selected the configuration of the web browser may be updated based on the user selection.

Similarly as described above with reference to when the primary OS environment of the operating system transitions from the first OS environment to the second OS environment the connector module may receive a state change signal. In response to receiving the state change signal the connector module located in the mobile OS applications module may query the web browser for web session data and or web browser configuration data. After the connector module receives the web session data and or the web browser configuration the connector module may generate one or more intents containing the web session data and or the web browser configuration data. The intent may also include actions to perform on the data. The connector module may transfer the intent to the general purpose OS environment using the framework located in the portal services module . The docking manager module located in the resource manager module may receive the intent. The docking manager module may be configured to parse and or store the intent in a storage location e.g. in a storage location in device hardware . The docking manager may create a web session and or configure the web browser based on the received web session data and or the web browser configuration data. In one example after receiving the intent the docking manager module may display the web session data and or the web configuration data in a user interface for a user selection. After one or more web session data is selected the docking manager module may generate an intent based on the user selection which activates the web browser or other web application associated with the web session data and the web browser opens the one or more websites webpages web applications and or other web data associated with the web session data. Alternatively or in addition after the web browser configuration data is selected the configuration of the web browser may be updated based on the user selection.

As explained above when the primary OS environment transitions from one of the OS environments the docking manager module or the connector module may receive a mode state change signal. The mode state change signal may be generated when the docking state of the electronic device transitions from a docked state to a mobile state or from a mobile state to a docked state. In one example a cable signal is received by the resource manager module that indicates that a cable such as an HDMI or a USB cable was connected to the electronic device which connects the electronic device to a peripheral device. Alternatively a cable signal is received by the resource manager module that indicates that a cable such as an HDMI or a USB cable was disconnected from the electronic device which disconnects the electronic device from the peripheral device. Alternatively the cable signal may be received by the resource manager module when a wireless communication between the electronic device and the peripheral device is either enabled or disabled. After the cable signal is received by the resource manager module a signal is sent from the resource manager module to the portal activity module indicating a mode status transition. In response to receiving the signal the portal activity module sends a signal to the resource manager module indicating that one of the OS environments is the primary OS environment. For example if the cable was disconnected from the electronic device or the wireless connection between the electronic device and a peripheral device was disabled then the signal sent from the portal activity module indicates that the mobile OS environment is the primary OS environment. On the other hand if the cable was connected to the electronic device or the wireless connection between the electronic device and the peripheral device was enabled then the signal sent from the portal activity module indicates that the general purpose OS environment is the primary OS environment. Further a signal is sent from the resource manager to the portal activity module indicating that the OS environment that has become the primary OS environment has taken ownership of a framebuffer. Additionally a mode state change signal also referred to as a mode state change confirmation signal is sent from the portal activity module to the resource module identifying that the electronic device is in the mobile mode or the docked mode. The mode state change signal indicates that the electronic device is in the mobile mode if the cable was disconnected or the wireless connection is disabled. The mode state change signal indicates that the electronic device is in the docked mode if the cable was connected or the wireless connection is enabled. The docking manager and or the connector module receive the mode state change signal. The docking manager and or the connector module query the respective web browser in response to receiving the mode state change signal.

As described above the electronic device may transition between mode states and or environments in response to an unsolicited event such as the docking or undocking of the electronic device . Alternatively or in addition the electronic device may transition between mode states and or environments based upon events other than docking or undocking the mobile device and or based upon events other than unsolicited events. For example if the electronic device is stationary for a preset period of time the electronic device may be configured to operate in the most energy efficient mode state regardless of the device status otherwise. As another example a user can transition from the mode state from docked to mobile even if the device has a connection with a peripheral device. Additionally the type of peripheral device connected to the mobile device can dictate whether an automatic mode state change sequence is initiated or a user has provided a mode state change request. In one example a user may be able to select the mode state in which to operate the mobile device.

Further the electronic device may switch from one OS environment to another OS environment as the primary environment when a user activates an application associated with the other environment. The electronic device may be configured so that any event or events can trigger a change in a mode state. As an example if the electronic device is in communication with a web server or intermediate server a push from the web server or intermediate server e.g. a forced sending of information from the server to the electronic device can automatically trigger a switching from one OS environment to another OS environment suitable for receiving the pushed information. Any of the above described events that transition the primary OS environment of the electronic device from one OS environment to another OS environment may trigger web session data and or web browser configuration data to be transferred from one OS environment to another OS environment.

It is specifically intended that the present disclosure not be limited to the embodiments and illustrations contained herein but include modified forms of those embodiments including portions of the embodiments and combinations of elements of different embodiments as come within the scope of the following claims.

