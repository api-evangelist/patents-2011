---

title: Providing access to media content in multiple locations
abstract: A computer-implemented method for providing access to media content in multiple locations includes: storing media content in a system that has a memory and another storage; generating an object that represents the media content, the object including media content metadata and a media content reference configured to identify each of a memory location and a storage location; and making the object available to an application, the media content reference providing access to the stored media content at the memory location or at the storage location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725696&OS=08725696&RS=08725696
owner: Adobe Systems Incorporated
number: 08725696
owner_city: San Jose
owner_country: US
publication_date: 20110104
---
This specification relates to accessing media content. Media content can include for example image content video content and audio content to name a few examples. A device can be used to generate media content. For example a digital camera such as a digital camera included in a mobile device can capture image content or video content. Generated media content can often be stored on the device used to generate the media content. For example for some devices generated media content can be stored as a file on the device. Some devices allow a user to provide a custom name for a media content file.

In a first aspect a computer implemented method for providing access to media content in multiple locations includes storing media content in a system that has a memory and another storage generating an object that represents the media content the object including media content metadata and a media content reference configured to identify each of a memory location and a storage location and making the object available to an application the media content reference providing access to the stored media content at the memory location or at the storage location.

In a second aspect a computer program product is tangibly embodied in a computer readable storage device and includes instructions that when executed by a processor perform a method. The method includes storing media content in a system that has a memory and another storage generating an object that represents the media content the object including media content metadata and a media content reference configured to identify each of a memory location and a storage location and making the object available to an application the media content reference providing access to the stored media content at the memory location or at the storage location.

In a third aspect a system includes a processor memory storage and instructions that when executed by the processor cause the system to perform a method. The method includes storing media content in the system generating an object that represents the media content the object including media content metadata and a media content reference configured to identify each of a memory location and a storage location and making the object available to an application the media content reference providing access to the stored media content at the memory location or at the storage location.

Implementations can include any or all of the following features. The application selects based on the media content metadata one of the memory location and the storage location as a target location for the media content. The application provides the object to a consuming entity that accesses the stored media content at the memory location or at the storage location using the media content reference. The media content reference includes a pointer to the memory location or a file name for the storage location. The media content metadata specifies a compression level of the media content. The media content metadata specifies synchronous or asynchronous access to the stored media content. The media content metadata is at least in part assigned by a device that generates the media content metadata and the application performs an action on the media content based on the media content metadata. The method further includes modifying the media content metadata before the application performs the action.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Access can be provided to media content while avoiding unnecessary duplication of media content. Access can be provided to media content without requiring the accessing entity to know the location of the media content.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Media e.g. image video content can be stored in a system that has multiple storage locations e.g. memory and one or more hard drives . In some instances an application that requests media content does not have information about the storage location from which the media content will be delivered. For example an application provides access to a user interface for a camera that can capture either still images which will be stored in memory in this example and video content which will be stored in storage other than memory in this example . That is when the application provides access to the camera user interface the resulting media content is provided to the application at any of multiple storage locations e.g. the memory for an image or the drive for a video clip .

Where media content is located can be important. For example some devices where the available memory is relatively limited e.g. handheld mobile devices could malfunction if the application begins storing the media content in memory when the camera had already placed the media content in the memory. As another example if the application ultimately needs or expects the media content to be placed in the storage it would be redundant to repeat that storing process if the content is already in the storage.

To handle these and other situations an object is generated that represents the stored media content at either location and the object is made available to the application. The application can use the object to access the stored media content regardless of the actual storage location of the media content. That is from the application s point of view it receives the media content by use of the object regardless of the particular storage location.

The architecture of the device in this example includes an application layer a runtime layer and an operating system hardware layer . The operating system hardware layer here includes a device with a native user interface UI memory and storage . The device can be for example a camera capable of capturing still images and video. The native user interface can be displayed or otherwise presented so that a user can interact with the device. The memory can include any suitable temporary storage device for example a memory chip. The storage can include any suitable data storage device for example a hard drive.

For example the application layer includes an application . The application can be for example an application that allows a user to create and interact with camera images. The application can be implemented using any suitable programming language.

The runtime layer here includes a consuming entity . The consuming entity can be for example a software entity that communicates with the application program . For example the consuming entity can be a loader object which can load objects e.g. image data to a display list. The application can use an API application programming interface included in the runtime layer to interact with the device . For example the application can use the API to access a user interface which allows the capture of media content e.g. image or video content using the device . In some implementations the consuming entity can instead be some other part of the application .

The runtime layer includes an object which represents media content included in the memory or media content included in the storage . The object includes media content metadata and a media content reference . The runtime layer can provide the object to the application and the application can use the object to access the media content or the media content .

In response to the request for the camera user interface the runtime requests that a native camera user interface be displayed . For example the API can invoke an API to display the native user interface associated with the device . The native user interface can for example include options for capturing an image and for capturing video.

In response to a user input to capture an image or to capture video the device captures image content or video content . The user input can include for example an indication of a media content type e.g. image or video to capture. As another example a device configuration setting can determine whether image content or video content is captured. In some implementations neither the runtime nor the application has information at the time that the user interface is displayed about which media content type will be generated.

The native user interface stores the captured media content in memory or in storage . For example the native user interface can store media content generated by the device as the media content in memory or as the media content in storage . In some implementations neither the application nor the runtime has information about the storage location at the time that the user interface is displayed. The operating system can determine whether to store the media content in memory or in storage. A storage location determination can be based on media content type. For example in some implementations if the media content type is image content the native user interface stores the media content in memory and if the media content type is video the native user interface stores the media content in storage.

As another example the storage location determination can be based on the size of the media content. For example if the size of the media content is below a threshold size e.g. ten thousand bytes the native user interface can store the media content in memory and if the size of the media content is above the threshold size the native user interface can store the media content in storage. As yet another example the storage location determination can be based on a combination of media content type and media content size. For example the native user interface can store image content that is below a threshold size in memory can store image content that is above a threshold size in storage and can store video content in storage regardless of the size of the video content.

In some implementations the storage location determination can be based on available space. For example if the amount of available memory minus the size of the media content exceeds a threshold the media content can be stored in memory and if the amount of available memory minus the size of the media content does not exceed a threshold the media content can be stored in storage. Other storage location determination approaches can be used.

The native user interface sends a media content reference to the runtime . The media content reference can include for example a pointer to a memory location or a file name for a storage location. For example the native user interface can send a media content reference to the API where the media content reference includes a pointer to a location in the memory or a file name of a file included in the storage .

In addition to the media content reference the native user interface also sends media content metadata to the runtime . Media content metadata can include or indicate for example a compression level of the media content an access type e.g. synchronous asynchronous a media content type e.g. image video the size of the media content or a name associated with the media content. A compression level can include a value that indicates for example a high quality compression or a low quality compression. A name associated with the media content can be for example a device assigned name or a user supplied name e.g. a name given by a user to a media content item included in a user s media gallery .

The runtime creates an object to represent the media content . For example the runtime can create the object . As shown in the object includes the media content metadata and the media content reference . The media content reference and the media content metadata included in the object can be copies of or can be based on the media content reference and the media content metadata received from the native user interface respectively.

The runtime provides the object to the application . For example the runtime can provide the object to the application . The object can be provided for example either synchronously e.g. as a return value of the request performed in step above or asynchronously e.g. as an object included in an asynchronous message sent to the application .

The application uses the object to access the media content . For example the media content reference included in the object can provide access by a memory pointer to the stored media content at the memory location. As another example the media content reference can provide access by a file name to the stored media content at the storage location. The application does not need to be aware of whether the media content is accessed from the memory location or from the storage location. The application can use for example an interface provided by the object to access the media content where the interface is simply a request to access the media content and does not specify a location of the media content. The object rather than the application can determine whether to access the media content from the memory location or from the storage location.

Moreover the application can query the media content metadata included in the object. In some implementations the application can determine the size content type compression level or access type of the media content. The application can query the access type to determine for example whether to use an asynchronous or synchronous access method to access the media content. If an asynchronous access method is used the application can access the media content in segments and can be notified as each segment is available to be accessed. The application can modify some media content metadata. For example the application can modify a name e.g. a file name or some other name associated with the media content.

As mentioned the application accesses the media content without knowing its storage location. However the application can select such as based on queried media content metadata either the memory location or the storage location as a target location for the media content. For example the application can select the memory location as the target location if the application intends to subsequently display the media content.

The object can provide access to the media content at the target location and can do so while avoiding unnecessary duplication of the media content. For example if the application sets the target location to be memory and if the media content is currently located at the memory location the media content is not copied. As another example if the application sets the target location to be storage and if the media content is currently located at the storage location the media content is not copied. The media content is copied only when necessary. For example if the application sets the target location to be memory when the media content is currently located in storage then the object can copy the media content from storage to memory.

The application performs an action on the media content . For example the application can process image content or video to apply an effect or to make other modification.

The application provides the object to a consuming entity . For example the application can provide the object to the consuming entity . The consuming entity can be for example a loader object. The application can provide the object to the consuming entity before or after the application accesses the media content using the object. As another example the application can provide the object to the consuming entity for the consuming entity to use to access the media content while the application itself does not use the object to access the media content.

In a sense the object is provided to the application or the consuming entity as an abstraction of the media content. The recipient does not need to specify and does not even need to know the storage location of the media content although in some implementations either the application or the consuming entity can query the object to determine the storage location if such information is desired . In some implementations the application can provide some but not all of the information included in the object to the consuming entity. For example the application can provide just the media content reference or can provide the media content reference and some of the media content metadata.

The consuming entity accesses the stored media content . For example the consuming entity can access the stored media content at the memory location or at the storage location using the media content reference included in the object. Similar to the application the consuming entity does not need to be aware of whether the media content is accessed from the memory location or from the storage location.

The consuming entity initiates an action that consumes the media content . For example if the consuming entity is a loader object the media content can be added to a display list. A renderer can process the display list and can render each item in the display list including the media content to the screen.

Some portions of the detailed description are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here and generally is considered to be a self consistent sequence of operations or similar signal processing leading to a desired result. In this context operations or processing involve physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining or the like refer to actions or processes of a specific apparatus such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification therefore a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals typically represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the special purpose computer or similar special purpose electronic computing device.

Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a tangible program carrier for execution by or to control the operation of data processing apparatus. The tangible program carrier can be a computer readable medium. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device or a combination of one or more of them.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver to name just a few.

Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of any invention or of what may be claimed but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular embodiments of the subject matter described in this specification have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

