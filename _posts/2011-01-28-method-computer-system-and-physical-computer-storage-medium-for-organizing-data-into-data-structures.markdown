---

title: Method, computer system, and physical computer storage medium for organizing data into data structures
abstract: Methods, computer systems, and physical computer storage medium for organizing data are provided. A method includes monitoring usage of the data, detecting a pattern in the usage of the data, and assigning a first concrete implementation associated with a first data structure to the data, based, in part, on the detected pattern of usage of the data. The method also includes identifying a change in the pattern of usage of the data, after the step of assigning and switching the first concrete implementation associated with the first data structure to a second concrete implementation, based, in part, on the change in the pattern of usage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732211&OS=08732211&RS=08732211
owner: International Business Machines Corporation
number: 08732211
owner_city: Armonk
owner_country: US
publication_date: 20110128
---
The present invention relates in general to methods computer systems and physical computer storage media comprising a computer program product for organizing data into data structures.

Computer software or simply software is a general term used to describe a collection of computer programs procedures and documentation that perform tasks in a computing environment. Computer software is generally stored on a computer data storage system and computer data storage in the system is used by the software for a variety of purposes. For example a file including information may be stored in a data storage system and computer software may use information contained in the file.

Different types of computer software are developed to operate a computer system. For instance system software such as operating systems interface with hardware to provide the necessary services for application software middleware controls and coordinates distributed systems and application software such as word processors perform productive tasks for users.

In the case of user interactive computer software such as application software developers typically design the application according to a perception of how the user may interact with the application. For collection data type applications such as List in Java the developer predicts an expected usage by the user of the collected data. The developer then chooses a data structure for the expected usage and develops code i.e. a concrete implementation to implement functionality according to the chosen data structure.

In one example LogRecords from a logfile are sorted by time stamp and thus a list used to store the LogRecords is sorted by time stamp. The developer predicts that when the user wants to retrieve a particular entry from the list the user will specify a time range to view including the time stamp of the particular entry. Accordingly the developer organizes the list into a linked list data structure an array backed list data structure or another type of data structure. Typically the code organizing the list into the data structure is written such that the data structure is static.

Although the aforementioned known types of data structures provide adequate data retrieval performance the method by which data is structured can be improved. For example linked list data structures are useful for initial organization of data. However entries organized within the linked lists may be difficult to search and randomly access. In contrast array backed list data structures are relatively easy to search and randomly access however such data structures may not be easily initiated. Because the structure into which the entries is to be organized is pre determined before the user uses the data system performance may not be optimized.

Accordingly there is a need for a method of organizing data that is relatively easier to use than conventional data organization systems and or structures. Moreover it is desirable to have a method of organizing data that can be used to initialize data and or provide improved searching and or random access of the data if desired by the user. Additionally it is desirable for the list implementation be dynamic such that actual usage of the data determines which data structure should be implemented to thereby improve performance of the organization under varied usage conditions.

The present invention provides an improved method for organizing data. In an embodiment by way of example only the method includes monitoring usage of the data detecting a pattern in the usage of the data and assigning a first concrete implementation associated with a first data structure to the data based in part on the detected pattern of usage of the data.

The present invention further provides a computer system for organizing data. In an embodiment by way of example only the computer system includes an application programming interface API a usage recording component an implementation switching component and a concrete implementation component. The API is configured to define a plurality of operations to be performed on data to make up a usage of the data. The usage recording component is configured to record the operations performed on the data. The implementation switching component is configured to monitor usage of the data to detect a pattern of usage to retrieve a first set of conditions under which a corresponding concrete implementation becomes active to determine whether the first set of conditions are met by the pattern of usage of the data and to assign the corresponding concrete implementation associated with a data structure if the first set or conditions are met. The concrete implementation component is configured to execute the operations in the API in accordance with the corresponding concrete implementation associated with the data structure.

In another embodiment by way of example only the present invention further provides a physical computer storage medium comprising a computer program product method for organizing data. The physical computer storage medium includes computer code for monitoring usage of data computer code for detecting a pattern in the usage of the data and computer code for assigning a first concrete implementation associate with a data structure based in part on the detected pattern of usage of the data.

Methods computer systems and physical computer storage media have now been provided that are configured to dynamically organize data into data structures by evaluating actual usage of the data by a user. The methods by which the computer systems operate and that are embodied by the physical computer storage media can be used to initialize data and or provide improved searching and or random access of the data if desired by the user. The method generally includes monitoring usage of the data detecting a pattern in the usage of the data and assigning a first concrete implementation associated with a first data structure to the data based in part on the detected pattern of usage of the data and can be performed using any one of numerous types of computer systems.

In the illustrated embodiment of data storage system can perform the method of the present invention. Data storage system comprises storage controller and data storage media and . Storage controller communicates with data storage media and via I O protocols and respectively. I O protocols and may comprise any sort of I O protocol including without limitation a fiber channel loop SCSI Small Computer System Interface iSCSI Internet SCSI SAS Serial Attach SCSI Fiber Channel SCSI over Fiber Channel Ethernet Fiber Channel over Ethernet Infiniband and SATA Serial ATA .

The term physical computer storage medium is defined herein as a data storage medium in combination with the hardware firmware and or software needed to write information to and read information from that data storage medium. In certain embodiments the physical computer storage medium comprises a magnetic data storage medium such as and without limitation a magnetic disk magnetic tape and the like. In certain embodiments the physical computer storage medium comprises an optical data storage medium such as and without limitation a CD DVD Digital Versatile Disk HD DVD High Definition DVD BD Blue Ray Disk and the like. In certain embodiments the physical computer storage medium comprises an electronic data storage medium such as and without limitation a PROM EPROM EEPROM Flash PROM compact flash smartmedia and the like. In certain embodiments the physical computer storage medium comprises a holographic data storage medium.

Storage controller is in communication with host computers and . As a general matter host computers and each comprises a computer system such as a mainframe personal computer workstation and combinations thereof including an operating system such as Windows AIX Unix MVS LINUX etc. Windows is a registered trademark of Microsoft Corporation AIX is a registered trademark and MVS is a trademark of IBM Corporation UNIX is a registered trademark in the United States and other countries licensed exclusively through The Open Group and LINUX is a registered trademark of Linus Torvald . In certain embodiments one or more of host computers and or further includes a storage management module respectively. In certain embodiments storage management modules and may include the functionality of storage management type programs known in the art that manage the transfer of data to and from a data storage and retrieval system such as for example and without limitation the IBM DFSMS implemented in the IBM MVS operating system.

Storage management modules and may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. Storage management modules and may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Storage management modules and may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified storage management module need not be physically collocated but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module

A module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Storage controller comprises processor computer readable medium microcode written to computer readable medium and instructions written to computer readable medium . Processor utilizes microcode to operate storage controller . Host computers and are connected to fabric utilizing I O protocols and respectively. I O protocols and may be any type of I O protocol for example a Fiber Channel FC loop a direct attachment to fabric or one or more signal lines used by host computers and to transfer information to and from fabric .

Fabric includes for example one or more FC switches . Those one or more switches comprise one or more conventional router switches. One or more switches interconnect host computers and to storage controller via I O protocol . I O protocol may comprise any type of I O interface for example a Fiber Channel Infiniband Gigabit Ethernet Ethernet TCP IP iSCSI SCSI I O interface or one or more signal lines used by FC switch to transfer information through to and from storage controller and subsequently data storage media and . In other embodiments one or more host computers such as for example and without limitation host computers and communicate directly with storage controller using I O protocols and respectively.

As noted above storage management modules and are utilized to store and delete data sets on a physical computer storage medium and can comprise executable code or operational data that is organized within any suitable type of data structure. To manage data dynamically according to the present invention a computer system is included for operating the data storage system . A schematic of a computer system is illustrated in according to an embodiment. Computer system made up of software includes an application programming interface API a usage recording component an implementation switching component and concrete implementation component . The API is configured to define a plurality of operations to be performed on data to make up a usage of the data. The operations defined by the API include but are not limited to operations that are performed on a data structure including but not limited to well known functions such as enqueue on a Queue push on a Stack and getParent on TreeNode. Each operation performed on the data comprises a usage event and a plurality of usage events provides a usage of the data. To provide an interface to a user the API is further configured to be receive functions calls from other parts of the software of the computer system are able to make function calls to the functions that comprise the API.

The API communicates with the usage recording component . In an embodiment the API communicates with the usage recording component via shared memory registers buses and the like. The usage recording component is configured to record the operations performed on the data by the user via the API . In certain embodiments the usage recording component records add and or remove events. In other embodiments the usage recording component tracks operations performed on the API . In still other embodiments the usage recording component is configured to track composite data from the operations performed on the data. For example the composite data can comprise a total number of events making up the operations performed on the data a frequency of one or more events occurring among the operations performed on the data and or a ratio of occurrences between selected events. In any case a record of the collected recorded operations is used in a determination as to which data structure is to be assigned to the recorded operations.

The implementation switching component is configured to monitor usage of the data to detect a pattern of usage. Additionally the implementation switching component retrieves a first set of conditions under which a corresponding concrete implementation becomes active to determine whether the first set of conditions are met by the pattern of usage of the data. If the first set of conditions is met the implementation switching component assigns the corresponding concrete implementation associated with a data structure. It will be appreciated that logic is used to determine if the first set of conditions is met. In another embodiment the implementation switching component is further configured to identify a change in the pattern of usage and to switch the corresponding concrete implementation associated with the data structure to another concrete implementation based in part on the change in the pattern of usage.

The concrete implementation component communicates with the implementation switching component . The concrete implementation component implements logic for importing data from another concrete implementation and logic to execute operations in the API . Specifically the concrete implementation component is configured to execute the operations in the API in accordance with the corresponding concrete implementation associated with the data structure assigned by the implementation switching component . For example the concrete implementation component is further configured to import data from the corresponding concrete implementation associated with the data structure and transforming the imported data into a local implementation.

In an embodiment in which the implementation switching component detects a change in the pattern of usage of the data and activates a new concrete implementation the concrete implementation component can be configured to import data from the previously active concrete implementation and to transform the retrieved data into the new concrete implementation. As data is imported and transformed the previously active concrete implementation remains active and API calls continue to be routed thereto. However after the data import is completed the new concrete implementation and subsequent API calls are then routed to the new concrete implementation. In another embodiment data import and routing API calls to the new concrete implementation can occur simultaneously.

A pattern in the usage of the data is detected step . Next a first concrete implementation associated with a first data structure is assigned to the data based in part on the detected pattern of usage of the data step . In particular to identify which data structure should be assigned to the data monitored in steps and a first set of conditions under which the first concrete implementation is activated is retrieved. Then a determination is made as to whether the detected pattern of usage meets the first set of conditions and the first concrete implementation is assigned to the first data structure if the first set of conditions is met. Steps and are performed by the implementation switching component .

If a change in the pattern of usage of the data is identified after the step of assigning e.g. step step the first concrete implementation associated with the first data structure is switched to a second concrete implementation based in part on the change in the pattern of usage step . As used herein the term second concrete implementation is defined as a concrete implementation of a data structure that is different from that of the first concrete implementation. During step the data associated with the first concrete implementation associated with the first data structure is imported and transformed into a local implementation in an embodiment. Calls can be routed to the first concrete implementation during step . During step calls can be routed to the second concrete implementation.

While at least one exemplary embodiment has been presented in the foregoing detailed description of the invention it should be appreciated that a vast number of variations exist. It should also be appreciated that the exemplary embodiment or exemplary embodiments are only examples and are not intended to limit the scope applicability or configuration of the invention in any way. Rather the foregoing detailed description will provide those skilled in the art with a convenient road map for implementing an exemplary embodiment of the invention it being understood that various changes may be made in the function and arrangement of elements described in an exemplary embodiment without departing from the scope of the invention as set forth in the appended claims and their legal equivalents.

As will be appreciated by one of ordinary skill in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a physical computer readable storage medium. A physical computer readable storage medium may be for example but not limited to an electronic magnetic optical crystal polymer electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. Examples of a physical computer readable storage medium include but are not limited to an electrical connection having one or more wires a portable computer diskette a hard disk RAM ROM an EPROM a Flash memory an optical fiber a CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program or data for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wired optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing. Computer code for carrying out operations for aspects of the present invention may be written in any static language such as the C programming language or other similar programming language. The computer code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network or communication system including but not limited to a local area network LAN or a wide area network WAN Converged Network or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flow diagrams and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flow diagrams and or block diagrams and combinations of blocks in the flow diagrams and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flow diagram and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flow diagram and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flow diagram and or block diagram block or blocks.

The flow diagrams and block diagrams in the above figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flow diagrams or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flow diagrams and combinations of blocks in the block diagrams and or flow diagram can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While one or more embodiments of the present invention have been illustrated in detail one of ordinary skill in the art will appreciate that modifications and adaptations to those embodiments may be made without departing from the scope of the present invention as set forth in the following claims.

