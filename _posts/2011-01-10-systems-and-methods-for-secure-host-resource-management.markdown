---

title: Systems and methods for secure host resource management
abstract: Systems and methods are described herein to provide for secure host resource management on a computing device. Other embodiments include apparatus and system for management of one or more host device drivers from an isolated execution environment. Further embodiments include methods for querying and receiving event data from manageable resources on a host device. Further embodiments include data structures for the reporting of event data from one or more host device drivers to one or more capability modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510760&OS=08510760&RS=08510760
owner: Intel Corporation
number: 08510760
owner_city: Santa Clara
owner_country: US
publication_date: 20110110
---
This application is a divisional of U.S. application Ser. No. 11 173 885 filed Jun. 30 2005 issued as U.S. Pat. No. 7 870 565 which is incorporated herein by reference in its entirety.

Various embodiments described herein relate generally to resource management on a host device and more particularly to secure host resource management.

A conventional computing platform may include diagnostic hardware tools. An operator may employ these tools to maintain monitor and or troubleshoot the computing platform. Additionally the platform may include one or more hardware devices intended to control the environment within which the platform is operating. Examples of such devices include fans network cards and the like. Each of these devices and any other diagnostic tools communicate with the platform using separate and proprietary mechanisms.

In the following detailed description of embodiments of the invention reference is made to the accompanying drawings which form a part hereof and in which are shown by way of illustration specific preferred embodiments in which the subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that logical mechanical and electrical changes may be made without departing from the spirit and scope of the present disclosure. Such embodiments of the inventive subject matter may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

In an embodiment the host device is configured to perform operations implementing an operating system and other software applications. Operating systems may include operating systems based on Windows Unix Linux Macintosh and operating systems embedded on a processor. The host device may include without limitation desktop PC server PC PDA etc. The host device is further configured to run one or more software applications. In an embodiment the software applications report events regarding their operations. The software applications include without limitation stand alone software applications i.e. word processing applications login applications and the like and software applications that control hardware devices. Hardware devices include without limitation network interface cards bus controllers memory controllers graphics cards storage controllers and the like. In a further embodiment the host device includes one or more managed entities where each managed entity is configured to perform operations on a computing device. In such an arrangement each of the managed entities can be configured to execute a separate instance of an operating system and software applications and has the advantage of isolated operations of one managed entity from each of the other managed entities.

In an embodiment the management device is configured to perform management operations. Management operations include operations intended to cause a change in some operating condition of the host device . Examples of management operations include without limitation setting network speed on a network interface setting an auto negotiation features of a network interface sending a command to alter the performance of a software controlled environmental control device. In an embodiment the management device is configured to be executed inside an isolated execution environment. In an embodiment an isolated execution environment is an execution environment that is configured to execute code independently and securely isolated from a host that it is communicatively coupled to. In a further embodiment the isolated execution environment is further configured to prevent software running on the host from performing operations that would alter modify read or otherwise affect the code store or executable code that is running in the isolated execution environment. In the context of the present application the management device is executed inside an isolated execution environment which prevents all software executed by the host device from altering or reading any instructions contained on the management device .

In a further embodiment the host device and the management device may be communicatively coupled through a bus as described above. The management device may include without limitation a service processor an embedded microcontroller a virtual partition and the like.

In an embodiment the host device is configured to send event data to the management device . In such an arrangement the management device is configured to receive the event data and perform operations using that data. Operations may include without limitation comparing with pre set threshold values combining the event data with other event data to determine some operating condition on the host device combining the event data with other data received from the host device or some other managed hardware device.

In an embodiment the one or more host resources include one or more hardware devices coupled to the host device . In another embodiment the one or more host resources include one or more software resources that are configured to communicate to the management core through a host resident software agent or host device driver. Examples of software resources include without limitation firmware modules and operating system device drivers. In a further embodiment the one or more host resources include a combination of hardware devices and software resources. The one or more host resources of the host device are configured to detect conditions occurring in the host device and send an event message to the management core of the management device . In one embodiment the event message includes an event Resource Data Record RDR . The event RDR is discussed in greater detail below with respect to .

In an embodiment the management core is configured to receive event messages from the one or more host resources . In another embodiment the management core is configured to poll the one or more host resources . In such an arrangement the one or more host resources send an event message to the management core in reply.

In an embodiment the one or more event consumers are software modules configured to receive event messages from the management core . In a further embodiment the one or more event consumers include software modules that are configured to subscribe to one or more event types. Event types are logical groupings of various events that can be reported by the one or more host resources . An example of an event type may be network operations. Events grouped under the network operations event types might include without limitation network interface card NIC up NIC down packets sent packets received and the like. An event consumer that monitors network operations would receive all of those events if the event consumer was subscribed to that network type.

In an embodiment the management device is executed within an isolated execution environment such that operations on the host device are not capable of accessing or otherwise altering the code executed on the management device .

In an embodiment the one or more provider modules are low level software components that supply a message receipt and delivery service to the management core and the management core sends those messages to the event routing service . In a further embodiment the one or more provider modules are configured to enable communications with the one or more host resources . In an embodiment the one or more provider modules include a mailbox interface a memory scan interface and a serial interface .

In an embodiment the mailbox interface uses any suitable transport mechanism for receiving event messages from the one or more host resources . In an embodiment the mailbox interface is configured to retrieve host resource event information and send control information using a message type delivery scheme. Such a message type delivery scheme can be implemented on any variety of lower layer bridge mechanisms as are well known in the art. In an embodiment the mailbox interface is configured to communicate using Direct Memory Access DMA . In another embodiment the mailbox interface is configured to communicate using any bus as described above available to the computing device . In a further embodiment the mailbox interface includes a DMA mailbox interface configured to use DMA to access physical memory of the host device . In such an arrangement the DMA mailbox interface is configured to manage the resources for communicating with the DMA host device drivers on the host device . In one embodiment the DMA mailbox interface is configured to manage resources using a First In First Out FIFO arrangement such that messages are processed as they are received.

In an embodiment the memory scan interface is configured to directly read memory mapped registers . In one embodiment the memory mapped registers contain sensor data from sensors coupled to the host device . In one embodiment the memory scan interface uses DMA to access the host memory. In an embodiment the memory scan interface is configured to access physical memory addresses of the host device . In another embodiment the memory scan interface is configured to access virtual memory addresses of the host device . In either embodiment the memory scan interface is configured to directly read memory mapped registers of the host device independent of the host device .

In an embodiment the serial interface is configured to handle communications with serial devices on the computing device . In one embodiment the serial interface implements similar functionality as the mailbox interface in that it receives event data from one or more serial devices . In an embodiment a separate serial interface is present for each of one or more serial devices . In an embodiment the serial interface is configured to receive messages using any suitable protocol and translate the messages into messages operable by the management core . In another embodiment the serial interface is configured to receive messages from the management core and translate the messages into a message suitable for sending over an appropriate serial protocol. In an embodiment the serial interface is configured to communicate with a serial device using an appropriate underlying serial protocol for that device. In such an arrangement a separate instance of the serial interface is used for each distinct serial protocol implemented. For example each of the serial devices on the computing device may be configured to operate using different serial protocols such as Intelligent Platform Management Interface IPMI System Management Bus SMBus and Intelligent Interface Controller I2C . Additionally the serial device may be configured to communicate using the Hardware Platform Interface HPI application programming interface API . In such an arrangement each of the serial devices communicates with an individual instance of the serial interface .

As discussed above a host device driver is configured to sense conditions on a device. At block the host device driver sends to the management core an event message. In an embodiment the event message is an event RDR. At block the management core reads the event type contained within the event message and determines which if any of the one or more CMs are subscribed to that event type at block . In one embodiment the event type is contained within the RDR header of the event RDR. In another embodiment the event type is contained within the event message. Each of the one or more CMs are configured to perform management tasks for logical groupings of operations on a host device . Use of the event type information by the management core ensures that only those CMs concerned with that event type and the event data associated with receive the event data.

At block the management core determines if the event exceeds a threshold value set by a CM that is subscribed to the event type. In one embodiment the management core received threshold values from the subscribed CM when the subscribed CM first subscribed to that event type. In another embodiment the management core receives a threshold value from the subscribed CM at some time after the initial subscription. In such an arrangement the subscribed CM is able to respond to changing system conditions such as without limitation temperature operating conditions of the host device network operations etc.

At block the management core sends the event message to the subscribed CM . In an embodiment the management core sends the event message to the subscribed CM through the event routing service . The CM performs additional operations on the received event data. Such additional operations include without limitation storing the event data comparing the event data with previously received similar event data for the purposes of detecting trends in system conditions comparing the event data with other received event data to detect overall system conditions performing operations using the event data other event data to generate management instructions intended to cause a change in the operations being performed on the host device and sending notification of the event to a remote management station such as the management device .

Though depicted as a single sequence of operations the management core in an embodiment is configured to perform multiple instances of the operations depicted in concurrently. In such an arrangement the management core can communicate with more than one host device driver and receive more than one event at a time.

In one embodiment the management core receives events from a host device driver through an interface module as discussed above with respect to . In such an arrangement the event data may be received on any of the following mailbox interface memory scan interface or serial interface . This is not meant to be limiting and any interface configured to receive event data from a host device driver using an RDR data format as described below in more detail with respect to and sending that event data to a management core is considered to be within the scope of the present discussion. In one embodiment the mailbox interface receives event data over a DMA channel. In another embodiment the mailbox interface receives event data over any suitable bus protocol. In one embodiment the memory scan interface receives the contents of a page in memory over a DMA channel. In one embodiment the serial interface is configured to communicate using the HPI API. In another embodiment the serial interface receives event data over an IPMI bus. In a further embodiment the serial interface is configured to receive events using a format other than an event RDR data format and translate the received event into an event RDR data format and send the translated event to the management core where operations can proceed as discussed above. Usage of the serial interface to translate received events into an event RDR data format allows the management device to detect conditions on legacy serial devices and manage those devices using the same procedures that the management device uses to manage software resources on the host device .

At block the management core queries a host device driver on a host device for event types supported by the host device driver . In an embodiment the management core queries each of the host device drivers on the host device . An example of event types is network operations. At block the management core receives from the host device driver event types supported by the host device driver . At block the management core caches the received event types. In an embodiment the management core caches the received event types in a resource data record repository. In one embodiment operations cease after the received event types are cached at block . In another embodiment some time after the operations at blocks to a CM requests for an event types from the management core at block . At block the management core compares the requested event type with event types stored in the data repository and determines which of the stored event types match the request. At block the management core subscribes the CM to the matched event types. In an embodiment the operations at blocks to provide an efficient means for a management device to load in a CM or process an event type subscription from a CM . The data repository stores a list of all event types supported by the host device drivers on the host device. By matching the request from the CM received at block the management core avoids having to query or re query each of the host device drivers each time a CM requests a subscription to an event type.

At block the management device determines a set of managed entities present on the host device . In one embodiment managed entities register with the management device. Registration with the management device includes without limitation voluntary registration and pre registration. In another embodiment the management device determines the set of managed entities by scanning memory on the host device . In a further embodiment any method that for determining the presence of managed entities on a device is considered within the scope of the present discussion and discussion of specific methods is not meant to be limiting in any manner.

As discussed above the host device includes in an embodiment one or more managed entities each of which is configured to execute independently of the others. At block the management device queries each of the set of managed entities for a set of manageable resources on the managed entity. In one embodiment the manageable resource is a host device driver . In another embodiment the manageable resource is a ring 3 software application. At block the management device receives event types. In one embodiment at block the management device receives from each of the managed entities event types supported by the manageable resources on the managed entity. In another embodiment at block the management device receives from each of the manageable resources event types supported by the manageable resources. The management device at block registers the event types with the event routing service . At block a threshold value for the event type is set for the registered event type. In one embodiment the threshold value is set to a default value by the management device at block . In another embodiment the threshold value is communicated to the event routing service and set at block from a CM when the event type is registered with the event routing service . In a further embodiment the threshold value is set or modified at some time later by the CM .

In an embodiment the Event RDR includes an RDR header a Data Record and event data . The Event RDR provides a common way for all managed resource to report present conditions.

In an embodiment the RDR header is a header common to all Event RDRs regardless of the event data that is being reported in the Event RDR . The RDR header includes a Record ID an RDR type a Provider Type and a Resource Type . The Record ID provides a unique identifier for individual instances of manageable resources on the host device . In an embodiment the Record ID provides a unique 64 bit identifier. In a further embodiment the unique 64 bit identifier contains a 32 bit device selector identifier and a 32 bit device record ID. In an embodiment the 32 bit device selector is used by the management core to address a host device driver through an interface module. In an embodiment the 32 bit device record ID is a unique identifier assigned by the host device driver. The RDR type specifies a top level identifier for types of records. RDR types include without limitation sensor effector control entity event and association. The Provider Type specifies an interface module to be used to access the Event RDR . Provider Types include without limitation physical memory scan virtual memory scan DMA mailbox Alert Standard Format ASF and HPI IPMI. The Resource Type identifies the specific event type that comprises the particular Event RDR that contains it. The Resource Type defines the format of the remainder of the Event RDR . In an embodiment the Resource Type may be further defined by hardware and software vendors and used to describe standard and non standard manageable resources. In an embodiment the Resource Type uses two 32 bit numbers a first 32 bit number for Company ID in the form of an Internet Assigned Number Authority IANA Private Enterprise Number and a second 32 bit number that is a subtype relative to the Company ID.

In an embodiment the Data Record specifies the capabilities and attributes of manageable resources and associations between the attributes. Examples of Data Record types include without limitation Entity Sensor Effector Event RR and Association. The entity type Data Record provides detailed identification information for a manageable entity including the path to the entity and a description of the entity. The sensor type Data Record describes a manageable resource that is capable of reading operational or health data i.e. fan controller or network interface controller . In an embodiment the sensor type Data Record belongs to one manageable resource or entity. The effector type Data Record describes a manageable resource that is capable of controlling some aspect of the operations of the host device i.e. powering on a fan or enabling a feature on a NIC . In an embodiment the effector type Data Record belongs to one manageable resource or entity. The event type Data Record describes a manageable resource or entity s ability to generate asynchronous events. In an embodiment the event type Data Record belongs to one manageable resource or entity. The association type Data Record describes a logical relationship between Event RDRs of any type. In an embodiment the type and scope of the relationship is determined by information included with the association type Data Record .

In an embodiment the Data Record includes a Hard Data Record and Soft Data Record. In an embodiment the Hard Data Record is constructed by a serial interface module to wrap a serial record within an Event RDR as described above to provide compatibility between events from hardware devices on the computing device with manageable resources on the host device . In an embodiment the Data Record includes Provider Type Information Parent Information Data Size and an Event ID . Provider Type Information includes information regarding the interface module that the Host Device Driver is configured to communicate with.

In an embodiment the Event Data contains information regarding the actual event that is being reported in the Event RDR . Information regarding the actual event may include without limitation environmental conditions operating conditions state of operations contents of a memory mapped register etc. In an alternate embodiment the Event Data is contained within the Data Record .

In an embodiment the Event RDR message format defines a format the provides the ability for elements of a management device and manageable resources on a host device to communicate using a consistent method of management for both hardware and software resources. This format provides developers of CMs the ability to provide the CMs with the ability to communicate with any of a variety of manageable resources on a host device without regard to what the manageable resource is managing provided the manageable resource is also configured to communicate its conditions using the Event RDR format as shown in . Further the format provides developers of host device drivers the ability to report conditions on the host device and receive control messages from a management device without regard to the exact construction of the management device provided the management device is configured to read and send messages to and from the manageable resource using this format.

Though depicted and described as separate and distinct functional data blocks in it will be appreciated that all data blocks or some data blocks may be combined into single data blocks without departing from the scope of the embodiments described herein.

Following discovery of a host device driver by any suitable means the management core sends a SyncRequest message to the mailbox interface . The mailbox interface sends a notification message to the host device driver requesting event types from the host device driver . The host device driver responds with a message containing the requested event types sent to the mailbox interface . The mailbox interface sends a SyncCallback message to the management core . The management core registers the event type with the Event Routing Service using a Register EventType message . In one embodiment CMs are queried by the event routing service to determine if the CM should be subscribed to the event type identified in the Register EventType message . Such subscription would be in the form of a Subscribe EventType message sent from the CM to the event routing service . In another embodiment as the CM is first executed it requests subscription of an event type and if the request matches the event type identified in the Register EventType message . In such an arrangement the Subscribe EventType message is sent sometime after the Register EventType message and does not immediately follow it.

In an embodiment a host device driver operating on a host device regularly monitors conditions within a manageable resource. In one embodiment the host device driver periodically sends reports of those conditions as Event RDR messages to the mailbox interface module . In another embodiment the host device driver is configured to only send reports of a condition in the form of an Event RDR message if it meets a criteria set by the host device driver itself. In a further embodiment the host device driver is configured to only send reports of a condition if the condition meets a criteria set by a CM where the CM communicated the criteria to the host device driver through the management core . An example of such a criteria may be packets transmitted in a period of time. In such an example it would be useful information if the management core received event data of such type as it may be indicative of a condition where the network connection of the host device has been compromised and is being used by unauthorized software processes. In either embodiment the Event RDR message is sent from the host device driver to the mailbox interface . The mailbox interface receives the Event RDR message and sends a SyncCallback message and the Event RDR message to the management core . The management core sends a first Publish EventType message to the event routing service where the first Publish EventType message contains one or more of the following without limitation provider type RDR type Resource Type . A second Publish EventType message is sent to one or more CMs . In one embodiment the second Publish EventType message prompts the CM to set a threshold value for the event type using a SetThreshold Event message sent to the management core through the event routing service . In another embodiment the threshold value for the event type may be set prior to receiving event messages. In either embodiment the management core determines if the event data received in the Event RDR message exceeds a threshold value. If it does the management core sends a first Publish Event message to the event routing service which sends a second Publish Event message to the one or more CMs that are subscribed to those event types.

Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments of the invention. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that allows the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. Additionally in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the invention require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate preferred embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the terms comprising and wherein respectively. Moreover the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

