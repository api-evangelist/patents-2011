---

title: Systems and methods for safely executing programs
abstract: A computer-implemented method for safely executing programs may include identifying an attempt to launch an executable file. The computer-implemented method may also include identifying a reputation associated with the executable file. The computer-implemented method may further include determining, based on the reputation, that the executable file is not trusted. The computer-implemented method may additionally include, in response to determining that the executable file is not trusted, fulfilling the attempt by sandboxing a process instantiated from the executable file. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111089&OS=09111089&RS=09111089
owner: Symantec Corporation
number: 09111089
owner_city: Mountain View
owner_country: US
publication_date: 20110208
---
Consumers and businesses face a growing tide of malicious software that threatens the stability and performance of their computers and the security of their data. Computer programmers with malicious motivations have created and continue to create viruses Trojan horses worms and other programs in an attempt to compromise computer systems. These malicious programs are often referred to as malware. In an attempt to evade detection malicious programmers may inject malware into or among legitimate programs.

One approach to protect a computing system from many of the undesired effects of malware is to run programs on the computing system within a virtualized environment i.e. to sandbox the programs . A sandboxed program that contains malware may be prevented from making changes to the system that effect the operation of other programs and or the system as a whole. Unfortunately this approach may suffer from various drawbacks. For example sandboxing may consume additional system resources and or reduce application interoperability. Accordingly the present disclosure addresses a need for additional and improved systems and methods for safely executing programs.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for safely executing programs. Systems and methods described herein may safely execute programs by dynamically sandboxing untrusted programs e.g. at runtime based on the reputation of each program. For example a method may include identifying an attempt to launch an executable file identifying a reputation associated with the executable file determining based on the reputation that the executable file is not trusted and then in response to determining that the executable file is not trusted fulfilling the attempt by sandboxing a process instantiated from the executable file.

The systems described herein may identify the reputation of the executable file in any suitable manner. For example these systems may transmit an identification of the executable file to a server that includes a reputation database for executable files and then receive the reputation of the executable file from the server. In some examples identifying the reputation may include identifying community generated reputation data associated with the executable file.

Sandboxing the process may include any of a variety of steps. In some examples sandboxing the process may include intercepting one or more attempts by the process to change a system state such as an attempt to modify a system registry or a file making a record of the attempted change intercepting at least one subsequent attempt by the process to inspect the system state and then fulfilling the subsequent attempt to inspect the system state with the record of the attempted change. Additionally or alternatively sandboxing the process may include creating a virtual file that records at least one system change performed by the process. In some examples the systems described herein may also sandbox one or more calls to one or more libraries invoked by the process as a part of sandboxing the process.

In some examples sandboxing the process may involve sandboxing the process alone and not any other process. Additionally or alternatively sandboxing the process may entail sandboxing the process without sandboxing any process instantiated from trusted executable files launched from the same operating environment as the executable file.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for safely executing programs. Systems and methods described herein may safely execute programs by dynamically sandboxing untrusted programs e.g. at runtime based on the reputation of each program. By dynamically sandboxing untrusted programs based on their reputation these systems and methods may provide protection against malware as needed without sandboxing an entire system thereby potentially consuming more computing resources or modifying applications e.g. by repackaging them as virtualized applications . Accordingly these systems and methods may automatically and dynamically provide sandboxing for programs as needed without performing unnecessary virtualization operations.

The following will provide with reference to and detailed descriptions of exemplary systems for safely executing programs. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a sandboxing module programmed to in response to determining that the executable file is not trusted fulfill the attempt by sandboxing a process instantiated from the executable file. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing system and or reputation server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be deployed in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system illustrated in . As shown in system may include a computing system needing protection from malware in communication with a reputation server via a network . In one embodiment and as will be described in greater detail below computing system may include identification module reputation module determination module and sandboxing module .

Identification module may be programmed to identify an attempt to launch an executable file . Reputation module may be programmed to identify a reputation associated with executable file e.g. by retrieving reputation from reputation server . Determination module may be programmed to determine based on reputation that executable file is not trusted. Sandboxing module may be programmed to in response to the determination that executable file is not trusted fulfill the attempt by sandboxing a process instantiated from executable file .

Computing system generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing system include without limitation laptops desktops servers cellular phones personal digital assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Reputation server generally represents any type or form of computing device that is capable of providing reputation data relating to one or more programs. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a wide area network WAN a local area network LAN a personal area network PAN the Internet power line communications PLC a cellular network e.g. a GSM Network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing system and reputation server .

As illustrated in at step one or more of the systems described herein may identify an attempt to launch an executable file. For example at step identification module may as part of computing system in identify an attempt to launch executable file .

As used herein the phrase executable file may refer to any set of one or more computer executable instructions. Examples of executable files include portable executable files native executable files bytecode files executed with the assistance of an interpreter and or script files.

Identification module may perform step in any suitable manner. For example identification module may identify the attempt to launch the executable file by interfacing with an application programming interface of an operating system in which the executable file is launched. In some examples identification module may operate as part of a daemon configured to monitor an operating system for attempts to launch executable files. In some examples identification module may also intercept and or suspend the attempt to launch the executable file until e.g. the systems described herein determine whether to sandbox a process instantiated from the executable file .

Returning to at step one or more of the systems described herein may identify a reputation associated with the executable file. For example at step reputation module may as part of computing system in identify reputation associated with executable file . Using as an additional example reputation module may identify a reputation associated with executable file .

The term reputation as used herein generally refers to information that conveys the opinion of a specific community such as the user base of a security software publisher on the trustworthiness or legitimacy of an executable file software publisher and or file source such as a web domain or download link . Examples of reputation information include without limitation reputation scores where for example high reputation scores indicate that a file software publisher or file source is generally trusted within a community and low reputation scores indicate that a file software publisher or file source is generally untrusted within a community prevalence information e.g. information that identifies the number or percentage of user devices within a community that contain 1 an instance of a particular file 2 files provided by a particular software publisher and or 3 files obtained from a particular file source such as a web domain or any other information that may be used to identify a community s opinion on the trustworthiness or legitimacy of a file software publisher and or file source.

Reputation module may identify the reputation of the executable file in a variety of ways. For example reputation module may transmit an identification of the executable file e.g. a fingerprint of the executable file generated with a hash function identifying metadata associated with the executable file etc. to a server that hosts a reputation database for executable files. Reputation module may then receive the reputation of the executable file from the server. In some examples reputation module may receive reputation information relating to the executable file from the server e.g. the reputation of a software publisher of the executable file the reputation of a source of the executable file etc. . As mentioned earlier the reputation of the executable file may be community generated. For example the server that hosts the reputation database may receive information from various clients regarding the executable file the publisher of the executable file and or the source of the executable file.

In some examples reputation module may identify the reputation of the executable file by retrieving cached reputation data relating to the executable file. For example the reputation of the executable file may have been previously retrieved from a reputation server and then stored locally as metadata for the executable file.

Returning to at step one or more of the systems described herein may determine based on the reputation that the executable file is not trusted. For example at step determination module may as part of computing system in determine that executable file is not trusted based on reputation . Using as an additional example determination module may determine that executable file is not trusted based on reputation .

Determination module may perform step in any suitable manner. For example determination module may determine that the executable file is not trusted because a reputation score of the executable file fails to meet a predetermined threshold. In some examples determination module may use the reputation in concert with other information relating to the executable file to determine that the executable file is not trusted. For example in addition to the reputation of the executable file determination module may use other potential malware indicators such as suspicious signatures present in the executable file and or the context in which the attempt to launch the executable file was made e.g. whether the executable file was selected from an application menu a web browser attempted to launch the executable file the executable file was part of a list of programs to launch on startup etc. . Generally determination module may use any suitable algorithm or formula incorporating the reputation of the executable file to determine that the executable file is not trusted.

Returning to at step one or more of the systems described herein may in response to determining that the executable file is not trusted fulfill the attempt to launch the executable file by sandboxing a process instantiated from the executable file. For example at step sandboxing module may as part of computing system in sandbox process instantiated from executable file . Using as an additional example sandboxing module may create a sandbox for a process instantiated from executable file .

As used herein the term sandboxing may refer to any method for virtualizing changes made by a process. For example sandboxing may entail preventing a process from directly accessing one or more system resources. In some examples sandboxing may include exposing one or more virtual resources e.g. a virtual storage device to a process that represent one or more corresponding system resources removed from the view of the process. Additionally or alternatively sandboxing may include imposing one or more filters on interactions between a process and a system resource e.g. checking for and blocking potentially malicious interactions . In some examples sandboxing may include imposing one or more limitations on interactions between a process and a system resource e.g. the extent to which the process may consume the system resource . In some examples sandboxing a process may functionally isolate the process from one or more other processes e.g. preventing communication between the process and other processes preventing the process from affecting the state of other processes etc. .

As used herein the term process may refer to a program in execution e.g. an instantiation and or running copy of a program expressed by an executable file . In some examples the process may include multiple processes threads and or subprocesses. Sandboxing module may also sandbox these processes threads and or subprocesses as part of sandboxing the process.

Sandboxing module may perform step in a variety of ways. For example sandboxing module may sandbox the process by intercepting one or more attempts by the process to change a system state. For example sandboxing module may intercept an attempt by the process to modify a system registry. In this example sandboxing module may intercept each and every attempt by the process to modify the system registry. Alternatively sandboxing module may intercept some attempts by the process to modify the system registry e.g. sensitive settings within the system registry while allowing other attempts by the process to modify the system registry e.g. creating settings that pertain only to the application represented by the executable file . In another example sandboxing module may sandbox the process by intercepting one or more attempts to modify a file. In this example sandboxing module may intercept each and every attempt by the process to modify a file. Alternatively sandboxing module may intercept only certain attempts by the process to modify a file e.g. system files files pertaining to other applications etc. and or may allow only certain attempts by the process to modify a file e.g. files that pertain only to the application represented by the executable file while intercepting all other attempts. Generally sandboxing module may intercept attempts to modify any portion of a computing system running the process e.g. configuration settings data files executable files etc. that may affect the state of the computing system and or any application within the computing system.

Once sandboxing module intercepts an attempt by the process to change a system state sandboxing module may make a record of the attempted change. Sandboxing module may then intercept one or more subsequent attempts by the process to inspect the system state and fulfill the subsequent attempt to inspect the system state with the record of the attempted change.

Using as an example the systems described herein may have determined that executable file is untrusted based on its reputation . Accordingly sandboxing module may sandbox process instantiated from executable file in sandbox . Sandboxing module may with sandbox intercept any attempt by process to write to a system registry or a file system . Sandboxing module may record these attempts and where possible fulfill subsequent attempts by the process to inspect system registry or file system with the record.

Returning to step in some examples sandboxing module may sandbox the process by creating a virtual file that records one or more system changes performed by the process. For example sandboxing module may redirect attempts by the process to write to a system registry or to a file to the virtual file. Sandboxing module may then filter reads by the process through the virtual file. For example sandboxing module may intercept an attempt by the process to write to a configuration file. Sandboxing module may apply the write instead to the virtual file. The process may later attempt to read from the configuration file. Instead of fulfilling the read attempt from the configuration file sandboxing module may fulfill the read attempt from the virtual file to provide the process with a view of the configuration file consistent with the earlier write attempt.

Using as an example sandboxing module may redirect intercepted write attempts by process to a virtual file e.g. instead of allowing the process to perform the write attempts on system registry and or file system . If process later attempts to read from system registry or file system sandboxing module may first pass the read attempt through virtual file . Any read attempts and or portions of read attempts not fulfilled by virtual file may then be fulfilled by system registry and or file system .

Generally sandboxing module may use any virtualization methods systems and or techniques to sandbox the process. For example sandboxing module may sandbox the process by invoking a sandboxing function of a separate virtualization system.

In some examples sandboxing module may sandbox a call to a library invoked by the process. For example the process may invoke a method in a trusted library and sandboxing module may intercept and isolate file system writes and or registry changes attempted by the library in response to the invocation by the process. Additionally or alternatively the process may attempt inter process communication with a trusted process. Sandboxing module may in some examples then sandbox the trusted process.

In some examples sandboxing module may sandbox the process alone and not any other process. For example instead of virtualizing an entire operating system sandboxing module may apply a sandbox only to the process e.g. because only the process was determined to be untrusted . Accordingly other processes may initiate and run outside of the sandbox before during and or after the course of execution of the process. These other processes may therefore be able to directly access system resources while the process runs within the sandbox.

Additionally or alternatively sandboxing module may sandbox the process without sandboxing any process instantiated from trusted executable files launched from the same operating environment as the executable file. For example sandboxing module may sandbox only the process and any other untrusted process launched from the same operating environment e.g. the same computing system and or operating system . Sandboxing module may leave processes from trusted executable files to execute as normal outside of any sandbox.

Using as an example the systems described herein may identify an executable file with a reputation . These systems may determine based on reputation that executable file is trusted. Accordingly sandboxing module may allow a process instantiated from executable to execute without sandboxing process . Accordingly process may write to system registry and or file system . Process and process may run at the same time. While the systems described herein may dynamically sandbox process upon determining that executable file is untrusted based on reputation these systems may allow process to run without any virtualization.

Returning to step in some examples sandboxing module may sandbox the process for a single session. For example sandboxing module may virtualize and store changes made by the process while the process runs and then discard these changes when the process terminates. Additionally or alternatively sandboxing module may sandbox the process across sessions. For example changes sandboxing module may save changes made by the process even after the process terminates for use when the executable file is launched again. After step method may terminate.

By dynamically sandboxing untrusted programs based on their reputation the systems and methods described herein may provide protection against malware as needed without sandboxing an entire system thereby potentially consuming more computing resources or modifying applications e.g. by repackaging them as virtualized applications . Accordingly these systems and methods may automatically and dynamically provide sandboxing for programs as needed without performing unnecessary virtualization operations.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an input output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments storage devices and may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the identifying transmitting receiving determining intercepting making fulfilling creating and or sandboxing steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for safely executing programs.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of the systems described herein may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules described herein may transform a process into a sandboxed process. As another example one or more of the modules described herein may transform a computing system into a computing system for safely executing programs.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

