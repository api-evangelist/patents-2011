---

title: Network topologies for energy efficient networks
abstract: One embodiment receives at a first node in at least a portion of a network a routing table, the portion of the network comprising the first node and one or more second nodes, the routing table specifying the immediate neighbor that provides each of the best paths in the portion of the network based on a total cost; using the routing table, determines at the first node every second node that is necessary for the first node to reach all edges of the network, the second nodes that are necessary for the first node to reach all edges of the network comprising an active set for the first node; and sends a message from the first node to every second node to facilitate determining whether to shut down the second node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09124449&OS=09124449&RS=09124449
owner: Cisco Technology, Inc.
number: 09124449
owner_city: San Jose
owner_country: US
publication_date: 20110201
---
This disclosure generally relates to network topologies and more specifically relates to creating network topologies that reduce energy consumption throughout computer networks.

Energy efficiency is a popular concept in the modern era especially among people who are conscious of environmental issues. Reducing energy consumption in computer networks brings about many benefits the least of which including reducing operation costs and saving energy and thus the environment.

To ensure performance quality computer networks especially large networks such as those associated with data centers or large institutions often include a great number of routers and contain a high amount of coupling and redundancy between these routers in order to provide fast data transfer and recovery rates. Consequently the largest energy consumption in a computer network is often in the individual routers such as the energy required to maintain process and operate each router. In comparison the energy required to actually transfer data over a computer network is relatively insignificant.

Network usage typically varies depending on the time of the day or the day of the week. For example at nights or on weekends network usage is often low because less people are working. And yet the routers are kept running at all hours and thus consume large amounts of energy even when their usage is low. Energy is needlessly wasted as a result.

Often the largest energy consumption in a computer network is in the individual routers. Therefore by eliminating unnecessary routers from a network large amounts of energy may be saved over time. One way to eliminate unnecessary routers from a computer network is through network topology reduction. Many forms of topology reduction such as Dijkstra s algorithm mid sum routes DFS numbering and min metric have been implemented and used over time. However the existing forms of topology reduction usually require full knowledge of the topology of a network or focus on eliminating only unnecessary connections between routers instead of eliminating unnecessary router nodes throughout the network.

Particular embodiments take into account the energy consumption of the individual nodes e.g. routers in a computer network in order to design minimal topologies for the computer network so that during periods of low network usage or downtime large amounts of energy may be saved. Particular embodiments utilize a protocol independent algorithm to dynamically determine minimal topologies for computer networks. In particular embodiments the algorithm is protocol independent because it is not necessary for each node in a network to have any knowledge of the full topology of the network. In particular embodiments the algorithm not only optimizes energy usage in a network but maintains a performance standard in order to guarantee that the network does not lose its ability to perform the necessary tasks.

In particular embodiments a node in network may be directly connected with one or more other nodes . For example in node A is directly connected with nodes B and C node D is directly connected with nodes E F and G and node G is directly connected with nodes D and K. In particular embodiments a node may be directly connected with one or more user devices such as personal computers tablets smart telephones or game devices. For example in node A is directly connected with user device A while node H is directly connected with user devices B and C. In particular embodiments two components e.g. two nodes or a node and a user device are directly connected when there is a direct link with no other component between them. Thus node A is directly connected to node B but is not directly connected to node E because there is no direct link between nodes A and E.

In particular embodiments if a node is directly connected with one or more user devices it is referred to as an edge node e.g. an edge router . In particular embodiments when determining a minimal topology for a network all edge nodes in the network are kept alive and online at all times.

Each node has a first hop neighborhood also referred to as a one hop neighborhood and a second hop neighborhood also referred to as a two hop neighborhood . For each node its first hop neighborhood includes all the other nodes that are directly connected with the node all the other nodes that are one hop from node . For example in the first hop neighborhood of node A includes nodes B and C while the first hop neighborhood of node E includes nodes B C D and H. For each node its second hop neighborhood includes all the other nodes that are directly connected with any node in the first hop neighborhood of the node all the other nodes that are two hops from node . In other words for each node its second hop neighborhood includes all the other nodes that are connected with the node via only one other node. For example in the second hop neighborhood of node A includes nodes E H and I while the second hop neighborhood of node G includes nodes E F and J. Node I connects with node A via only node C and node C is in the first hop neighborhood of node A. Similarly node E connects with node A via only node B along one path or via only node C along another path and both nodes B and C are in the first hop neighborhood of node A. Note that as these examples illustrate the first hop and second hop neighborhoods are determined with respect to each specific node and the first hop and second hop neighborhoods of one node may differ from the first hop and second hop neighborhoods of another node. In addition it is possible that a node may not have any second hop neighbors e.g. when there are only a few nodes in the network . Furthermore in particular embodiments if a first node is connected with a second node via multiple paths then the shortest path between the first node and the second node is used to determine how many hops there are between the two nodes. Thus for example if the first node is directly connected with the second node on the one hand one hop and connected with the second node via a third node on the other hand two hops the first node and second node are considered one hop neighbors to each other.

Between any two nodes there may be one or more paths. For example in from node A to node C a first path may go from node A directly to node C a second path may go from node A to node B to node E to node C and a third path may go from node A to node B to node H to node E to node C. Of course the first path is shorter and thus generally more preferable than the second path which is in turn shorter than the third path. In particular embodiments each path between two nodes may be associated with a cost which may be the cost involved in transferring data from one node to the other node along this path. Particular embodiments may determine the cost of each path based on various factors such as for example and without limitation the total number of nodes along the path the cost of operating the individual nodes the cost of maintaining the connections between the nodes the time it takes to transfer the data and the delay along the path.

In particular embodiments there may be a protocol cost associated with traveling between the nodes e.g. routers . In particular embodiments the protocol cost is native to and determined based on the routing protocol running by the nodes. Different routing protocols may result in different protocol costs. For example the protocol cost may be determined as Protocol Cost K bandwidth delay where the term K represents a constant.

In particular embodiments when determining a minimal topology for a computer network for the purpose of reducing power consumption the algorithm used to determine the minimal topology may take into consideration any number of constraints or requirements such as performance requirements for the network formed according to the resulting topology.

In particular embodiments one constraint may be a baseline bandwidth also referred to as minimum bandwidth which is the minimum bandwidth that needs to be maintained across the network formed according to the resulting topology. In particular embodiments the baseline bandwidth may be represented as various metrics such as for example and without limitation delays and transfer rates. In particular embodiments the baseline bandwidth may be specified by a human user or determined based on system performance requirements. When determining a minimal topology for a network particular embodiments determine an active set of nodes for each node in the network described in more detail below in connection with . The active set of nodes of a specific node includes a minimum set of one hop neighbors of that specific node that is necessary to support the baseline bandwidth requirement.

In particular embodiments the baseline bandwidth may be presented as a metric that defines a profile for bandwidth requirements of different areas e.g. access distribution or core of the network. In particular embodiments this metric may be specified by a human user e.g. a network administrator and supplied to the algorithm used to determine a minimal topology for a network as an input.

In particular embodiments each node in the network has an identifier and a power consumption value and each link between two nodes has a bandwidth. In particular embodiments the node identifiers may be numbers alphabets or a combination thereof. For purpose of clarification let ID denote the identifier of a node PC denote the power consumption value of a node and BW denote the bandwidth of a link. Furthermore let BWdenote the baseline bandwidth. Particular embodiments assume that each node is aware of its immediate one hop neighbors and that a baseline bandwidth BWhas been specified.

In particular embodiments each node in the network has a routing table that specifies its one hop neighbor that provides the best path to each of the edge nodes as illustrated in STEP . A node may already has such a routing table in which case the node may simply use the existing table. If a node does not have such a routing table in particular embodiments the node may determine the routing table for itself.

In particular embodiments there may be one or more paths connecting a current node and a specific edge node. If there is only one path then this path is the best path for the current node to reach the specific edge node as there is no other choice. Thus the immediate one hop neighbor of the current node along this path is specified in the routing table of the current node in connection with this path. On the other hand if there are multiple paths then in particular embodiments the path with the lowest cost may be selected as the best path. In particular embodiments the cost of a path may be measured as the routing cost of the path e.g. the cost including for example energy cost protocol cost etc. required to transfer data along the path from the current node to the specific edge node . Thus the path that has the lowest routing cost between the current node and the specific edge node may be selected as the best path. The immediate one hop neighbor of the current node along this best path is specified in the routing table of the current node in connection with this path.

For the current node there is a best path leading to each of the edge nodes and thus a one hop neighbor is specified in the routing table of the current node in connection with each best path. In addition the same one hop neighbor of the current node may be on more than one best paths leading to more than one edge nodes. In this case in particular embodiments the same one hop neighbor of the current node may be specified in the routing table of the current node in connection with multiple best paths leading to multiple edge nodes.

For example in suppose node A is selected as the current node. There are two edge nodes C and E. Between nodes A and E there are two paths 1 from node A directly to node E and 2 from node A to node B to node E. It is most likely that the first path from node A directly to node E is the best path in terms of routing cost as it is the shortest most direct path among the two possible paths. For this path between nodes A and E node E is the one hop neighbor of node A along the path thus node E is included in the routing table of node A for this path.

Between node A and C there are also two paths 1 from node A to node B to node C and 2 from node A to node E to node B to node C. Again the first path from node A to node B to node C is most likely to be the best path in terms of routing cost as it is the shortest path among the two paths. For this path between nodes A and C node B is the one hop neighbor of node A along the path thus node B is included in the routing table of node A for this path.

As another example suppose node D is selected as the current node. Between nodes D and C there is only one path from node D to node B to node C. In this case the only path is the best path and node B is the one hop neighbor of node D along this path. Between nodes D and E there are two paths 1 from node D to node B to node E and 2 from node D to node B to node A to node E. In this case the first path is the best path as it is a shorter of the two paths. Again node B is the one hop neighbor of node D along this path. For the best paths to both edge nodes node B is the one hop neighbor of node D on the paths. Thus node B is included in the routing table of node D for both of the best paths to both edge nodes.

As explained above each link between two nodes has a bandwidth. Particular embodiments temporarily set the bandwidths of all those links having bandwidths greater than the baseline bandwidth BWto the baseline bandwidth BW as illustrated in STEP . Note that this is for the purpose of computation only and the bandwidths of these links are returned to their actual bandwidths after the computation is completed.

In particular embodiments each node recalculates its routing table as illustrated in STEP . In particular embodiments when each node recalculates its routing table the temporary bandwidths of the links are used. In particular embodiments each node re determines the best path to each of the edge nodes by re computing the cost of each path between the node and a specific edge node. Again in particular embodiments this cost may be the routing cost of each path.

In particular embodiments the cost of a specified path between a current node and a specific edge node may be computed as 1 if the bandwidth of the path is less than the baseline bandwidth BW then Cost Protocol Cost Energy Cost C MAX METRIC 2 and 2 if the bandwidth of the path is greater than or equal to baseline bandwidth BW then Cost Protocol Cost Energy Cost C. In particular embodiment the term C represents a scaling function. In particular embodiments the term C may be a function of energy such as C F energy c energy where the term c is a scaling factor e.g. a constant specified for example by a human user that may be used to scale energy with bandwidth of the path. In particular embodiments the term MAX METRIC may be an arbitrary number representing the highest value attainable in a certain number of system. Note that as illustrated above in particular embodiments the amount MAX METRIC 2 is added to the result Cost only when the bandwidth of the path is less than the baseline bandwidth BW. The purpose is to add a large number to the result Cost to ensure that a path having a bandwidth below the baseline bandwidth BWis not chosen before a path having a bandwidth that satisfies above the baseline bandwidth BW.

In particular embodiments once the new cost has been computed for each path each node may update its routing table using the newly computed costs of the paths. As described above for a current node the current node may select the best path to each of the edge nodes using the newly computed cost for each path. In particular embodiments again the path connecting the current node and a specific edge node that has the lowest cost recomputed cost may be selected as the best path between the current node and that specific edge node. In particular embodiments the first hop neighbor on the selected best path for each edge node is included in the routing table of the current node for that path.

In particular embodiments each node uses its updated routing table to determine every one of its one hop neighbor through which the node is able to reach one or more edge nodes. Using this information each node may obtain a list of its one hop neighbors that are necessary for the node to reach all of the edge nodes as illustrated in STEP . For example a specific one hop neighbor of a current node is necessary to the current node if it is on a path between the current node and an edge node.

In particular embodiments each node places its list of necessary one hop neighbors in the active set of the node as illustrated in STEP . For example a current node may includes in its active set the identifiers of its one hope neighbors that are necessary for the current node to reach all of the edge nodes. In particular embodiments any node that is not included in the active set of a node is considered unnecessary.

In particular embodiments each node may send a message e.g. a hello message to each of its one hop neighbors as illustrated in STEP . In particular embodiments for each node the message sent to each of its one hop neighbors may include a list of all the unnecessary one hop neighbors of the node that are not included in the active set of the node. In particular embodiments with respect to a current node each of the one hop neighbors of the current node may use the list to determine whether itself is necessary e.g. not on the list of the unnecessary neighbors received from the current node or unnecessary e.g. on the list of the unnecessary neighbors received from the current node . In particular embodiments those one hop neighbors of the current node that are on the list of the unnecessary neighbors may power themselves down to reduce energy consumption throughout the network.

In particular embodiments any node that is needed by less than two other nodes and is not an edge node may be powered down to reduce energy consumption in the network as illustrated in STEP . In particular embodiments a first node is needed by a second node if the first node is on one of the selected paths e.g. one of the best paths that connects the second node with an edge node.

At this point the remaining nodes that are still alive form a minimal topology for the computer network that reduces power consumption while satisfying the baseline bandwidth requirement. Topologies may be dynamically determined for a network using the method illustrated in . For example different topology profiles may be constructed for different times of the day e.g. morning afternoon evening or night or different days of the week e.g. weekdays and weekends . For each topology profile a user may specify the appropriate baseline bandwidth and minimum number of paths so that the network may be optimized based on different metrics under different circumstances.

Particular embodiments may be implemented in a network environment. illustrates an example network environment suitable for providing software validation as a service. Network environment includes a network coupling one or more servers and one or more clients to each other. In particular embodiments network is an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a metropolitan area network MAN a portion of the Internet or another network or a combination of two or more such networks . This disclosure contemplates any suitable network .

One or more links couple a server or a client to network . In particular embodiments one or more links each includes one or more wireline wireless or optical links . In particular embodiments one or more links each includes an intranet an extranet a VPN a LAN a WLAN a WAN a MAN a portion of the Internet or another link or a combination of two or more such links . This disclosure contemplates any suitable links coupling servers and clients to network .

In particular embodiments each server may be a unitary server or may be a distributed server spanning multiple computers or multiple datacenters. Servers may be of various types such as for example and without limitation web server news server mail server message server advertising server file server application server exchange server database server or proxy server. In particular embodiments each server may include hardware software or embedded logic components or a combination of two or more such components for carrying out the appropriate functionalities implemented or supported by server . For example a web server is generally capable of hosting websites containing web pages or particular elements of web pages. More specifically a web server may host HTML files or other file types or may dynamically create or constitute files upon a request and communicate them to clients in response to HTTP or other requests from clients . A mail server is generally capable of providing electronic mail services to various clients . A database server is generally capable of providing an interface for managing data stored in one or more data stores.

In particular embodiments one or more data storages may be communicatively linked to one or more severs via one or more links . In particular embodiments data storages may be used to store various types of information. In particular embodiments the information stored in data storages may be organized according to specific data structures. In particular embodiment each data storage may be a relational database. Particular embodiments may provide interfaces that enable servers or clients to manage e.g. retrieve modify add or delete the information stored in data storage .

In particular embodiments each client may be an electronic device including hardware software or embedded logic components or a combination of two or more such components and capable of carrying out the appropriate functionalities implemented or supported by client . For example and without limitation a client may be a desktop computer system a notebook computer system a netbook computer system a handheld electronic device or a mobile telephone. This disclosure contemplates any suitable clients . A client may enable a network user at client to access network . A client may enable its user to communicate with other users at other clients .

A client may have a web browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or MOZILLA FIREFOX and may have one or more add ons plug ins or other extensions such as TOOLBAR or YAHOO TOOLBAR. A user at client may enter a Uniform Resource Locator URL or other address directing the web browser to a server and the web browser may generate a Hyper Text Transfer Protocol HTTP request and communicate the HTTP request to server . Server may accept the HTTP request and communicate to client one or more Hyper Text Markup Language HTML files responsive to the HTTP request. Client may render a web page based on the HTML files from server for presentation to the user. This disclosure contemplates any suitable web page files. As an example and not by way of limitation web pages may render from HTML files Extensible Hyper Text Markup Language XHTML files or Extensible Markup Language XML files according to particular needs. Such pages may also execute scripts such as for example and without limitation those written in JAVASCRIPT JAVA MICROSOFT SILVERLIGHT combinations of markup language and scripts such as AJAX Asynchronous JAVASCRIPT and XML and the like. Herein reference to a web page encompasses one or more corresponding web page files which a browser may use to render the web page and vice versa where appropriate.

Particular embodiments may be implemented on one or more computer systems. illustrates an example computer system . For example system may be a node e.g. a router in a network e.g. network . In particular embodiments one or more computer systems perform one or more steps of one or more methods described or illustrated herein. In particular embodiments one or more computer systems provide functionality described or illustrated herein. In particular embodiments software running on one or more computer systems performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more computer systems .

This disclosure contemplates any suitable number of computer systems . This disclosure contemplates computer system taking any suitable physical form. As example and not by way of limitation computer system may be an embedded computer system a system on chip SOC a single board computer system SBC such as for example a computer on module COM or system on module SOM a desktop computer system a laptop or notebook computer system an interactive kiosk a mainframe a mesh of computer systems a mobile telephone a personal digital assistant PDA a server or a combination of two or more of these. Where appropriate computer system may include one or more computer systems be unitary or distributed span multiple locations span multiple machines or reside in a cloud which may include one or more cloud components in one or more networks. Where appropriate one or more computer systems may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation one or more computer systems may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein where appropriate.

In particular embodiments computer system includes a processor memory storage an input output I O interface a communication interface and a bus . Although this disclosure describes and illustrates a particular computer system having a particular number of particular components in a particular arrangement this disclosure contemplates any suitable computer system having any suitable number of any suitable components in any suitable arrangement.

In particular embodiments processor includes hardware for executing instructions such as those making up a computer program. As an example and not by way of limitation to execute instructions processor may retrieve or fetch the instructions from an internal register an internal cache memory or storage decode and execute them and then write one or more results to an internal register an internal cache memory or storage . In particular embodiments processor may include one or more internal caches for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal caches where appropriate. As an example and not by way of limitation processor may include one or more instruction caches one or more data caches and one or more translation lookaside buffers TLBs . Instructions in the instruction caches may be copies of instructions in memory or storage and the instruction caches may speed up retrieval of those instructions by processor . Data in the data caches may be copies of data in memory or storage for instructions executing at processor to operate on the results of previous instructions executed at processor for access by subsequent instructions executing at processor or for writing to memory or storage or other suitable data. The data caches may speed up read or write operations by processor . The TLBs may speed up virtual address translation for processor . In particular embodiments processor may include one or more internal registers for data instructions or addresses. This disclosure contemplates processor including any suitable number of any suitable internal registers where appropriate. Where appropriate processor may include one or more arithmetic logic units ALUs be a multi core processor or include one or more processors . Although this disclosure describes and illustrates a particular processor this disclosure contemplates any suitable processor.

In particular embodiments memory includes main memory for storing instructions for processor to execute or data for processor to operate on. As an example and not by way of limitation computer system may load instructions from storage or another source such as for example another computer system to memory . Processor may then load the instructions from memory to an internal register or internal cache. To execute the instructions processor may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions processor may write one or more results which may be intermediate or final results to the internal register or internal cache. Processor may then write one or more of those results to memory . In particular embodiments processor executes only instructions in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere and operates only on data in one or more internal registers or internal caches or in memory as opposed to storage or elsewhere . One or more memory buses which may each include an address bus and a data bus may couple processor to memory . Bus may include one or more memory buses as described below. In particular embodiments one or more memory management units MMUs reside between processor and memory and facilitate accesses to memory requested by processor . In particular embodiments memory includes random access memory RAM . This RAM may be volatile memory where appropriate Where appropriate this RAM may be dynamic RAM DRAM or static RAM SRAM . Moreover where appropriate this RAM may be single ported or multi ported RAM. This disclosure contemplates any suitable RAM. Memory may include one or more memories where appropriate. Although this disclosure describes and illustrates particular memory this disclosure contemplates any suitable memory.

In particular embodiments storage includes mass storage for data or instructions. As an example and not by way of limitation storage may include an HDD a floppy disk drive flash memory an optical disc a magneto optical disc magnetic tape or a Universal Serial Bus USB drive or a combination of two or more of these. Storage may include removable or non removable or fixed media where appropriate. Storage may be internal or external to computer system where appropriate. In particular embodiments storage is non volatile solid state memory. In particular embodiments storage includes read only memory ROM . Where appropriate this ROM may be mask programmed ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM electrically alterable ROM EAROM or flash memory or a combination of two or more of these. This disclosure contemplates mass storage taking any suitable physical form. Storage may include one or more storage control units facilitating communication between processor and storage where appropriate. Where appropriate storage may include one or more storages . Although this disclosure describes and illustrates particular storage this disclosure contemplates any suitable storage.

In particular embodiments I O interface includes hardware software or both providing one or more interfaces for communication between computer system and one or more I O devices. Computer system may include one or more of these I O devices where appropriate. One or more of these I O devices may enable communication between a person and computer system . As an example and not by way of limitation an I O device may include a keyboard keypad microphone monitor mouse printer scanner speaker still camera stylus tablet touch screen trackball video camera another suitable I O device or a combination of two or more of these. An I O device may include one or more sensors. This disclosure contemplates any suitable I O devices and any suitable I O interfaces for them. Where appropriate I O interface may include one or more device or software drivers enabling processor to drive one or more of these I O devices. I O interface may include one or more I O interfaces where appropriate. Although this disclosure describes and illustrates a particular I O interface this disclosure contemplates any suitable I O interface.

In particular embodiments communication interface includes hardware software or both providing one or more interfaces for communication such as for example packet based communication between computer system and one or more other computer systems or one or more networks. As an example and not by way of limitation communication interface may include a network interface controller NIC or network adapter for communicating with an Ethernet or other wire based network or a wireless NIC WNIC or wireless adapter for communicating with a wireless network such as a WI FI network. This disclosure contemplates any suitable network and any suitable communication interface for it. As an example and not by way of limitation computer system may communicate with an ad hoc network a personal area network PAN a local area network LAN a wide area network WAN a metropolitan area network MAN or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example computer system may communicate with a wireless PAN WPAN such as for example a BLUETOOTH WPAN a WI FI network a WI MAX network a cellular telephone network such as for example a Global System for Mobile Communications GSM network or other suitable wireless network or a combination of two or more of these. Computer system may include any suitable communication interface for any of these networks where appropriate. Communication interface may include one or more communication interfaces where appropriate. Although this disclosure describes and illustrates a particular communication interface this disclosure contemplates any suitable communication interface.

In particular embodiments bus includes hardware software or both coupling components of computer system to each other. As an example and not by way of limitation bus may include an Accelerated Graphics Port AGP or other graphics bus an Enhanced Industry Standard Architecture EISA bus a front side bus FSB a HYPERTRANSPORT HT interconnect an Industry Standard Architecture ISA bus an INFINIBAND interconnect a low pin count LPC bus a memory bus a Micro Channel Architecture MCA bus a Peripheral Component Interconnect PCI bus a PCI Express PCI X bus a serial advanced technology attachment SATA bus a Video Electronics Standards Association local VLB bus or another suitable bus or a combination of two or more of these. Bus may include one or more buses where appropriate. Although this disclosure describes and illustrates a particular bus this disclosure contemplates any suitable bus or interconnect.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

This disclosure contemplates one or more computer readable storage media implementing any suitable storage. In particular embodiments a computer readable storage medium implements one or more portions of processor such as for example one or more internal registers or caches one or more portions of memory one or more portions of storage or a combination of these where appropriate. In particular embodiments a computer readable storage medium implements RAM or ROM. In particular embodiments a computer readable storage medium implements volatile or persistent memory. In particular embodiments one or more computer readable storage media embody software. Herein reference to software may encompass one or more applications bytecode one or more computer programs one or more executables one or more instructions logic machine code one or more scripts or source code and vice versa where appropriate. In particular embodiments software includes one or more application programming interfaces APIs . This disclosure contemplates any suitable software written or otherwise expressed in any suitable programming language or combination of programming languages. In particular embodiments software is expressed as source code or object code. In particular embodiments software is expressed in a higher level programming language such as for example C Perl or a suitable extension thereof. In particular embodiments software is expressed in a lower level programming language such as assembly language or machine code . In particular embodiments software is expressed in JAVA. In particular embodiments software is expressed in Hyper Text Markup Language HTML Extensible Markup Language XML or other suitable markup language.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

This disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Moreover reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

