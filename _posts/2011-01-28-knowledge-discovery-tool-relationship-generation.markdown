---

title: Knowledge discovery tool relationship generation
abstract: A system for managing a knowledge model defining a plurality of entities is provided. The system includes an extraction tool for extracting data items from disparate data sources that determines if the data item has been previously integrated into the knowledge model. The system also includes an integration tool for integrating the data item into the knowledge model that integrates the data item into the knowledge model only if the data item has not been previously integrated into the knowledge model. Additionally, a relationship tool for identifying, automatically, a plurality of relationships between the plurality of entities may also be provided. The system may also include a data visualization tool for presenting the plurality of entities and the plurality of relationships.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08660977&OS=08660977&RS=08660977
owner: Accenture Global Services Limited
number: 08660977
owner_city: Dublin
owner_country: IE
publication_date: 20110128
---
The present patent document is a continuation in part of application Ser. No. 11 051 745 filed Feb. 4 2005 now abandoned the entire disclosure of which is hereby incorporated by reference. This application is also a continuation of application Ser. No. 11 128 427 filed May 11 2005 hereby incorporated by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever. The following notice applies to any software and data as described below and in the drawings hereto Copyright 2004 Accenture All Rights Reserved.

The present invention relates generally to an improved method for obtaining managing and providing complex detailed information stored in electronic form in a plurality of sources. The invention may find particular use in organizations that have a need to discover relationships among various pieces of information in a given field.

With the advent of the Internet the Information Age is upon us. Today one can find vast amounts of information about any given field or topic at the touch of a button. This information may be available from myriad sources in a variety of commonly recognized formats such as XML flat files HTML text spreadsheets presentations diagrams programming code databases etc. This information may also be kept in third party proprietary formats.

Amid this apparent wealth of online information people still have problems finding the information they need. Online information retrieval may have problems including those related to inappropriate user interface designs and to poor or inappropriate organization and structure of the information. Additionally the storage of information online in the variety of formats described above also leads to retrieval problems.

The existence of a variety of information sources leads to many problems. First there is a lack of a unified information space. An information space is the set of all sources of information that is available to a user at a given time or setting. When information is stored in many formats and at many sources a user is forced to spend too much overhead on discovering and remembering where different information is located e.g. web pages online databases etc . The user also spends a large amount of time remembering how to find information in each delivery mechanism. Thus it is difficult for the user to remember where potentially relevant information might be and the user is forced to jump between multiple different tools to find it.

The existence of a variety of information sources also leads to information discovery strategies that lack cohesion. Users must learn to use and remember a variety of metaphors user interfaces and searching techniques for each delivery mechanism and class of information. Other problems associated with large numbers of information sources include a lack of links between information sources and poor delivery mechanisms that don t provide a global view of the information space.

To overcome these problems knowledge discovery tools have been developed. These tools extract information from a plurality of data sources integrate the information into a common data model and provide a graphical user interface for viewing the information. While these types of systems have been useful for unifying the information space for a given domain they still suffer from several limitations.

First each of these data sources typically includes a large volume of files. Thus collecting and integrating information from a particular data source consumes both time and resources. However in order to truly represent the information space for a given domain these tools must collect data from many data sources. Each data source added to the process becomes an additional strain on both resources and time. Moreover this information must be processed repeatedly to ensure that the data model includes the most current information. Present systems will process a data source in its entirety each and every time an extraction and integration cycle take place. Accordingly there is a need for a system that doesn t waste time and resources re integrating information that has already been integrated into the data model.

Second integrating information from a plurality of data sources also leads to problems in the consistency of the information contained in the data model. Information in the data model may be overwritten by less reliable data. For example a particular person s name may be found in both a structured database maintained by the IRS and the text of an email. In present systems the name sourced from the email may be used to overwrite the name obtained from the IRS if the email is integrated later. Because the information maintained by the IRS is inherently more reliable than the text of an email because of both source credibility and structured data there is a need for a system that takes into account the reliability of the information maintained by the data sources before integrating that information into the data model.

Third the information integrated into the data model is inherently related as that information defines the information space for a given domain. Unfortunately present systems do not fully realize these interrelationships. Typically relationships between the data in the knowledge must be defined manually. Manually defining these relationships however is a time consuming and expensive process. While systems automatically incorporate those relationships maintained by a particular data source for example relationships defined by a database data source these relationships only represent a fraction of the relationships present among the information contained in the data model. Accordingly there is a need for a system automatically discovering and generating various types of relationships.

The present invention provides a robust technique for integrating from a plurality of data sources only the necessary most reliable data into a data model and automatically discovering inter relationships among the various elements of the data model.

In one embodiment a system for managing a knowledge model defining a plurality of entities is provided. The system includes an extraction tool for extracting data items from disparate data sources that determines if the data item has been previously integrated into the knowledge model. The system also includes an integration tool for integrating the data item into the knowledge model that integrates the data item into the knowledge model only if the data item has not been previously integrated into the knowledge model. Additionally a relationship tool for identifying automatically a plurality of relationships between the plurality of entities may also be provided. The system may also include a data visualization tool for presenting the plurality of entities and the plurality of relationships.

In another embodiment a method for determining a relationship between a plurality of entities of a knowledge model is provided where the knowledge model having a plurality of entity tables each of the plurality of entity tables including a plurality of records each of the plurality of records having a plurality of fields. The method may include retrieving a first relationship definition the first relationship definition defining a relationship between a first field and a second field retrieving a second relationship definition the second defining a relationship between a third field and a fourth field and generating automatically a transitive relationship definition based in part on the first relationship definition and the second relationship definition.

These and other embodiments and aspects of the invention are described with reference to the noted Figures and the below detailed description of the preferred embodiments.

Referring now to the drawings and particularly to there is shown an embodiment of a knowledge discovery system in accordance with the present invention. While the preferred embodiments disclosed herein contemplate a knowledge model based on an information space for pharmaceutical research and the information and data sources related thereto the present invention is equally applicable for knowledge discovery for any information space defined in any type of data source. Examples of information spaces include software development drug development financial research governmental data administration and clinical trials product development and testing etc.

The knowledge discovery system in the embodiment of includes an extraction tool an integration tool a knowledge model a user information database a middle tier and a web server . The extraction tool extracts relevant information from a plurality of data sources and . Optionally the extraction tool may convert the information into a common format such as XML. Preferably the extraction tool is implemented using BIZTALK SERVER provided by Microsoft Corporation of Redmond Wash. Once relevant information is extracted the integration tool incorporates the information into the knowledge model . Preferably the integration tool is implemented as a COM application using the COMPONENT OBJECT MODEL software architecture provided by Microsoft Corporation of Redmond Wash. Finally the middle tier and optional web server are provided to present the information contained in the knowledge model via a navigator tool . Preferably the middle tier is implemented using the NET framework for Web services and component software provided by Microsoft Corporation of Redmond Wash. Optionally access to the knowledge model via the navigator may be restricted to registered users. User information may be stored in the user information database .

Referring now to an exemplary knowledge model for use in one embodiment of the knowledge discovery system is shown. In the embodiment of the knowledge model defines an information space for pharmaceutical research and is represented by a relational database consisting of four distinct types of types. Entity tables define the content of the information space. In one embodiment each entity table may include a name field which may or may not be the primary key for that table and attribute fields. Exemplary entity tables are shown in .

Field to field relation tables define the relationships between the fields in the entity tables. In one embodiment three types of field to field relationships exist. A name to name relationship relates two name fields from two entity tables. A name to attribute relationship relates the name of one entity to an attribute of another entity. An exemplary field to field relationship is shown in . Finally an attribute to attribute relationship relates the attribute of one entity to an attribute of another. Field to text relationships define the relationships between a fielded entity terms and the text of unstructured data. For example the data model may include a person table that defines people in the information space and a literature table that includes fields for various information about an article in the information space but necessarily the text of the article. A text search of the article may be performed to determine if the person is mentioned in the article. An exemplary field to text relationship is shown in . In one embodiment each of the field to field relationship tables and the field to text relationship tables includes a field for the primary key of each entity referenced as well as managerial data such as a date created field. The relationship tables are described in more detail below in reference to .

Referring now to an exemplary workflow for an extraction tool in accordance with one embodiment is shown. Although the embodiment of shows certain processes being performed by certain exemplary tools and components it should be apparent to one of ordinary skill in the art that functions discussed below could be performed by any of the tools or components. In one embodiment a plurality of data sources is provided. As stated above each data source may contain thousands of data items of stored in various types of files XML flat files HTML text spreadsheets presentations diagrams programming code databases etc. that include information belonging to the given domain. In the embodiment of each data source may contain documents of any type created at any point in time. It should be apparent to one of ordinary skill in the art that other repository structures are contemplated by the present invention. For example one data source may be provided containing every piece of information to be analyzed. In other embodiments a plurality of data sources may be provided where each data source may contain only documents of certain types created at discrete segments of time or created at a certain geographical locations.

The extraction tool extracts relevant information from the various data sources . Preferably the extraction tool is an asynchronous process that begins processing a file as soon as that file is retrieved from a data source . Alternatively the extraction tool may be implemented as a batch process. In one embodiment each data source has an associated data source type. In one embodiment each data source may be either an internal data source or an external data source. An internal data source is a data source that is internal to the organization utilizing the knowledge discovery system whereas an external data source is a data source maintained by any other organization. Alternatively or in addition to the data source type may define the structure of the data source such as the underlying directory structure of data source or the files contained therein. Additionally the data source may be a simple data source consisting of a single directory or a complex data source that may store metadata associated with each file kept in the data source. In one embodiment the extraction tool connects to each of the data sources through data source adapters. An adapter acts as an Application Programming Interface or API to the repository. For complex data sources the data source adapter may allow for the extraction of metadata associated with the information.

Exemplary data sources include PUBMED a service of the National Library of Medicine that includes over 15 million citations for biomedical articles back to the 1950 s SWISS PROT PROTEIN KNOWLEDGEBASE which is an annotated protein sequence database established in 1986 the REFERENCE SEQUENCE RefSeq collection which aims to provide a comprehensive integrated non redundant set of sequences including genomic DNA transcript RNA and protein products for major research organisms KEGG or the Kyoto Encyclopedia of Genes and Genomes an ongoing project from Kyoto University LOCUSLINK a service of the National Library of Medicine that provides a single query interface to curated sequence and descriptive information about genetic loci MESH or Medical Subject Headings the National Library of Medicine s controlled vocabulary thesaurus OMIM or Online Mendelian Inheritance in Man a database catalog of human genes and genetic disorders and NLM TAXONOMY a searchable hierarchical index of names of all the organisms for which nucleotide or peptide sequences are to be found in certain data sources. Although each of these data sources constitutes a separate data source the information in each data source has strong inter relationships to information in others. Accordingly the files stored in any particular data source may include information relating the information therein. Referring to for example the PUBMED data source may include information relating a particular person to an organization. This information can be used to determine a relationship definition for a particular person and organization in the knowledge model . In one embodiment a field to field relationship that has been determined from information obtained from a data source is called a direct relationship. In one embodiment all the field to field relationships are determined automatically using information from the data sources . In further embodiments a file may include information relating information in itself to information in other data sources or relating information in two separate data sources .

Optionally the extraction tool may include various parameters used to determine whether a document is relevant. These parameters may be predefined or configurable by a user. For example a user may configure the extraction tool to only extract files from specified directories. It should be apparent to one of ordinary skill in the art that many other relevance parameters for example only certain file types or only files that have changed after a certain date are contemplated by the present invention.

As stated above the extraction process retrieves files from the data sources . The original files may include large files that are of varying formats. In one embodiment the extraction tool includes a cut tool that will split the original files into smaller records or documents etc. Preferably the cut tool will process the original files such that each record or document includes one and only one data item. Alternatively the cut tool may generate records or documents that include more than one data item. The original files may also include the information about all items in a single file separating the information using delimiters. Exemplary delimiters include or a blank line. A configuration file may be provided that details the delimiters used at a particular source. The configuration file may be used by the cut tool to process the original files. In one embodiment the cut tool may include particularized processor application for processing a particular type of original file such as an XML processor for cutting XML files or a text processor for manipulating text files. In one embodiment these particularized processor applications are implemented as C objects using the C object oriented programming language from Microsoft Corporation of Redmond Wash.

Once the files are split into records or documents the extraction tool preferably stores the records or documents in a file system. Optionally each record may include an identifier such as an identifier used by the data source to identify the original file. Exemplary identifiers include a SWISS PROT ID or a file name. Preferably the extraction tool also generates a global unique identifier for each record or document . The global unique identifier is used for tracking purposes as described below.

The extraction tool may also be provided with a map tool . The map functions to standardize the format of each record or document . In one embodiment the map tool serves two functions. First the map tool may create a normalized specification for the records or documents such as a standardized XML specification. For example records or documents created from flat files may be transformed into xml files while records or documents created from XML files may be mapped to the standard XML specification. Second the map tool may remove information from the record or document that is unnecessary to maintaining the knowledge model . In one embodiment the map tool outputs a single text string of XML.

Next the compare tool of the extraction tool compares the records or documents with those records or documents that have already been integrated into the knowledge model so that only records or documents that are new are further processed. As used herein a new record or document includes records or documents that have been integrated into the knowledge model but have since been modified. In other words previously entered records or documents and may include only those records or documents that have been integrated into the knowledge model and have not changed since their integration. In one embodiment compare tool will compute a value based on the record or document . Preferably the compare tool uses a hash function to generate a hash value for each record or document . The value may be based any part of the record or document such as the identifier or the information contained therein.

Referring now to an exemplary workflow for a compare tool is described in more detail. In the embodiment of each record or document has an associated identifier DocumentID as well as a data source identifier DataSourceID that identifies the data source from where the record or document was retrieved. First the compare tool generates a hash value HashCode for the current record or document . Next the compare tool compares the DataSourceID and DocumentID for the current record or document to a table of data for previously entered records or documents at block . In the embodiment of the table includes four items for each previously entered record or document a DataSourceID that identifies the data source a DocumentID that identifies the record or document a first has code value HashCodeActual that represents the hash code value for that record or document before it is integrated into the knowledge model and a second hash code value HashCodeCompare that represents the hash code value for that record or document after it has been integrated into knowledge model . If no match is found in the table this record or document has never been previously integrated into the knowledge model. Accordingly the compare tool stores the current DataSourceID and Document ID in the table at block . Additionally the HashCode will be stored as the HashCodeActual value for that record or document . The extraction process will continue to process the record or document at block . Once the record or document is integrated into the knowledge model the HashCodeCompare value will be updated with the HashCodeActual value at block .

If a match is found in the table at block the record or document has been previously integrated into the knowledge model . The compare tool next compares HashCodeActual to HashCodeCompare for the match. If two values are identical the record or document has not been modified since its last integration. Accordingly the record or document is not further processed as shown at block . If the values are different the record or document has been modified since its last integration. In this case the compare tool updates the HashCodeActual value with the current HashCode value at block . The extraction process will continue to process the record or document at block . Once the record or document is integrated into the knowledge model the HashCodeCompare value will be updated with the HashCodeActual value at block .

At this point the only records or documents to be processed are new records or documents that have been properly formatted. However the information contained therein may contain unnecessary information as a consequence of different data sources using different nomenclatures. For example an attribute name may be preceded by an asterisk or dash. Alternatively the record or document may contain HTML tag information. In one embodiment the extraction process is provided with a clean tool that removes this unnecessary information from the records or documents 

Once the record or document is cleaned the parse tool of the extraction tool restructures the information of the record or document . For example if a record or document includes an XML attribute tag containing multiple values separated by a delimiter the parse tool may each value into separate tags. Additionally the parse tool may unifies the different nomenclatures of the records or documents so that the information from the different sources is coherent. For example an Organism name may be listed under a first label in one data source and a second label in another data source. The parse tool may standardize this information.

Finally the extraction process may store the record or document to be integrated into the knowledge model. In the embodiment of the record or document is stored in a database . Alternatively the record or document may be stored in any manner that is apparent to one of ordinary skill in the art. In yet another embodiment the record or document is transmitted as part of a message to the integration process . Preferably the extraction tool stores the record or document in a database and sends a message that alerts the integration tool that a new record or document has been inserted. In one embodiment the message may be a field in the database which is polled by the integration tool .

Referring now to an exemplary workflow for the integration process is shown. Preferably the integration process is an automatic asynchronous process that doesn t need the entire extraction process to finish. For example in the embodiment of the integration process may begin integrating a record or document as soon as it is inserted into the database . This entry may be treated and integrated in an individual way and is passed through several components whose purpose is to integrate this source register into the knowledge model . The integration tool provides the users with more complete and higher quality information than the data sources alone.

In the embodiment of the integration tool only processes new records or documents because the extraction tool has removed those records or documents that have not been updated since the prior integration. This greatly improves the performance of the integration tool reducing the time necessary to complete the integration process. However the integration tool is equally capable of integrating any types of records or documents regardless of whether they have been integrated previously.

In one embodiment the integration tool may receive information to integrate in three ways. First the integration tool may receive information from the extraction tool . For example the extraction tool may process a record or document from a data source insert the record or document into a database and alert the integration tool of the presence of the new information. In response the integration tool may retrieve the information from the database . Second the integration tool may receive information from a re integration batch process. The re integration batch process may build a message of a similar format to those generated by the extraction process that alerts the integration process to the presence of a record or document that could not be integrated into the knowledge model during a previous attempt. Finally custom applications may be developed to alert the integration tool of information from particular data sources that do not require the full functionality of the extraction tool . For example an internal data source may be provided that includes files that adhere to a particular structure designed to ease the integration process. It should be apparent to one of ordinary skill in the art that any method may be used to introduce a record or document to the integration tool .

The integration tool may be provided with an integrate tool . The integrate tool performs four primary processes. First the integrate tool may retrieve a record or document from the database . Next the integrate tool may perform a spell check function on the data included in the record or document to ensure that misspellings in the original data source files do not effect the integrity of the knowledge model . Similarly the integrate tool may perform a synonym function to determine if the current term as used in the record or document is a synonym for a preferred name. Finally the integrate tool may perform a merge function that integrates the record or document into a database . In one embodiment the database represents a un optimized version of the knowledge model . A particular embodiment of the integrate tool is discussed in more detail below in reference to .

The integration tool may also be provided with various batch process tools to perform various functions on the information in the database . In the embodiment of the integration tool includes a relationship generation tool that may be used to analyze the information in the database . The relationship generation tool is discussed in more detail below in reference to . Similarly a synonym synchronization tool may run periodically to update the information in the database in accordance with the most recent list of synonyms. Finally a transition tool may be provided to optimize the information in the database to create the knowledge model . For example the transition tool may denormalize the information in the database generate cross over tables build indices on clustered indices on the primary key columns of various tables of the database and optimize the database for queries and data retrieval tasks. In one embodiment the transition tool generates a database that is replicated in a production environment as the knowledge model .

Referring now to the workflow for one embodiment of the integrate tool is shown. As described above the extraction tool may send a message to the integrate tool to inform the integration tool that new entries in the database need to be integrated into the knowledge model . The message may also indicate that the entries are from a particular data source . Initially the integrate tool creates an XMLDocument object. The XMLDocument object is a working version of a standard configuration file. In one embodiment each data source has a standard configuration file in XML that acts as template for the integration tool . An exemplary configuration file is shown in Table 1. It should be apparent to one of ordinary skill in the art that various types of configuration files in other formats are contemplated by the present invention.

As shown the configuration file includes various attributes that are used in later stages of the integration process. The exemplary configuration file includes five attributes a Thesaurus attribute a LookUp attribute a Compare attribute an Insert attribute and an Update attribute. The thesaurus attribute includes information in the record that need to be checked for spelling and or synonyms. In particular the thesaurus attributes define a field name to be checked and the values for that field name. This value will appear in ThesaurusSP and SpellingSP attributes if the value needs to be checked for synonyms or spelling respectively. If both the value needs to be checked for both spelling and synonyms it will appear in both attributes. The LookUp attribute defines each field in the database and the name of a procedure that can be used to lookup the associated row in the knowledge model . The Compare attribute defines the field in the database and its corresponding field in the knowledge model . The Insert attribute defines each field in the database and its corresponding confidence value as described below. Finally the Update attribute defines each field in the database its corresponding confidence level the field type and the corresponding field in the knowledge model and its corresponding confidence value. In one embodiment two field types are defined. An update type implies that the value of the field should be replaced in its entirety if a new record or document is to replace an existing entry in the knowledge model . An append type implies that the information in the new record or document should be appended to the current information.

As stated above each field includes an associated confidence value. The confidence value is used score the reliability of the data sources for each field of the knowledge model . For example multiple data sources may include information for one field of the knowledge model . To resolve this conflict the confidence value is used to determine which data source is more reliable for a given field. The confidence value may reflect an internal view of the reliability of the data sources i.e. the view of the system developers or the organization utilizing the knowledge discovery system or may reflect an external view of reliability i.e. the use of a third party reliability standard . In one embodiment the confidence value is a numerical value from 1 20 where the confidence value increases with the reliability of the data source . In one embodiment each of the plurality of data sources is ranked from 1 to N for each field of the knowledge model where N is the number of data sources . Alternatively multiple data sources may be equally reliable and therefore have the same confidence value. In such an embodiment the integration tool may chose the most recent record or document as controlling. Alternatively the integration tool may only replace a field if the confidence value of the new record or document is greater than the current entry.

In one embodiment a confidence value configuration file is provided. The confidence value configuration file may define a confidence value for each field of the knowledge model and for all data sources . Alternatively a separate confidence value configuration file may be provided for each data source . It should be apparent to one of ordinary skill in the art that various ways of tracking the reliability of a data source as well as various types of configuration files are contemplated herein. An exemplary XML confidence value configuration file is shown in table 2. In the exemplary confidence value configuration file each field of each table from each data source is ranked.

Referring now to an exemplary workflow for the loading the information from a received message into an XMLDocument object is shown. First the integrate tool reads the configuration file for the data source identified in the message at block . Next a check is performed to determine if an XMLDocument object for this data source is cached at block . If so the XMLDocument object is retrieved from the cache at block and the information from the message is used to populate the ConfigFileContent property of the XMLDocument at block . If no XMLDocument object for the particular data source is in the cache the integrate tool will create a new XMLDocument object and load it with the configuration file information at block put the new XMLDocument in the cache at block and populate the ConfigFileContent property of the XMLDocument with the information from the message at block .

Returning to after loading the received message into an XMLDocument object at the integrate tool next checks to see if the message contains a record or document that needs to be integrated into the knowledge model at block . If the message does not contain any additional records or documents that need to be integrated the process ends at block . If the message does contain a record or document that needs to be integrated the integrate method retrieves that record or document from the database at block . Next the integrate tool calls the thesaurus component to perform the spelling function and synonym function at block . In the embodiment of the thesaurus component includes an internal source such as a database with containing information on commonly misspelled words and synonyms or preferred words. In either case the thesaurus component will replace the misspelled or non preferred word with the proper word. Alternatively an external source may be used by the thesaurus component.

Referring to an exemplary workflow for the Thesaurus component is shown. First the Thesaurus component retrieves the field names from the XMLDocument Thesaurus attribute at block . Next the Thesaurus component will check to determine if any more fields need to be checked at block . If no more fields need to be checked the Thesaurus component will exit at block . If a field needs processing the Thesaurus component will retrieve the corresponding ThesaurusSP and SpellingSp values at block . Next the Thesaurus component will retrieve the word to check at block and call the SpellingCheck procedure at block . The SpellingCheck procedure first determines if the SpellingSp value is non blank at block . If the SpellingSp value is non blank the SpellingSP procedure is executed at block . In one embodiment the SpellingSp procedure checks the SpellingSp value against a spellings table that includes the correct word and various misspellings. When the correct word is found it is substituted for the old value at block . At this point or if the SpellingSp value is determined to be blank at block the Thesaurus component moves on to the ThesaurusCheck procedure at block . Similar to the SpellingSp procedure the ThesaurusCheck procedure first determines if the ThesaurusSP value is non blank at block . If the ThesaurusSP value is non blank the ThesaurusSP procedure is executed at block . In one embodiment the ThesaurusSP procedure checks the ThesaurusSP value against synonym table that includes a preferred word and various synonyms. When the correct word is found it is substituted for the old value at block . The Thesaurus component then returns to block to determine if any additional fields need to be checked and continues to loop until all the fields have been processed.

Returning to once the Thesaurus component has finished the record or document is passed to the Merge component at block . In order to make the knowledge model a richer source of information than any one underlying data source the knowledge model typically includes more information on a given entity than any single data source . The Merge component is used to update the knowledge model with the new records or documents stored in the database and assimilate the various pieces of information from the various data sources . In one embodiment the Merge component takes a single record or document and uses it to fill a single row in the database . First the Merge component has to determine if the information provided by the record or document complements the existing information or it represents new information. Depending on the comparison the record or document is either inserted into the database as a new row or used to update the contents of an existing row. In one embodiment four tools are used to accomplish these tasks. First the Merge component may include a LookUp component that is used to determine if the record or document can be integrated into the knowledge model and if the record or document is entirely new for example if there is now row in the database that corresponds to this record or document . If a row exists that corresponds to this record or document the Merge component may utilize a Compare component to determine if the existing row in the database includes null values in the fields to be modified by the record or document to be processed. If not a new row may be added to the database . If the row does include null values that information must be updated with the information in the record or document . Depending on the results of these tests an Insert component may be used to add a new row or an Update component may be used to update a row.

Referring now to an exemplary workflow for an embodiment of the Merge component is shown. First the Merge component calls the LookUp component at block which determines if the record or document can be integrated at block . If the record or document cannot be integrated the Merge component returns this information to the integrate tool at block and exits at block . If the record or document can be integrated the LookUp component then determines if the record exists at block . If not the record or document is then passed to the Insert component at block and the Merge component ends at block . If the record does exist the Compare component is called to determine if the record exists with null information at block . If the record does not include null information the record or document is passed to the Insert component at block and the Merge component exits at block . If the record does not include null information the record or document is passed to the Compare component at block and the Merge component exits at block .

Referring now to an exemplary workflow for an embodiment of the LookUp component is shown. First the LookUp component retrieves the StoredProcedure attribute from the XMLDocument object as described above at block . Next the LookUp component retrieves the first field information from the database which need to be checked at block . At block the LookUp component determines if any additional fields need to be processed. If so the LookUp component compiles a dataset of all the values that need to be looked up. To do this the LookUp component retrieves the additional field from the value at blocks and and determines the corresponding table in the database for this field at block . If the value is not found in the database the LookUp component performs a lookup function on the value for the fields at block and determines if the ID for that value is found at block . If the ID is not found the LookUp component checks the record to be re integrated later at block informs the integrate tool that the record could not be integrated at block and exits at block . If the ID is found the LookUp component will return to block and continue compiling the list of fields to look up. Once there are no additional fields to look up the LookUp component determines if the records exist at block and exits at block .

Referring now to an exemplary workflow for the Compare component is shown. First the Compare component retrieves the XMLDocument Compare attribute at block . Next the Compare component compiles a dataset of all the values in the record that need to be compared at blocks and . Once this dataset is compiled the Compare component determines if any values in this dataset are included in the dataset determined by the LookUp component at block . If so those records are returned to the Update component as described above at block and exits at block . If the values are not the same the Compare component then determines if the values are null. If so those records are returned to the Update component as described above at block and exits at block . If the values are not null the Compare component exits at block .

Referring to an exemplary workflow for an Insert component is shown. First the Insert component retrieves the stored procedure name that performs the actual inserts at block . Next the Insert component retrieves the field values and confidence levels from the XMLDocument object as well as the values from the database for the record to be inserted at block . Using this information the Insert component builds a call to the stored procedure to insert the new information at block . Finally the call is executed at block .

Referring now to an exemplary workflow for an Update component is shown. First the Update component retrieves the name of the stored procedure that performs the actual update at block . Next it reads the Update attribute from the XMLDocument object at block . A check is performed to determine if there any more fields in the Update attribute that need to be processed at . If so the Update component retrieves the field value and corresponding confidence level from record or document at blocks and respectively. It then retrieves the confidence level of the current entry in the knowledge model and compares the two confidence values at block . If the confidence value for the new field is greater than the current confidence value the new field is marked to Update meaning that this new value should replace the existing value at block . If the current confidence value is greater than the new confidence value however the current value will not be overwritten. The Update component continues in this manner until all of the update fields have been processed. When there are no additional fields to process the Update component builds the procedure call at block executes the call at block and exits at block .

Returning to once the Merge component has finished processing the records or documents from the message a check is made to determine the result at block . If the process was successful the record or document is removed from the database at block and the integrate tool returns to block to process the next record in the message. Alternatively if the Merge component was unsuccessful the age field for the record is incremented at block and the integrate tool returns to block to process the next record in the message. The concept of age appears as a result of the automatic asynchronous nature of the integration process. For example as described above the merge component can be used to merge entities or relationships. A potential problem could arise if the system attempts to merge a relationship before one of entities of the relationships exists in the knowledge model such as a relationship that defines a relation between entities a and b before entity b exists in the knowledge model . The re integration batch process described above may be used to reintroduce these records or documents at a later time. In one embodiment the records or documents may be deleted if their age reaches a particular level for example 10. Alternatively or in addition to either the integration or re integration process may determine if a record or document covering the same field and from the same data source has been integrated subsequently. If so the integration of the old record or document is no longer necessary and it may be deleted.

Referring now to an exemplary relationship generation tool is shown. As discussed above the relationship generation too may be used to analyze the information in the knowledge model and populate various relationship tables. In the embodiment of the relationship generation tool includes three components. The field to text relationship tool generates the field to text relationships as described above. In one embodiment the field to text relationship tool reads each name field from every entity table. For each name field the field to text relationship tool executes a stored procedure that searches for the given name in various other fields of the entity tables. For example and with reference to the field to text relationship tool may select the name field from person entity table and search for that entry in the title and abstract fields of the literature entity table. If a match is found a field to text relationship may be added to the field to text relationship table. Alternatively or in addition to the field to text relationship tool may retrieve the full text of the article referenced by the literature table even though the article is not necessarily stored in the knowledge model and perform a similar search. It should be apparent to one of ordinary skill in the art that the field to text relationship tool may be configured to select any set of fields from the entity tables and search any other fields in the entity tables. Additionally the field to text relationship tool may be configured to search the text of unstructured data that is not referenced in any entity in the knowledge model.

The relationship generation tool may also be configured to derive relationships by analyzing the data of the knowledge model . These types of relationships are referred to herein as derived relationships. In one embodiment the relationship generation tool may include a transitive relationship tool . The transitive relationship tool determines transitive relationships. As used herein a transitive relationship is defined as any relationship between two entities that is based on at least two separate relationships. As discussed above a direct relationship is a relationship that has been determined from information in a data source . These direct relationships may be stored in a direct relationship table. In one embodiment the transitive relationship tool selects each row in the direct relationship table. For each field referred to in the relationship definition the transitive relationship tool may search every other row in the direct relationship table for a match. If a match is found a new relationship is created to reflect the commonality. For example if a direct relationship is defined between field A and field B the transitive relationship tool may search the other rows of the direct relationship table for a match on field A. If a match is found for example relating field A to field C the transitive relationship tool may create a transitive relationship relating field B to field C. This is an example of a single hop transitive relationship. Preferably the transitive relationship tool uses a search depth algorithm to calculate the transitive relationships across n hops. In one embodiment the transitive relationship may be stored in a transitive relationship table. Alternatively the transitive relationship may be stored in the same table as the direct relationships. In one embodiment the transitive relationship definition includes information detailing each hop from the two related entities.

The relationship generation tool may also include a proximity relationship tool . Similar to the field to text relationship tool the proximity relationship tool searched the text of either fields in the knowledge model or unstructured files such as articles. The proximity relationship tool creates a proximity relationship if two entities appear in the same text. In one embodiment indexes are created for all the text to be searched i.e. specific field values or unstructured data items . The indexes are then used to determine if two entities appear in the same text. Alternatively or in addition to the proximity relationship tool may be configured to generate a proximity relationship if the entities appear within a given proximity of each other in the text for example within n words of each other. Other criteria such as each field appearing at multiple instances within each document each field appearing in the same sentence and the like may also be used to define a proximity relationship. It should be apparent to one of ordinary skill in the art that the determination of a proximity relationship may be dependent on the type of file being examined. For example if a text file is be used a proximity relationship may be generated if the words fields appear within the same paragraph. If however the file being searched is a spreadsheet the proximity relationship tool may generate a proximity relationship if the two fields appear in same cell row or column. In one embodiment the proximity relationship tool stores the proximity relationship definition as well as information detailing the rationale behind the generation of the relationship. For example to define a proximity relationship between two fields the proximity relationship tool may store each field the criteria used to determine the relationship and the article or reference in which the use of the fields met the given criteria.

Referring to an exemplary navigator tool is shown. In the embodiment of the navigator tool is a graphical user interface that allows the user to select a record or item from one of a table of the knowledge model and in response to the selection display a set of related items or records. Preferably and only registered users may access the knowledge model . It should be apparent to one of ordinary skill in the art that other implementations of the navigator tool are contemplated herein. In one embodiment the user may be initially directed to a log in to the navigator tool in order to access the data stored in the knowledge model . To do so the user may enter a valid username and password combination. The user may then submit this information to be validated against a database of user information for example the user information database . Optionally the user may be allowed to select an option to store the username and password information for future log in attempts.

In the embodiment of the navigator tool includes a toolbar and a navigation area . The toolbar may provide access to a variety of functions of the navigator tool via corresponding interface objects such as a navigation functions. The toolbar and various capabilities accessible via the toolbar are described in more detail below in reference to . In one embodiment the navigation area includes nine visually separated panels . Each panel contains information corresponding to an entity of the knowledge model . The information contained in each panel may be referred to as an Item. The Item in the center or active panel may display a single Item. Each of the remaining panels may display zero one or more Items for a particular entity table of the knowledge model that relate to the Item in active panel .

Referring now to a diagram of exemplary components and an exemplary layout for one embodiment of a navigation tool are shown respectively. The Navigator component is the main component that will contain the rest of the components and manage the interface among all the other components of the navigator tool . In one embodiment each Navigator component comprises a ToolTipPanel component one to nine EntityPanel components one or more RelationLine components and an Information Panel component .

The ToolTipPanel component may include summary and supporting attribute information about an Item. In one embodiment ToolTipPanel components are implemented as pop up boxes that appear when a user mouses over an Item. For example a ToolTipPanel component for an Item describing a person might contain their age level within their company hire date email address and the like. In one embodiment the ToolTipPanel component associated with the active Item may be permanently displayed below the Item name.

The EntityPanel component includes information corresponding to an entity of the knowledge model . In the embodiment of each EntityPanel component consists of a TitleBar component and a body component . The TitleBar component may include information about the entity such as an entity name icon for the entity. The Body component may include information about the Items in an entity table. In one embodiment the Body component includes one or more EntityItem components and a DataList component . Each EntityItem component includes information for an item being displayed in the EntityPanel component . Optionally the TitleBar component may include node counter information that shows how many Items from the particular entity table are related to the Item in the active panel as well as which items are currently visible. In one embodiment both the EntityItem components and TitleBar components may be associated with a PopUpMenu components which provide access to various functions associated with the EntityItem components and TitleBar components respectively.

Referring now to an exemplary screen shot of a navigator tool is shown. The navigator tool may include a toolbar and a navigator component . In the embodiment of the navigator component includes the elements described above in regard to . As shown the navigator component includes nine entity components each including a title component and a body component . The title component includes the name of an entity table and where applicable a node counter that displays the total number of items included in the corresponding entity components .

As described above the navigator tool may be implemented as a graphical user interface that allows the user to select a record or item from one of a table of the knowledge model and in response to the selection display a set of related items or records. In the embodiment of the center entity component represents the active or selected node and includes the name of the active node . In one embodiment the name of active node may be truncated. Optionally the navigator tool may be configured to display a pop up window displaying various information about the active item upon a predetermined event such as an activation of the item via a single click double click mouse over and the like. Optionally the same functionality may be provided for the related nodes .

The remaining entity components may be used to display those related items in the knowledge model related to the active node for example by displaying the name of the related item . Optionally indicia of the link type associating each related item to the active node may be included. In the embodiment of a roman numeral indicating the type of link is used to indicate the link type. For example direct or field to field links may be designated by the roman numeral I field to text links by the roman numeral II transitive links by the roman numeral III and proximity links by the roman numeral IV. Other exemplary indicia may include using associated font colors font sizes or any other visual indicator. In one embodiment the navigator tool may query the knowledge model to determine the related items in response to the selection of the active node . Preferably queries are performed via a batch process that determines all related items for each item of the knowledge model. The queries may be saved for example in a database table to vastly improve the performance of the navigator tool .

Each entity component is associated with a particular table of the knowledge model . In one embodiment each entity component displays all the related items for the associated table of the knowledge model . Preferably the user will be allowed to select the type of entity being displayed in any particular entity component by associating that entity component to any table in the knowledge model . In such an embodiment the user may configure the entity components to display the tables of interest to that particular user. Preferably the associations of entity components to knowledge model tables may be stored.

In one embodiment each entity component may be configured to display a set number of item at a given time. In such an embodiment navigation tools such as a scroll bar or navigation arrows may be provided to allow the user to access the entire list of related items . Additionally the entity component may include node count information to inform the user of the additional though not visible items . Preferably the entity component also includes information describing which related items of the set are currently being displayed. For example the entity component may show that items three through nine of eighty six total items are currently being displayed. In such an embodiment a scrollbar or other user interface control may be included to provide access to the items not being displayed.

Optionally the entity component may include tools to manipulate the related items contained therein. In the embodiment of each entity component includes a sort button . The user may activate the sort button to sort the list of related items alphabetically or by confidence level. Other criteria such as date restrictions and the like may also be used to sort the related items . The entity component may also include a filters button which opens the master filters dialog for the corresponding entity described in more detail below in reference to .

As described above each entity component may be associated with an entity type of the knowledge model . In one embodiment the user may change the entity table associated with any entity component that displays related items . As shown in the user may activate a menu that includes a list of all possible entity tables of the knowledge model that may be associated with the particular entity component . This menu may be activated for example by selecting the appropriate triangle icon on the title component . Other methods of changing the associations between an entity components and entity tables of the knowledge model are contemplated herein.

In one embodiment the activation of a particular related item may cause additional information about that item and its relationship to the active item to be displayed. As shown in the selection of a related item may cause a ToolTipPanel component to be displayed that shows summary information for the related item .

Additionally or alternatively a relationship line between the related item and the active item may also be displayed upon activation of the related item . In the embodiment of the color and style of the relationship line indicates the type of relationship between the two items. For example a continuous green line may indicate a field to field link a dashed blue line may indicate a field to text link a dashed and dotted yellow line may indicate a transitive relationship and a dotted red line may indicate a proximity relationship. It should be readily apparent to one of ordinary skill in the art that the relationship type may be indicated using color style size and the like or any combination therein.

As shown in the user may select any of the related items to make that item the active node . In response the navigator tool may update the display accordingly. In one embodiment the navigator tool may submit a new query or retrieve saved queries from the knowledge model and display the related items to the new active item . Alternatively or in addition to the user may drag and drop a related item into the center entity panel to make that item the active item .

As shown in the user may access a variety of item related options via a pop up menu for example by right clicking on an item. In one embodiment the pop up menu provides access to functions create a bookmark to an item make an item the home item email a link to an item monitor an item and show link evidence for a related item . A bookmark is a link to a particular item. Bookmarks are stored in a list of bookmarks accessible via the bookmark button of the navigator toolbar described in more detail below. The home item is a special bookmark that can be loaded into the navigator tool by pressing the home button of the navigator toolbar . Items may be emailed to an individual by selecting the email link option. In one embodiment selecting the email link option launches the default mail program creates a new e mail with a system generated introduction and places the link to the item into the new e mail message. Additionally the user may select an item to monitor via the pop up menu. As described in more detail below the system may monitor items and notify the user of updates and or changes to the items. When a user denotes an item to monitor a date stamp may be created and saved with item information to be used by the system for monitoring.

Finally the user may wish to see information on why a particular related item is considered related to the active node . To do so the user may select the show link evidence option from the pop up menu . Depending on the type of link establishing a connection between the active node and the related node different link information may be shown. For example link information for field to field links may include the data source from which the link was extracted. Link information for field to text links may include a short part or clip of the literature text that surrounds the keyword. In one embodiment the clip length should user configurable. Preferably the clip length may be initially set to be N words total such that N 1 2 words preceding the item keyword and N 1 12 words following the item keyword are included. For example if the clip is set to 31 words the clip may include the 15 words preceding and following the item keyword. For transitive links the link information may include each field to field link information for each hop included in the link. Finally link information for proximity links may include the title of the article which mentions both items as well as a clip for showing each item in context.

As described above the navigator tool may include a navigation toolbar . One embodiment of the navigation toolbar is shown in . The navigation toolbar may contain icons and controls which enable the user to access and configure the various services of the navigator tool . In one embodiment the navigation toolbar may include a back button a forward button a stop button a refresh button a home button a history button a signoff button a help button an about button a search button a wizards button a bookmarks button a monitored items button a filters button a source filters drop down list a confidence level tool a context drop down list and an options button . It should be apparent to one of ordinary skill in the art that the various user interface components may be used provide access to the functions described below.

The navigation tool provides basic navigational functions via the navigation buttons. For example the back button and forward button may be provided to allow the user to step through their recent navigation history backwards and forwardly respectively. Activating the stop button may cancel the submission of a query to the knowledge model . In one embodiment a command is issued to the knowledge model to abort query processing. Preferably all current client and server processing activity is stopped. Activating the refresh button may allow the user to manually refresh their current view for example by resending a query to the knowledge model and update the display of related item based on the new results. A home button may be provided that takes the user to their home view i.e. home item . The home view is a set node. The home view may be user customizable.

A history dialog button may also be provided to launch a history dialog window. One embodiment of a history dialogue window is shown in . The dialog window may show the user s recent navigation history such as a list of navigation events . In one embodiment both the node name and entity name are displayed. The user may be able to highlight a navigation event and click a show button to refocus the navigator on that item by making that item the active node . Alternatively or in addition to the user may be able to double click on a history item and refocus the navigator on that item. The user may close the history dialogue window by selecting the close button . In one embodiment the navigator tool may save a set number of history events. This number may be user configurable. Preferably the history events may be stored in the user information database to make the history events session independent and persistent.

Upon selection of the signoff button the user may be logged out of the navigator tool . Upon selection of the help button the user may be provided access to a help system as known in the art. In one embodiment selection of the help button may cause an html based help system to be launched in a separate window. A window containing information about the knowledge discovery tool IOU or navigator tool may be opened upon selection of the about button . This information may include version information such as a revision number intellectual property information such as copyright patent and or licensing information and the like.

The options button may launch the master options dialog. One embodiment of the master options dialog is shown in . In the embodiment of the master preferences dialog includes a startup view preference a navigation history preference a related items limit preference an animations preference a reset button an ok button and a cancel button .

The startup view preference allows the user to select what they want to see upon starting the navigator tool . In one embodiment three options are provided search last item visited and home item. If the search option is selected the navigator tools opens with a search dialog discussed below in more detail. If the last item visited option is selected the navigator tool opens with the active node from when the navigator was last closed. In one embodiment all filter confidence and entity component association settings may also be preserved. Filter and confidence settings are described in more detail below. Finally if the home item option is selected the navigator tool will open with the home item as the active node . Preferably the home item startup option is the default option and the home view is set to a standard node.

The navigation history preference defines the number of navigation events stored for the navigation session. In one embodiment the default value is set to 10. Alternatively or in addition to the navigation history preference may have a maximum value for example 30 events. Preferably the navigation history preference is implemented as a drop down box.

The related items limit preference controls the number of records which can be returned to each entity panel in the navigator tool from a query. In one embodiment a default value is selected to optimally balance performance and quality of the results returned.

The animations preference may allow the user to enable or disable animation rendering effects in the user interface. Preferably the animations preference is implemented as a checkbox and is selected by default. An ok button may be provided to accept the currently selected preferences and a cancel button may be provided to close the dialog without changing preferences.

Referring again to the search button may launch a search tool that allows the user to perform a keyword search of the knowledge model . The search dialog may include the appropriate user interface tools to allow the user to specify a search term s for querying the knowledge model . One embodiment of a search tool is shown in . To perform a search a user may enter one or more keywords of interest in the search term field . The search will perform a literal search for the entered search terms. In one embodiment a character acts as a wildcard identifier and denotes multiple characters. For example a search for the keyword ind may cause the knowledge model to search for all terms starting with the text ind. The user may also be able to select the type of information they are looking for by checking an entity type from those listed in the menu of checkboxes below the search field . For example one may restrict the results of a search to diseases genes or literature by selecting the appropriate items in the menu. In one embodiment the user may further refine a search target by selecting Internal External or Both under the literature entity. Preferably the navigator tool searches against all entities by default.

To begin a search the user may click the find button . In response the system performs a free text search against the information stored in the knowledge model . When the search is complete the results are shown in the Search Results field . In one embodiment the search results include a description of the item and the entity table to which it belongs. The user may also be able to view more detailed information in the description field by selecting the item from the list. In one embodiment the selection of an item is made via a single click on any of the search results. The results may be sorted by name or by type by clicking on the header of the appropriate fields and . The user may be able to view the source of a particular search result by clicking the View Web Page button . The Show button shows the selected item in the navigation window making it the active node . Alternatively or in addition to the user may double click a particular search result to make that item the active item . The Close button will close the search dialog box.

Referring again to a bookmarks button may also be provided on the navigator toolbar . As described above bookmaking an item allows the user to save links to previously viewed items to enable their quick retrieval later. Clicking the Bookmark button may cause a list of saved bookmarks to be displayed. An exemplary screen shot of the navigator tool with a bookmark list is shown in . As shown the bookmark list includes a list of bookmarks . Selection of a bookmark may cause the item that is bookmarked to become the active item of the navigator tool . In one embodiment bookmarks include a name. When a bookmark is created the bookmark may have the same name as the item that is being bookmarked. Optionally the user may rename the bookmark for example by clicking the right mouse button over the bookmark and selecting Rename from a popup menu and typing the new name. Bookmarks may also be deleted from the list for example by clicking the right mouse button over the bookmark and selecting Delete from a popup menu.

Optionally bookmarks may be organized into folders much like computer files or internet bookmarks are managed. In one embodiment the user may create a folder by clicking the right mouse button over the folder under which you want to create your new folder and selecting a Create folder option from a popup menu. Folders may also be renamed using a similar procedure as renaming bookmarks described above. A folder may also be deleted in a similar manner. Once a folder has been created the user may organize bookmarks by dragging the bookmark i.e. hold the left mouse button over the bookmark and move your mouse to the folder. Folders may also be hierarchically arranged in a similar manner. In one embodiment clicking a folder will alternatively show or hide the contents of that folder.

Optionally bookmarks may be shared among users. In one embodiment the system may notify users of a common interest in particular item if one or more colleagues have the same bookmark by creating a special bookmark that is added to each users list . Selection of this special bookmark may open a shared bookmarks tool. One embodiment of a shared bookmarks tool is shown in . The shared bookmark tool includes information about the subject item such as an item name as well as information about each user sharing the interest. In one embodiment each users first name last name and email address are displayed. It should be apparent to one of ordinary skill in the art that other information may be displayed. Optionally the user may elect not to share a bookmark with colleagues. Alternatively or in addition to users may be notified of common bookmarks by other methods such as via email instant messages pop up windows and the like.

Referring again to a wizards button may be provided to allow the user to launch a wizard service. In one embodiment the wizard service may guide the user through a series of screens to formulate a search. For example the wizard service may assist with the process of identifying existing assets that have indication in a specified area. An exemplary area may be a particular disease. Exemplary assets may be compounds into which research efforts have been invested. For a knowledge model for pharmaceutical research the wizard may take user selected diseases and targets as inputs allow the user to also specify genes proteins or pathways and then and return a list of possibly relevant projects literature and compounds as related by the knowledge model .

Exemplary screen shots of a wizard service are shown in . In one embodiment there are three stages to the workflow of the wizard service. As shown in the user may initially choose to create a new search or load a previously saved search . Saved searches may be retrieved via a drop down list . Next the user may define the scope of the analysis. For example diseases experts and target class representatives identify their initial area of interest such as a disease or a target or both through the use of the wizard as shown in . Depending on their selection the wizard service will guide the user through a series of screens to further define the scope of the search.

Next matching terms are searched and allow user to select one or more matching terms to augment or refine search parameters. An exemplary process for determining additional keywords for diseases is shown in . Based on the input keyword the wizard service may assist the user to enhance the list of terms by providing them with a list of diseases including the keyword as shown in . Additionally the user may choose to include known related diseases such as parent and or child diseases as shown in . If the user so chooses a list of known related diseases may be displayed. The may choose to include any or all of the related diseases in the search. Similarly the user may select targets by entering a target keyword and selecting targets that include the keyword as shown in . Once the user has defined the diseases and or targets to include in the search the user may be be provided with a list of current diseases and or targets and prompted to validate the selections as shown in . At this point the user may edit the search parameters associated with each of the diseases and or targets .

Next the user may choose to augment the search to include additional keywords from topics such as genes proteins and pathways as shown in . In each case the user may be presented with a list of additional keywords and have the ability to select any keywords from the list to include them in the search. As shown in the user may be presented with a list of genes related to the selected diseases and or targets. The user may then select any of the genes to add them in the search. Optionally the user may also provide keywords to search for additional genes including the keyword . Genes including the keyword may be displayed in the corresponding field and the user may select any gene from the list to include it in the search. Additionally or alternatively the user may also be able to directly add a known gene to the scope of a search by manually entering the gene into the appropriate field . Similar processes may be included for adding protein and pathway related keywords to the search as shown in .

The result of this first stage is a collection of keywords that are related by the knowledge model . The result of this first stage is a collection of keywords that are related by the knowledge model . At this point the user may be prompted to validate the scope of the search as shown in . A list of all keywords may be displayed. In one embodiment the user may then choose to go back to any of the previous steps and further refine the scope of the search. The user also have the option to save the query at this point. In one embodiment the user may save the query by entering a query name.

Once all the terms have been finalized the wizard submits the query and collates the results. In one embodiment these keywords may be searched against project and literature databases for example by submitting search strings to the database search indices to find for example projects and literature that match the list of relevant terms. The wizard service may return a set of projects literature that match the set of query terms. Preferably the query terms may be ranked and organized by the number of relevant search terms that were found in each search result. Thus a results list of pointers to projects and literature that mention the keyword combinations within the analysis scope may be created.

Finally the user reviews the results identified to review potentially applicable projects and literature and compounds as shown in . In one embodiment selecting an item on the results lists and causes that item to become the active node .. When an item of the results list is selected that item takes central focus in navigator tool allowing the user to rapidly build an understanding of the item selected and to explore the knowledge model around the project asset to add context and explore related literature and topics.

Referring again to a monitored items button may be provided to launch a monitored items dialog that allows the user to select to be notified when new relationships or literature are discovered for a particular item. An exemplary monitored items dialog is shown in . The monitored items dialog includes a last publication date which represents the most recent date on which new information was integrated into the knowledge model . The dialog also includes a list of all monitored items that have changed since the items associated monitoring date and the last publication date .

Referring again to a filters button may be provided to launch a filters dialog that allow the user to establish filter settings that filter the related items being displayed in an entity component . In general filters are a mechanism for focusing the results displayed in the navigator tool . Preferably the filters are implemented as client side applications. It should be apparent to one of ordinary skill in the art that the number of filters available for an entity component may vary based on the data stored in the associated knowledge model table. Preferably several types of filters are accessible directly from the Navigator panels. The entity component should display a filter icon if one or more filters exist for that pane. Clicking on the filter icon may also launch the filters dialog.

An exemplary filters dialog is shown in . The filters dialog may include several tabbed filter options pages in which the user may specify various filtering options such as general filter options entity filtering options journal filtering options publication filtering options and the like. In one embodiment general filtering options include filter persistence and internal external filtering . If the user selects persistent filtering the navigator tool will filter the results of each navigation event. Otherwise the navigator tool will only filter the current navigation event. Toggling the internal external filtering option allows the user to limit results to data source that are internal or external to their enterprise.

The user may also be able to filter displayed literature items to those items found in particular journals. An exemplary screen shot of a journal filter options page is shown in . The user may specify a list of displayable journals in a similar manner to the organism and phenotype lists described above. Additionally the user may specify a threshold journal impact level via the corresponding controls . In one embodiment the journal impact level corresponds to an ISI journal impact ranking. Finally the user may also be able to filter items based on their publication date as shown in . In one embodiment the user may limit the results to items published within a set amount of time or to those items published before a certain date .

Referring again to an internal external filter button may be provided to allow the user to select related items based on the source from which they were obtained as describe above. A confidence box may also be provided to allow the user to filter the items displayed in all entity components based on confidence values. These filters are referred to as confidence filters. In one embodiment the confidence box is implemented a button associated with each confidence value may be provided to allow the user to display hide links of the corresponding confidence value. Alternatively the confidence button may be implemented as a list of confidence values wherein the navigator tool only displays those items meeting the selected threshold confidence value. In yet another embodiment the confidence button may be implemented as a text box that establishes a threshold confidence value and only those related items meeting the threshold value may be displayed. The threshold confidence value may be indicative of the relationship type as described above. For example a threshold value of one may correspond to a direct relationship.

A context drop down list may be included to provide the user with a list of previously saved or system provided stored sets of context. A context represents a set of navigator tool settings. In one embodiment a context includes filter settings confidence filter settings and panel layouts. Alternatively or in addition to the context drop down list may also provide access to personal and group default preferences sets associated with login information. Upon selection of a context set the navigator tool will update the current display to reflect the newly selected context. Alternate context sets containing various sets of information should be readily apparent to one of ordinary skill in the art. For example master context information may also be stored in a context set. The context drop down list may display a list of stored preference sets by name. In one embodiment a user may save a new context by selecting a save new option from the context drop down list .

It is therefore intended that the foregoing detailed description be regarded as illustrative rather than limiting and that it be understood that it is the following claims including all equivalents that are intended to define the spirit and scope of this invention.

