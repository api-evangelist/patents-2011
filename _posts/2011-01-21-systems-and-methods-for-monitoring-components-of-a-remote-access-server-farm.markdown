---

title: Systems and methods for monitoring components of a remote access server farm
abstract: The present application is related methods to monitor a state of one or more components of a remote access server farm by an intermediary to distinguish between operating and functional components and improve farm availability for user application requests. The intermediary may be deployed between a client and the remote access server farm and forwards client requests to functional components of the remote access server farm.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832260&OS=08832260&RS=08832260
owner: Citrix Systems, Inc.
number: 08832260
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20110121
---
This application is a continuation of and claims priority to U.S. Non provisional application Ser. No. 12 236 016 entitled Systems and Methods for Monitoring Components of a Remote Access Server Farm and filed on Sep. 23 2008 Now U.S. Pat. No. 7 886 050 which claims the benefit of and priority to the U.S. Provisional Application No. 60 977 996 entitled Systems and Methods for Monitoring Components of a Remote Access Server Farm and filed Oct. 5 2007 both of which are incorporated by reference in their entirety.

The present application generally relates to data communication networks. In particular the present application relates to systems and methods for monitoring the operational and functional state of components of a remote access server farm.

Users may access one or more applications via a remote access server farm. For example a corporate network may include one or more data centers each with a remote access server farm. The remote access server farm may include multiple access or infrastructure components for managing access to the server farm. The corporate entity may deploy these components via one or more servers. As such the user may access these applications via one or more servers deploying multiple components to gain access to the server farm of the data center. To complicate matters these components servers and server farms may be located in different locations and managed by different internal and external personnel.

Any one of these multiple components may have an error. In some cases these errors may not be trapped or otherwise readily apparent to any of the administration personnel. For example a component may be running or executing or a server but providing invalid responses. These types of untrapped errors may be challenging for the administration personnel to find. Furthermore to resolve these errors the administration personnel may need to coordinate multiple other personnel to diagnose and repair the condition. With any of these components having an error the user s access to the remote access server farm may be hindered or performance degraded.

The present solution is directed towards monitoring and determining a state of one or more components of a remote access server farm by an intermediary to distinguish between operating and functional components and improve farm availability for user application requests. The intermediary may be deployed between a client and the remote access server farm and forwards client requests to functional components of the remote access server farm. For example one or more appliances may be deployed between a client and a Web Interface broker to a Citrix Presentation Server farm and between the Web Interface Broker and XML interface service to the Citrix Presentation Server Farm. The appliances may monitor these components of the server farm to determine whether or not the Web Interface and XML Interfaces services are operation and functional. These services may be considered functional based on responses from the services having certain expected content that indicate the service is functioning. The appliance may determine a component is not functional based on the monitored response and remove the non functional component from consideration in traffic management decisions. In this manner the appliance avoids forwarding requests to non functional components of the remote access server farm.

In one aspect the present invention is related to a method to monitor a state of one or more components of a remote access server farm by an intermediary to distinguish between operating and functional components and improve farm availability for user application requests. The intermediary may be deployed between a client and the remote access server farm and forwards client requests to functional components of the remote access server farm. The method includes transmitting by one or more monitoring agents of the intermediary a request for availability of a predetermined application to each of a plurality of interface services providing an enumerated list of published applications available via a server in the remote access server farm. A monitoring agent of the one or more monitoring agents receives a first response to the request from a first interface service. The first response includes a host identifier of a server of the remote access server farm available for providing the predetermined application. From the first response the intermediary identifies the first interface service as operational and functional. A monitoring agent of the intermediary receives a second response to the request from a second interface service. The second response does not identify a host of the remote access server farm for providing the predetermined application. In response to the second response the intermediary determines the second interface service is operational and not functional. The interface service may include an XML service providing the enumerated list of published applications available from a presentation server farm.

In some embodiments the method includes not receiving by the intermediary the second response from the second interface service and determining the second interface service is not operational. In another embodiment the intermediary excluded operations and not functional interface servers in a load balancing rotation of interface services. In other embodiments the intermediary includes operational and functional interface services in a load balancing rotation of interface services. In one embodiment the monitoring agent receives the first response providing the host identifier of the least loaded server in the remote access server farm.

In another embodiment the intermediary receives a request from a client for an enumerated list of published applications available from the remote access server farm and determines to distribute the client request to a functional and operational interface service of the plurality of interface services. In some embodiments the intermediary receives a third response from the second interface service. The third response includes the host identifier of the server from the remote host server farm for providing the predetermined application. The intermediary determines from the third response that the second interface service is operational and functional. In some embodiments the monitoring agents further transmit the request to include an indication to not adjust a load of a server in the remote access server farmer based on the request.

In one embodiment the intermediary determines from the first response a host cache on the server providing the first interface service is valid. The intermediary may also determine from the first response one of a service or a dynamic store of a zone data collector of the remote access server farm is one of functional or valid. In another embodiment the intermediary determines from the first response a presentation server of the remote access server farm is available with the requested application.

In another aspect the present invention is related to a method to monitor a state of one or more components of a remote access server farm by an intermediary to distinguish between operating and functional components and improve farm availability for user application requests. The intermediary may be deployed between a client and the remote access server farm and forwarding client requests to functional components of the remote access server farm. The method includes transmitting by one or more monitoring agents of the intermediary a predetermined default web interface page to each of a plurality of web interfaces providing a browser based depiction of the remote access server farm. A monitoring agent of the one or more monitoring agents receives a first response to the request from a first web interface. The first response includes a header identifying a setting of a cookie. The intermediary identifies from the first response the first web interface as operational and functional. The intermediary via received a second response to the request from a second web interface. The second response does not include the header identifying the setting of the cookie. The intermediary determines from the second response the second web interface is operational and not functional. The intermediary transmits a request from the client to an operational and functional web interface of the plurality of web interfaces.

In some embodiments the intermediary does not receive the second response from the second web service and determining the second web service is not operational. In one embodiment the intermediary excludes operational but not functional web interfaces in a load balancing rotation of web interface services. In another embodiment the intermediary includes operational and functional web interfaces in a load balancing rotation.

In other embodiments the intermediary receives a third response from the second web interface. The third response includes the header identifying the setting of the cookie. The intermediary determines from the third response the second web interface is operational and functional. In various embodiments the first web interface or the second web interface transmits a request to an interface service for an enumerated list of published applications available from the remote access server farm. In one embodiment a second intermediary receives the request for the interface service and distributes the request to one of a plurality of interface services identified by the second intermediary as functional and operational. The intermediary via one or more monitoring agents may monitor responses to the request from the plurality of web services to determine the responses comprises a predetermined response code indicating the web service is functional. In some embodiments the intermediary determines the responses include a predetermined response string indicating the web service is functional.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments of the present invention below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm 

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer or application layer request data. In one embodiment although the network layer or layer of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers . In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers . Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol. The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

The client node A may be any type and form of computer or computing device e.g. 286 386 486 Pentium 5 Pentium II Macintosh computer Windows based terminal Network Computer wireless device information appliance RISC Power PC X device workstation mini computer main frame computer or other computing device that has a windows based desktop and sufficient persistent storage for executing application programs downloaded from the application servers A B and N across the network . Windows oriented platforms supported by the client node A may include Windows 3.x Windows 95 Windows 98 Windows NT 3.51 Windows NT 4.0 Windows CE Macintosh Java and UNIX. The client node A may include a display screen a keyboard memory for storing downloaded application programs a processor and a mouse. The memory may provide persistent or volatile storage. The processor may execute the application programs locally on the client node A and display a resulting windows based desktop on the display screen. Such local processing on the client node A is according to the above described client based computing model.

In other embodiments the client node may be any terminal windows or non windows based or thin client device operating according to a server based computing model. In a server based computing model the execution of application programs occurs entirely on the application servers A B and N and the user interface keystrokes and mouse movements are transmitted over the network to the client node N. The user interface may be text driven e.g. DOS or graphically driven e.g. Windows . Platforms that can be supported by the client node include DOS and Windows CE for windows based terminals.

The application servers A B and N may be any computing device that controls access to portions of the network e.g. workstations printers . It is to be understood that more or fewer application servers may be connected to the network . The servers A B and N may operate according to either a client based computing model or a server based computing model.

Each application server A B and N hosts one or more application programs that are accessed by the client nodes A and N. Applications made available to client nodes for use are referred to as published applications. Examples of such applications include word processing programs such as MICROSOFT WORD and spreadsheet programs such as MICROSOFT EXCEL both manufactured by Microsoft Corporation of Redmond Wash. financial reporting programs customer registration programs programs providing technical support information customer database applications or application set managers.

The servers A B and N may belong to the same domain or the same server farm . In the network a domain is a sub network comprising a group of application servers and client nodes under control of one security database. A domain may include one or more server farms. A server farm is a group of servers that are linked together to act as a single server system to provide centralized administration. Conversely a server farm may include one or more domains. For servers of two different domains to belong to the same server farm a trust relationship may need to exist between the domains. A trust relationship is an association between the different domains that allows a user to access the resources associated with each domain with just one log on authentication.

In one embodiment the application server is in a different domain than the domain . In another embodiment the application server is in the same domain as servers A B and N. For either embodiment application servers A B and N may belong to one server farm while the server belongs to another server farm or all of the application servers A B and N may belong to the same server farm. When a new server is connected to the network the new server joins either an existing server farm or starts a new server farm.

The network may include a master server node for performing load level balancing among the application servers A B and N. The master server node can be one of the application servers A B or N. The master server node includes a list of server addresses and load information corresponding to each of the other application servers. The master server node may direct the client node to a particular server node on which to execute an application based on the list of available servers and corresponding load levels. In other embodiments the application servers A B and N may collaborate among themselves in a peer to peer fashion in order to exchange administration information such as load levels allowing any server A B or N to respond to a request made by a client node .

The user of either client node A and N is able to learn of the availability of application programs hosted by the application servers A B and N such as published applications in the network without requiring the user to know where to find such applications or to enter technical information necessary to link to such applications. These available application programs comprise the program neighborhood of the user. A system for determining a program neighborhood for a client node includes an application program hereafter referred to as the Program Neighborhood application memory for storing components of the application program and a processor for executing the application program.

The Program Neighborhood application may be installed in memory of the client node A and or on the application servers A B and N as described below. The Program Neighborhood application is a collection of one or more services applications program interfaces APIs and user interface UI programs that disclose to users of the client nodes A N those application programs hosted by the application servers that each client node is authorized to use e.g. execute .

An application server operating according to the Program Neighborhood application collects application related information from each of the application servers in a server farm. The application related information for each hosted application may be a variety of information including for example an address of the server hosting that application the application name the users or groups of users who are authorized to use that application and the minimum capabilities required of the client node before establishing a connection to run the application. For example the application may stream video data and therefore a required minimum capability is that the client node supports video data. Other examples are that the client node can support audio data or can process encrypted data. The application related information may be stored in a database as described later in the specification.

When a client node logs onto the network the user of the client node provides user credentials. User credentials typically include the username of the client node the password of the user and the domain name for which the user is authorized. The user credentials may be obtained from smart cards time based tokens social security numbers user passwords personal identification PIN numbers digital certificates based on symmetric key or elliptic curve cryptography biometric characteristics of the user or any other means by which the identification of the user of the client node can be obtained and submitted for authentication. The server responding to the client node can authenticate the user based on the user credentials. The user credentials can be stored wherever the Program Neighborhood application is executing. When the client node A executes Program Neighborhood application the user credentials may be stored at the client node A. When an application server is executing the Program Neighborhood the user credentials may be stored at that server. From the user credentials and the application related information the server may determine which application programs hosted by the application servers are available for use by the user of the client node. The server transmits information representing the available application programs to the client node. This process eliminates the need for a user of the client node to set up application connections. Also an administrator of the server can control access to applications among the various client node users.

The user authentication performed by the server may suffice to authorize the use of each hosted application program presented to the client node although such applications may reside at another server. Accordingly when the client node launches i.e. initiates execution of one of the hosted applications additional input of user credentials by the user may be unnecessary to authenticate use of that application. Thus a single entry of the user credentials may serve to determine the available applications and to authorize the launching of such applications without an additional manual log on authentication process by the client user.

Either a client node A N or an application server may launch the Program Neighborhood application. The results are displayed on the display screen of the client node A N. In a graphical windows based implementation the results may be displayed in a Program Neighborhood graphical window and each authorized application program may be represented by a graphical icon in that window. One embodiment of the Program Neighborhood application filters out application programs that the client node A N is unauthorized to use and displays only authorized i.e. available programs. In other embodiments the Program Neighborhood application displays authorized and unauthorized applications. When unauthorized are not filtered from the display a notice may be provided indicating that such applications are unavailable. In other embodiments the Program Neighborhood application may report all applications hosted by the application servers A B and N to the user of a client node without identifying which applications the client node A N is authorized or unauthorized to execute. Authorization may be subsequently determined when the client node A N attempts to run one of those applications.

The client node N via the web browser transmits a request to access a Uniform Resource Locator URL address corresponding to an HTML page residing on server N. In some embodiments the first HTML page returned to the client node N by the server N is an authentication page that seeks to identify the client node N. The authentication page allows the client node N to transmit user credentials via the web browser to the server N for authentication. Transmitted user credentials are verified either by the server N or by another server in the farm. This allows a security domain to be projected onto the server N. For example if the server N runs the WINDOWS NT operating system manufactured by Microsoft Corporation of Redmond Wash. and the authenticating server runs the UNIX operating system the UNIX security domain may be said to have been projected onto the server N. User credentials may be transmitted in the clear or they may be encrypted. For example user credentials may be transmitted via a Secure Socket Layer SSL connection which encrypts data using the RC3 algorithm manufactured by RSA Data Security Inc. of San Mateo Calif.

The server N may verify the user credentials received from the client node N. Alternatively the server N may pass the user credentials to another server for authentication. In this embodiment the authenticating server may be in a different domain from the server N. Authenticated user credentials of the client node N may be stored at the client node N in a per session cookie in fields that are not displayed by the web browser or in any other manner common in maintenance of web pages. In some embodiments a server farm with which the server N is associated may allow guest users i.e. users that do not have assigned user credentials to access applications hosted by servers in the farm. In these embodiments the authentication page may provide a mechanism for allowing a client node N to identify that it is a guest user such as a button or menu selection. In other of these embodiments the server N may omit the authentication page entirely.

Still referring to once the client node N is authenticated by the server N the server prepares and transmits to the client node N an HTML page that includes a Program Neighborhood window in which appears graphical icons representing application programs to which the client node N has access. A user of client node N invokes execution of an application represented by icon by clicking that icon .

In this embodiment the Program Neighborhood application runs on the client node A. The client node display has a Program Neighborhood window in which appears a graphical icon representing a second application program. A user of the client node A may launch the second application program by double clicking the icon with the mouse. The request passes to the master server node A via a connection . The master server node A indicates to the client node A via the connection that the sought after application is available on server N. The client node A signals the server N to establish a second connection . The server N requests the user credentials from the client node A to authenticate access to the second application program. Upon a successful authentication the client node A and server N establish the second connection and exchange information regarding the execution of the second application program. Accordingly the client node A and the server N communicate with each other over multiple connections.

The master server node A indicates arrow to the server C that the sought after application is available on server B. The server C contacts the server B to establish a connection . To authenticate access to the application the server B obtains the user credentials of the client node N from the server C. The server C and server B establish the connection arrow by which the server C requests execution of the second application and the server B returns the graphical user interface results to the server C. The server C forwards the graphical user interface results to the client node A where the results are displayed. Accordingly the information exchanged between the client node A and the server B passes through the server C. Similarly the client node A may launch the third application program by double clicking the icon . The request to launch the third application program passes to the server C. The server C forwards the request to the master server node A which considers load balancing and application program availability to determine which server can handle the request. In this example the master server node indicates that server N may run the third application program.

The server C and server N establish a connection arrow by which the server C requests execution of the third application program and the server N returns the graphical user interface results to the server C. To permit execution of the third application program the server N may authenticate the user credentials of the client node N which are obtained from the server C. The server C forwards the graphical user interface results to the client node N where the results are displayed. Accordingly the results of executing the third application program pass between the client node N and the server N through the server C.

From this illustration it should be understood that client node N may run multiple application programs through one connection with the server C while the server C maintains multiple connections in this example one connection with server B and a second connection with server N . Also the server C merges the information received from the server B with the information received from the server N into one data stream for transmission to the client node A.

In this embodiment the Program Neighborhood application runs on the server B. The client node display has a Program Neighborhood window in which appears a graphical icon representing a second application program. A user of the client node may launch the second application program by double clicking the icon . The request to launch the second application program passes to the server B. The server B responds i.e. calls back to the client node by returning application related information such as the name of the application and capabilities needed by the client node for the second application to run.

With the information provided by the server B the client node then communicates with the master server node A via connection to determine the server for executing the second application program. In this example that server is server N. The client node then establishes a connection to the server N. Server N requests the user credentials from the client node to authenticate the user of the client node . The second application program executes on the server N and the server N returns the graphical user interface to the client node via the established connection . Accordingly the client node may have multiple active connections between the multiple servers.

In one embodiment the template is constructed dynamically using for example COLD FUSION manufactured by Allaire Corp. of Cambridge Mass. or ACTIVE SERVER PAGES manufactured by Microsoft Corporation of Redmond Wash. In other embodiments the template may be static. The Program neighborhood application parses the template replacing Program Neighborhood specific tags as noted above. Tags that are not Program Neighborhood specific are left in the file to be parsed by the browser program executing on the client .

In one embodiment a template parser object is provided that accepts an HTML template as input interprets Program Neighborhood specific tags present in the template and output the original template with all Program Neighborhood tags replaced with appropriate text. The template parser object may be passed a cookie a URL query string or a control field from a web server interface to provide the information with which Program Neighborhood specific tags should be replaced.

In another embodiment the Program Neighborhood application allows scripts to access to information via an application programming interface. Scripts may be written in for example VBScript or Jscript. In this embodiment the scripting language is used to dynamically generate an output display using information returned by the application in response to queries posed by the script. Once the output display is generated it is transmitted to client node for display by the browser program .

A user of the client node can launch an application by double clicking with a mouse an icon displayed in the Program Neighborhood web page. In some embodiments each icon is an encoded URL that specifies the location of the application i.e. on which servers it is hosted or alternatively the address of a master server a launch command associated with the application and a template identifying how the output of the application should be displayed i.e. in a window embedded in the browser or in a separate window . In some embodiments the URL includes a file or a reference to a file that contains the information necessary for the client to create a connection to the server hosting the application. This file may be created by the Program Neighborhood application dynamically. The client node establishes a connection arrow with the server identified as hosting the requested application in this example server N and exchanges information regarding execution of the desired application. In some embodiments the connection is made using the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Fort Lauderdale Fla. Thus the client node may display application output in a window separate from the web browser or it may embed application output within the web browser. illustrates an example arrangement of program components for a client based implementation of the Program Neighborhood application. A client based implementation of Program Neighborhood application may be used in a network using either the server based computing model in which the servers execute the Program

Neighborhood application or the client based computing model in which the client node A executes the Program Neighborhood application locally. The Program Neighborhood application includes a Program Neighborhood Service PNSVC component an Application Database component a Program Neighborhood Application Program Interface PNAPI component a Program Neighborhood User Interface component and a local cache . The application server A for example includes the service component PNSVC and the application database . The client node A which is a representative example of a client node that may support a client based implementation of the Program Neighborhood application includes the application program interface PNAPI the user interface component and the local cache components. The PNAPI communicates with the user interface component and the local cache . The PNSVC communicates with the application database and with the PNAPI on the client node A via communications link .

The communications link may be established by for example using the ICA protocol. ICA is a general purpose presentation services protocol designed to run over industry standard network protocols such as TCP IP IPX SPX NetBEUI using industry standard transport protocols such as ISDN frame relay and asynchronous transfer mode ATM . The ICA protocol provides for virtual channels which are session oriented transmission connections that may be used by application layer code to issue commands for exchanging data. The virtual channel commands are designed to be closely integrated with the functions of client nodes. One type of virtual channel connection supported by the ICA protocol is a Program Neighborhood virtual channel. The Program Neighborhood virtual channel protocol may include four groups of commands 

The application database is a cache of the authorized user and group information for all the public i.e. published applications in a server farm or in a group of trusted domains. Each server in a server farm may maintain its own application related information in persistent storage and build up the database in volatile storage. In another embodiment all collected application related information in the database are stored in persistent storage and made accessible to each other server in the server farm.

The database may be implemented in a proprietary format e.g. as a linked list in memory or using Novell s Directory Services NDS or any directory service adhering to the X.500 standard defined by the International Telecommunication Union ITU for distributed electronic directories. The application database includes a list of application servers. Each server in the list has an associated set of applications. Associated with each application is application related information that can include the application name a list of servers and client users that are authorized to use that application. An overly simplified example of the application related information maintained in the database is illustrated by the following

Table 2 shows a list of servers A B N the applications hosted by the servers Spreadsheet Customer Database Word Processor and Calculator and those users who are authorized to use the applications. For example server A hosts the Spreadsheet program the Customer Database and the Word Processor. User A is authorized to use the Spreadsheet User B is authorized to use the Customer Database and no users are authorized to use the Word Processor. It is to be understood that other techniques can be used to indicate who is authorized to use a particular application. For example the user information stored in the database can be used to indicate those users who are unauthorized to use a particular application rather than those who are authorized.

To obtain the information that is stored in the database the server A obtains the application related information from each other server in the server farm regarding the applications on those servers including control information that indicates which client users and servers are permitted to access each particular application. The application related information maintained in the database may or may not persist across re boots of the server A.

The application database can be a central database that is stored at the application servers A and is accessible to all of the servers in the server farm. Accordingly the application related information can be available for use by other servers such as those servers that perform published application authentication during session log on and application launching. In another embodiment the application database is maintained at each of the application servers based upon the information that each server obtains from communications with each other server in the server farm.

Each server A B and N having the Program Neighborhood application installed thereon executes the PNSVC software . The PNSVC software operating on each server A B and N establishes a communication link e.g. a named pipe with each other server. The servers A N and N exchange the application related information on the named pipes. In another embodiment the PNSVC software collects the application related information from the other servers in the server farm through remote registry calls e.g. the service component transmits a datagram to other servers in the plurality requesting the application related information corresponding to the application programs hosted by those servers . The PNSVC software also maintains the relationships of groups and users to published applications in the application database and accesses the information when authenticating a client user. An administrator of the server A may use a user interface to configure the PNSVC .

Other functions of the PNSVC software include implementing the services and functions requested by the PNAPI and communicating with the PNAPI on the client node A using a Program Neighborhood virtual device driver VDPN . The VDPN operates according to the Program Neighborhood virtual channel protocol described above for establishing and maintaining an ICA connection.

The PNAPI is a set of software functions or services that are used by the Program Neighborhood application to perform various operations e.g. open windows on a display screen open files and display message boxes . The PNAPI provides a generic mechanism for launching application objects e.g. icons produced by running the Program Neighborhood application and application objects in a legacy i.e. predecessor or existing for some time client user interface. When the client node A launches an available application the launch mechanism may launch the application on the server A if necessary e.g. when the client node A does not have the resources to locally execute the application .

The PNAPI provides all published application information to the user interface component for display on the screen of the client node A. The PNAPI also manages server farm log ons in a local database of logon credentials e.g. passwords for users of the client node A to support the single authentication feature. Credentials may or may not be persistent across bootings power off and on cycles of the client node A.

The PNAPI provides automatic and manual management for Program Neighborhood application objects stored in the local cache . The local cache may be refreshed manually by the user of the client node A or at a user definable refresh rate or by the server at any time during a connection. In a Windows implementation the PNAPI builds remote application file associations and manages the Start menu and desktop icons for application object shortcuts.

The user interface module interfaces the PNAPI and may be a functional superset of an existing client user interface e.g. Remote Application Manager . The user interface module accesses the information stored in the local cache through the PNAPI and visually presents that information to the user on the display screen of the client node A. The displayed information is a mixture of information generated by a user of the client node A and information obtained by the Program Neighborhood application. The user interface module may also show the user all applications that the user is currently running and all active and disconnected sessions.

In a windows based embodiment the user interface module may present a variety of graphical components such as windows and pull down menus to be displayed on the display screen. A display of a combination of such graphical user interface components is generally referred to as a desktop. A desktop produced by the user interface module may include a Program Neighborhood window displaying the neighborhood of application programs available to the user of the client node A for use. These application programs are a filtered combination of the published applications hosted by a server farm on the network. The user interface module may generate a Program Neighborhood window for each server farm or merge the applications from different server farms under a single Program Neighborhood window.

At a top level the Program Neighborhood window includes a folder for each server farm. Clicking on one of the folders with the mouse produces a window containing a representation e.g. an icon of each hosted application available to the user e.g. see . The Program Neighborhood window becomes the focal point for launching published applications and the user interface module may be used to launch applications through the PNAPI For example the user of the client node A may use the mouse to select one of the displayed icons and launch the associated application.

A feature of a client based implementation is that the user may browse the objects displayed in the Program Neighborhood window although the client node is offline that is the ICA connection is inactive. Also a user of the client node A may drag application objects and folders out of the Program Neighborhood window and into other graphical components e.g. other windows folders etc. of the desktop.

Similar to that described in for the client node A the client node N logs on to the network the server A develops and maintains a database containing the application related information collected from the other servers B N in the server farm and a communication link is established between the server A and the client node N.

The application server A is in communication with the client node N via an ICA channel connection . The channel connection may be established by an ICA virtual channel protocol e.g. Thinwire . The Thinwire protocol can be used to transmit presentation commands from Windows based applications running on the application server A to the client node N. To a user of the client node N the applications appear to be running on the client node N. The client node N may include a Remote Application Manager application program that communicates with the application server A via the ICA channel connection .

To run the Program Neighborhood application in a server based implementation the user of the client node N connects to an initial desktop at the server A and launches the Program Neighborhood application from within that desktop environment. The connection to the initial desktop can occur automatically e.g. via a logon script of the client node N via an entry in the StartUp group in Windows 95 or by another centrally managed server specific mechanism. All remote application management and launching is accomplished through this initial desktop.

Similar to that described in for the server A the server uses the user credentials to determine those application programs that are authorized for use by the user of the client node N. A Program Neighborhood graphical window is returned to the client node N and displayed on the client screen. This window may include icons representing the available and possibly the unavailable application programs that are in the program neighborhood of the client node N.

The user of the client node N may select and launch one of the application programs displayed in the Program Neighborhood window. When launching an application the Program Neighborhood application can execute the application on the same server where applicable taking into account load balancing requirements among servers and the availability of the application on that server . The PNAPI can include a launch mechanism for launching a remote application locally on the server when the server is nominated to launch the application. When a different server is needed to run the application the Program Neighborhood application may launch the application via the server i.e. server based client using the windows to present the application on the desktop of the client node N.

In one embodiment the web based Program Neighborhood application includes a group of objects that manage various aspects of the application. In one embodiment the application includes three primary object classes that plug in to a web server a gateway object class a credentials object class and an application object class. In some specific embodiments the object classes are provided as Java beans. The three primary object classes facilitate validation of user credentials into a server farm generation of lists of published applications that a specified user may access provision of detailed information about a specific published application and conversion of published application information into an ICA compatible format.

When provided as Java beans the objects may be accessed in a number of different ways. For example they may be compiled as COM objects and made available to the web server as ActiveX components. In another embodiment the Java beans can be used in their native form such as when the server uses Java Server Pages technology. In yet another embodiment the Java beans may be instantiated and used directly in a Java servlet. In still another embodiment the server may instantiate the Java beans as COM objects directly.

A credentials object class manages information necessary to authenticate a user into a target server farm. A credentials object passes stored user credentials to other Program Neighborhood objects. In some embodiments the credentials object is an abstract class that cannot be instantiated and represents a user s credentials. Various class extensions may be provided to allow different authentication mechanisms to be used including biometrics smart cards token based authentication mechanisms such as challenge response and time based password generation or others. For example a clear text credentials extension may be provided that stores a user s name domain and password in plain text.

A gateway object class handles communications with a target server farm. In one embodiment the gateway object class is provided as an abstract Java class that cannot be instantiated. A particular gateway object may retrieve application information by communicating with a server farm using a particular protocol reading cached application information a combination of these two methods or other various methods.

As noted above the gateway object class caches information to minimize communication with a target server farm. Extensions to the gateway object may be provided to communicate with the server farm over specific protocols such as HTTP. In one embodiment an extension class is provided that allows the gateway object to communicate with the server farm via WINDOWS NT named pipes. The gateway object may provide an application programming interface hook that allows other Program Neighborhood objects to query the object for application information.

An applications object class contains information about published applications and returns information about applications hosted by the server farm in order to create the Program Neighborhood web page. The applications object class creates objects representing applications by retrieving information relating to the applications either from an object created by the gateway object or directly from the servers in the server farm. An applications object acts as a container for certain properties of the application some settable and some not settable such as the name of the application not settable the percentage of the client s desktop that the client window should occupy settable the width of the client window in pixels for this application settable the height off the client window in pixels for this application settable the number of colors to use when connecting to the application settable the severity of audio bandwidth restriction settable the level of encryption to use when connecting to the application settable the level of video to use when connecting to this application settable whether the application should be placed on a client s start menu settable whether the application should be placed on the client s desktop settable the identity of the Program Neighborhood folder to which the application belongs settable the description of the application settable the source of the graphics icon file for the application settable the type of window that should be used when connecting to the application not settable and whether to override default parameters for the object.

Each application program represented by one of the icons is unavailable to the user of the client node A N although such applications are present in the server farm. The unavailability of these application programs can be noted on the display screen e.g. X s can be drawn through the icons . An attempt to launch such an application program can trigger a message indicating that the user is not authorized to use the application.

At step the application server A establishes a connection with each other servers B and N to exchange application related information as described above corresponding to application programs hosted on those servers step . In step the application server B develops and maintains a database of the collected application related information. Each other server A and N in the server farm may develop a database equivalent to the database of the server B and in similar manner as the server C. In another embodiment the database of the server B may be a centralized database that is accessible to each other application server A and N in the server farm. The collecting of application related information may occur independently or be triggered by the request of the client node A N to log on to the server farm .

In step the client node A N may request execution of an application program from the desktop display. The master server node may process the request and using a load balancing evaluation and application availability as described above determine the application server to provide the service to the client node A N step . For example the application server A may be selected to service the request with the client node A N. In step the client node A N establishes a communications link with the server B. The server B and the client node A N may communicate according to the ICA protocol appropriate for that client node as described above.

Also in response to this request to run the application program the master server node A or the server B may run the Program Neighborhood application step and push the results to the client node A N although the client node A N may not have requested the Program Neighborhood application program. When executing the Program Neighborhood application program the master server node A or server B filters the application related information in the database using the user credentials step . The result of filtering the database determines those application programs that are authorized for use by the user of the client node A B. The authorized application programs are in the program neighborhood of the client node A N. This program neighborhood of available application information is pushed to the client node A N step and displayed on the client screen in a Program Neighborhood graphical window step .

In other embodiments the Program Neighborhood window may include applications that are in the server farm but unavailable for use to the client node A N. In a Windows based implementation the available and unavailable application programs can be represented by icons. The user of the client node A N may select and launch one or more of the application programs displayed in the Program Neighborhood window.

Referring now to embodiments of using one or more appliances to monitor the state of components of a remote access server farm and to load balance these components are depicted. Embodiments of the appliance as depicted in may used to deploy techniques for monitoring the functional state of components of a remote access server farm such as those components discussed above in conjunction with . The embodiments described in conjunction with will generally be discussed in view of the embodiment of a Citrix Presentation Server farm as the remote access server farm. In these embodiments the Citrix Presentation Server farm includes an XML service component for providing an enumerated list of published applications available from a server in the farm and a web interface component for processing a depiction of resources of the remote access server farm. Descriptions of an embodiment of the XML service component and the web interface component are described above as servers A N in conjunction with . The Citrix XML Service is queried by client applications in a Presentation Server farm to return a list of the applications to which a user has access. All Citrix Presentation Servers have an XML Service and IMA Service. In large scale environments typically a number of Citrix Presentation Servers are used as dedicated XML Brokers which may be used primarily to enumerate applications for clients and assist with selecting the least loaded server from the farm that are available to serve an application

Referring now to an embodiment of a system for requesting by a client from an interface service a list of published applications available from the remote access server farm is depicted. In brief overview at step a client running a program neighborhood application or any services thereof transmits a request to an interface service such as the interface running on the XML Broker A. The appliance intercepts or receives the request at step and selects one of a plurality of XML services A for which to forward the request. For example a VIP of the appliance may be configured to process and load balance XML interface requests to an XML interface. The appliance forwards the request to the selected XML service.

At step of the XML service on XML broker A receives from the appliance the request of the client and forwards the request to a local IMA service running on the XML Broker A. At step the local IMA service communicates with the IMA service operating on the Zone Data Collector server B. At step the Zone Data Collector server B checks storage e.g. a dynamic store of the remote server farm that identifies the least loaded server having the requested application. The Zone Data Collector Server B may send an IMA ping to the lead loaded server to verify the server s availability. The Zone Data Collector server B returns the host identifier or HostID of the server to the XML Broker A. At step the XML service receives the host identifier of the least loaded server and at step the XML service looks up the host identified in a local host cache. The XML service sends a response back to the client via the appliance . At step the client receives a response having the ICA file from the appliance . At step the client initiates a session such as an ICA session directly with the server identified via the response and in this example the least loaded server in the presentation server farm.

Referring now to an embodiment of a system for providing application enumeration with the components of a Web Interface and an XML service of the Citrix Presentation Server farm is depicted. The Web Interface may provide a user interface such as web based depiction of the list of available published applications from the server farm. Furthermore a first appliance A may load balance or perform traffic management for the Web Interface Servers while a second appliance B may load balance or perform traffic management for the XML interfaces.

At step as depicted in the client communications a request for application enumeration or for an application to the Web Interface Server A. At step the appliance A via a VIP for the Web Interface received the client request and selects one of a plurality of Web Interface Servers A for which to forward the request. At step the selected Web Interface Server A receives the client s request forwarded by the appliance A The Web Interface Server A forwards an XML request to the XML service of the XML broker B. At step the second appliance B receives this request and selects the XML Broker B for which to forward the request. For example a VIP on appliance A may be configured to manage one or more XML interface services. The appliance B forwards the request to the selected XML service B

At step the XML service B receives the request forwarded by appliance B. The XML service B communicates the request to a local IMA service. At step in response the local IMA service communicates with the IMA service on the Zone Data Collector server C. At step the Zone Data Collector server C checks a storage e.g. a dynamic store of the remote server farm that identifies the least loaded server having the requested application. The Zone Data Collector Server C may send an IMA ping to the least loaded server to verify the server s availability. The Zone Data Collector server C returns the host identifier of the server to the XML Broker B. At step the XML service receives the host identifier or HostID of the least loaded server. At step the XML service looks up the host identifier in a local host cache. The XML service sends a response back to the B. At step the appliance B receives the response and communicates the XML response back to appropriate Web Interface Server. In some embodiments the appliance communicates the response based on a COOKIEINSERT persistence type. At step the Web Interface Server A receives the XML response and packages ICA file with a template and sends the ICA file to the client via appliance A. At step the appliance A receives the ICA file from the Web Interface Server A and communicates the ICA file to the client . At step the client receives a response having the ICA file from the appliance A. At step the client initiates a session such as an ICA session directly with the server identified via the response and in this example the least loaded server in the presentation server farm.

Referring now to an embodiment of an environment for using appliances A N for managing traffic between components of a remote access server farm is depicted. In brief overview a first set of appliances A B are deployed between a client and a plurality of Web Interface Servers A N. The appliance A may manage a primary set of web interface services A N and appliance B may manage a backup or secondary set of web interface services. A second set of appliances C N may be deployed between the Web Interface Servers and a plurality of XML Brokers A N providing an interface service to one or more presentation server farms . The appliance C may manage a primary set of XML services while the appliance N may manage a backup or secondary set of XML services. The server farms and may be deployed at one or more data centers.

In the embodiment depicted in the components of the remote access server farm are deployed on dedicated servers. A plurality of Web Interface Servers are deployed on a plurality of servers. A plurality of XML Interfaces are deployed on a plurality of XML broker servers. In these embodiments the load sharing of these remote access server components are distributed among a plurality of dedicated servers. Although depicts the Web Interface and XML Interface services on separate servers any one or more Web Interface and XML Interface components may be deployed on the same server.

Referring now to a block diagram of an appliance having a plurality of monitoring agents to monitor a network service is shown. In brief overview an appliance comprises a plurality of monitoring agents A N generally referred to herein as agents and also referred to as probes . Each of the plurality of monitoring agents may be assigned to monitor one or more services A N. A monitor may be associated with or bound to a VIP service A N. For example monitors A B may be bound to a Web Interface VIP service A and monitors C N may be bound to XML VIP service N.

A monitoring agent may comprise any application program script daemon or other computing routine that reports a performance or operational characteristic of a network service to the appliance . A monitoring agent may communicate with a network service once or on a predetermined frequency such as every 1 msec or 1 sec. In some embodiments a monitoring agent may use a request reply messaging mechanism or protocol with the service . In other embodiments a monitoring agent may have a custom or proprietary exchange protocol for communicating with the server. In some embodiments a single monitoring agent may monitor a plurality of services. In other embodiments a plurality of agents may monitor a single service. In still other embodiments a plurality of monitoring agents may each monitor a plurality of services or servers wherein each of the plurality of servers or services is monitored by a plurality of monitoring agents.

In the embodiment shown the one or more monitoring agents are associated with one or more network services A N. In other embodiments the one or more monitoring agents may monitor an appliance vServer network service client or any other network resource. In one embodiment a user specifies a type of network service to associate with the one or more monitoring agents . In another embodiment a user customizes a monitoring agent. In still another embodiment a generic monitoring agent is used. In yet another embodiment the one or more monitoring agents determine the response time of the one or more network services for responding to a request of one of the following types ping transport control protocol tcp tcp extended content verification hypertext transfer protocol http http extended content verification hypertext transfer protocol secure https https extended content verification user datagram protocol domain name service and file transfer protocol.

In some embodiments the one or more monitoring agents are protocol specific agents each agent determining availability for a network service of a particular protocol type. In some embodiments a monitoring agent determines a response time of a server or network service to a TCP request. In one of these embodiments the agent uses a TCP ICMP echo request command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In other embodiments a monitoring agent determines availability of a network service to a UDP request. In one of these embodiments the agent uses a UDP echo command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In still other embodiments the monitoring agent determines availability of a network service to an FTP request. In one of these embodiments the monitoring agent sends an FTP command such as a get command or a put command to the network service and determines a time needed by the network service to respond to the command. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as contents of a file requested by a get command and did not contain errors.

In yet other embodiments the monitoring agent determines availability of a network service to an HTTP request. In one of these embodiments the monitoring agent sends an HTTP command such as a get request for a uniform resource locator URL or a file to the network service and determines a time needed by the network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the contents of a web page identified by the URL and did not contain errors.

In further embodiments the monitoring agent determines availability of a network service to a DNS request. In one of these embodiments the monitoring agent sends a DNS request such as a dnsquery or nslookup for a known network address to the server or network service and determines a time needed by the server or network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the domain name of a computing device associated with the known network address and did not contain errors.

A monitoring agent may be assigned a weight by a network appliance . A weight may comprise an integer decimal or any other numeric indicator. In some embodiments a user may configure the weight corresponding to a given monitoring agent . In some embodiments all monitoring agents may be assigned equal weight. In other embodiments a plurality of monitoring agents may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance including without limitation importance of the monitored service reliability of the monitoring mechanism and the frequency of monitoring.

In one embodiment a monitoring agent may be assigned a weight based on the relative importance of the service the appliance monitors. For example if most user requests in a given environment were HTTP requests a monitoring agent monitoring HTTP availability of a server might be assigned a weight of 10 while a monitoring agent monitoring FTP availability of a server might be assigned a weight of 3. Or for example if an administrator placed a high priority on UDP applications a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20 while a DNS monitoring agent may be assigned a weight of 5.

In some embodiments an appliance may compute a sum of the weights of the monitoring agents currently reporting a network service as operational. For example if five monitoring agents each assigned a weight of 30 are monitoring a network service and three of the five monitoring agents report the network service as available the appliance may determine the sum of the monitoring agents currently reporting the network service as operational to be 90. Or for example if only two monitoring agents one with a weight of 20 and the other with a weight of 40 are reporting a server as available the appliance may compute the sum of the monitoring agents currently reporting a server as operational.

In some embodiments the appliance includes multiple types of monitoring agents. In one embodiment a monitoring agent may be a kernel based or kernel mode agent. A kernel type monitor probes packets assembled within the kernel of the appliance. In one example a kernel type monitors may be configures to perform a TCP ECV Extended Content Verification to search for a string in an HTTP response such as from a Web Interface. In another embodiment the agent may be a user mode based agent referred to as an advanced monitor user monitor or scriptable monitor. In some embodiments an advanced monitors is a custom script that runs in user memory space on the appliance. An Advanced Monitor may be written in a number of programming languages including Shell Perl or Python. In some cases the monitor is a binary executable instead of being written in an interpreted scripting language

The result of the test or probe of a monitoring agent may dictate a change in a state of the service e.g. UP DOWN to which the monitor is bound. In one embodiment the monitoring agent returns a value of 0 to indicate success and a non zero value to indicate an error or a failure. The kernel of the appliances may interpret the returned 0 value as a success and anything other than zero as a failure. In response to the receiving the returned value from the monitoring agent the appliance may mark the state of the service accordingly. In one embodiment the appliance marks the service as FAILED when the value of the retries parameter is met. The appliance then moves the service or server out of load balancing reducing the chance that users may experience problems getting to their applications.

The monitoring agent monitor may use one or more parameters to control monitoring behavior. In one embodiment the monitor includes or uses an interval parameters. The interval may indicate the time in seconds between probes sent to a service. In another embodiment the monitor includes a response timeout parameter to specify the amount of time the kernel of the appliance waits for the response from the monitor probe. In some embodiments the monitor includes or uses a retires parameter which identifies the number of times the probe must fail before the kernel of the appliances marks the service as marked DOWN or otherwise unavailable. In yet another embodiment the monitors includes or uses a downtime parameter which identifies an amount of time in seconds that the kernel of appliance may wait before initiating another probe after the service has been marked DOWN or unavailable.

Still referring to the appliance may be used to monitor the state of components of the remote access server farm such as those depicted in . In some embodiments the appliance monitors these components to determine or distinguish between components that are operational and not functional versus those components that are operational and functional. A component may be operational in that the component is running or executing. That is in some embodiment an operational component is a component that is responsive but may not perform the component s functionality correctly or as intended expected or designed. A component may be not functional in that the component does not perform component s functionality correctly or as intended expected or designed even though the component may be operational. In some embodiments an operational and not functional component may return a response to a monitor s probe but the response had errors or otherwise indicates a failure. In other embodiments an operational and functional component returns a response to the monitor s probe and the response does not include any errors or otherwise does not indicate a failure. In yet another embodiment a non operational component may not return a response.

Some of the components to the remote access server farm may depend on one or more supporting services. For example functionality of the Web Interface server may be dependent on operation and functionality of an XML Broker authentication services and or name services. A component may be operational but if one of the supporting services is not operational and or not functional the operational component may not function properly. In other cases un trapped failures may cause an operational component to be not functional such as returning undesired responses. By the appliance monitoring for functional state of operational components the appliance may avoid routing users to non functional components of the remote access server farm such as non functional Web Interface services and XML interface services.

In one embodiment a monitoring agent of the appliance is designed constructed or configured to determine the functional and operational state of an XML Interface service. In the Citrix Presentation Server environment an XML service may provide an enumeration of the available published applications in the remote access server farm. The following comprises an embodiment of a request by the monitoring agent to probe the XML service 

The monitor may use the response to the request to determine whether or not the XML service is functional. In some embodiments the following response indicates a functional XML Service.

Based on the monitor receiving the above response and or the host id the appliance may determine or assume any one or more of the following conditions of the remote access server farm 1 the IMA Service on the XML Broker is functioning correctly 2 the Local Host Cache on the XML Broker is valid 4 The IMA Service on the Zone Data Collector is functioning correctly 5 the Dynamic Store on the Zone Data Collector is valid 6 a presentation server in the remote access server farm is available with the requested application and 7 the XML Service on the XML Broker is functioning correctly.

In some embodiments the XML service may communicate the following response in response to receiving a malformed request 

The following response indicates a problem with the remote access server farm such as a non functional state of the XML interface or any service the XML interface depends on 

In view of an operational XML interface returning a response the monitoring agent may determine whether or not the XML interface is functional based on identifying predetermined elements of the response that identify other components or subsystems of the remote access server farm are operational and or functional. In one embodiment the monitoring agent uses the presence or existence of the HostId in the response to determine the XML interface is functional. In some embodiments the monitoring agent checks the HostId to verify the server in the remote access server farm is available and if so determines the XML interface is functional. In other embodiments the monitoring agent determines the XML service is functional based on receiving the HostID and no error tags or identifiers in the response .

The following is one embodiment of a request and responses to the interface service for which a monitoring agent of the appliance may determine the functional state of the interface service 

In another embodiment a monitoring agent of the appliance is designed constructed or configured to determine the functional and operational state of a Web Interface service. In the Citrix Presentation Server environment a Web Interface service or broker may provide a graphical user interface depiction of the remote access server farm such as those depicted in . The monitoring agent may probe the Web Interface with a request and check whether or not the Web Interface is functional in addition to operational by inspecting any of the field headers or payload of the response.

In some embodiments the monitoring agent transmits a request to the Web Interface for a web page provided via the Web Interface. The request may comprise any type and form of HTTP request or any other markup language. In one embodiment the monitoring agent submits a request for a default page. In other embodiments the monitor agent submits a request for a home page. In another embodiment the monitoring agent submits a request for a default site path for the logon pages for Web Interface based on the version of Citrix Presentation Server as the remote access server and or version of the Web Interface 

The monitoring agent may receive a response from the Web Interface. Receiving a response may indicate the Web Interface is operational. The monitoring agent inspects the response for predetermined content to determine whether or not the Web interface is functional. In some embodiments the monitoring agent may verify the response includes a Set Cookie header. In the embodiment of Citrix Presentation Server a response from a Web Interface server having the set cookie header indicate the Web Interface server is functional. In embodiments in which this header is not present in the response the monitoring agent may determine the Web Interface may not be functional although operational. For example if a web server for the Web Interface is experiencing problems the response from the Web Interface may not include a set cookie header.

In other embodiments the monitoring agent may determine the Web Interface is functional or not functional based on checking or verifying the response for a predetermined code or predetermined string. In some embodiments the monitoring agent may check for a status code such as 200 OK in an HTTP response. The following example illustrated a monitoring agent script performs a check for a status code from a Web Interface Response 

Based on the monitoring agent checking for a header value such as set cookie a predetermine code or a unique string or any combination thereof the monitoring agent determines the functional state of the Web Interface. If these one or more content values of the response are as expected the appliance may consider the Web Interface operational and functional. If the responses do not have the expected content the appliance may determine the Web Interface is operational but not functional. If no response is received the appliance may determine the Web Interface is not operational. In some embodiments the appliance includes operational and functional Web Interfaces in a load balancing rotation. In another embodiment the appliances excludes operational and non functional Web Interface from a load balancing rotation or otherwise load balancing decisions.

Although the components of the remote access server farm are generally described in the context of the Citrix Presentation Server Farm as the remote access system any type and form of interface service performing any of the functions operations or logic of the XML service may be used and or any type and form of web based service performing any of the functions operations or logic of the Web Service may be used in connection with systems and methods described herein. Furthermore although the functional and operational state monitoring of these components are generally discussed in the context of the intermediary in a form of an appliance the intermediary may comprise any type and form of intermediary on any computing device such as an agent on the client or the server for example the client agent depicted in .

Referring now to an embodiment of a method to monitor a state of one or more interface service components of a remote access server farm such as an XML service of a Citrix Presentation Server is depicted. In brief overview of method at step monitoring agents for one or more interface services are established. At step the monitoring agents transmits a request for a predetermined published application from the one or more interface services. At step the monitoring agents receive responses from the interface servers. At step if the monitoring agent does not receive a response from an interface service within a predetermined time or threshold the appliance may determine the interface service is not operational. At the monitoring agent determines whether or not the response includes a host identifier for a server in the remote access server farm. If the response does not include a host identifier the appliance at step determines the interface service is operational but not functional. At step the appliance excludes the not functional interface from a load balancing rotation such that client requests are not forwarded to non functional interface services. If the response does include a host identifier the appliance at step determines the interface service is operational and functional. The appliance at step may include the operational and functional interface services in the load balancing rotation such that client request are forwarded to functioning interface services.

At step any type of monitoring agent may used to monitor a state of the interface services such as the XML interface component of the Citrix Presentation Server remote access farm. In one embodiment the monitoring agent operates as a kernel based monitor. In another embodiment the monitoring agent operates in user mode. A monitoring agent may be bound to one or more VIPs of the appliance. The monitoring agent may operate to determine the functional state of the interface service. In some embodiments one monitoring agent may monitor or probe one interface service. In other embodiments one monitoring agent may monitor or probe a plurality of interface services. In yet another embodiment a plurality of monitoring agents may monitor or probe a plurality of interface services.

At step a monitoring agent may transmit a request to one or more interface services to probe or monitor the interface service. The monitoring agent may request from an XML service an enumerated list of published applications from a remote access server farm. In some embodiments the monitoring agent transmits a request for a predetermined published application via the interface services. In further embodiments the request may include an indicator to identify to the interface service or any other component of the remote access server farm to not consider the request in load balancing metrics. For example in one embodiment the request includes a no load bias flag.

At step the monitoring agents received responses from the interface services. In some cases a monitoring agent does not receive a response from an interface service. In other cases a monitoring agent receives a response with one or more error codes. In another case the monitoring agent receives a response without any errors. In some embodiments the monitoring agent receives a response with a host identifier of a server in the remote access server farm. In one embodiment the monitoring agent receives a response including the host identifier of the least loaded server in the remote access server farm. In yet another embodiment the monitoring agent receives an XML based response. In one embodiment the XML based response includes a tag to identify the host identifier such as the example in the embodiments of .

At step the monitoring agent may determine that a response was not received from an interface service. In some embodiments the monitoring agent may wait for a predetermined time threshold for the response. In other embodiments the monitoring agents may retransmit the request a predetermined numbers of times. Based upon not receiving a response from the interface service the monitoring agent or appliance may identify the operational state of the interface service as not operational.

At step the monitoring agent determines whether or not a host identifier of a server from the remote access server farm is present and or valid in the received response. The monitoring agent may check for the existence of the host identifier in a location expected within the content of the response. In one embodiment the monitoring agent determines whether response includes a properly formed response. In some embodiments the monitoring agent determines whether the value tag name value pair line or other items in the response identifying the host are formatted or formed properly or as expected. In another embodiment the monitoring agent determines whether or not the host identifier comprises a predetermined number of characters or numbers. In some embodiments the monitoring agent checks the host identifier against a database a cache or name service. In one embodiment the monitoring agent pings the host identifier to determine if the host is available. In another embodiment the monitoring agent transmits an IMA ping to the host identified by the host identifier. In further embodiments the monitoring agents checks for any error codes or strings within the response.

If at step the response does not include the host identifier a valid host identifier and or the host identifier is otherwise determined to be unavailable the monitoring agent and or appliance may determine the interface service providing the response is operational and not functional. Although the interface service provides a response to indicate that the service is running the response has content that indicates the interface service is not functioning as desired or expected. In one embodiment the appliance marks the interface service as having a down state or otherwise unavailable.

At step the appliance excludes in load balancing decisions the non operational interface services and or operational and non functional interface services. For example in one embodiment upon detecting via the monitoring agent an interface service is not functional the intermediary may exclude the non functional interface service in the next load balancing rotation or traffic management decision. In this manner and in some embodiments the appliance avoids transmitting client requests to operational interface services that are not functioning properly or otherwise identified as non functional. In other embodiments the appliance excludes the non functional interface service from traffic management decisions until a predetermined time or upon detecting via a monitoring agent the interface service is functional.

If at step the response includes the host identifier a valid host identifier and or the host identifier is otherwise determined to be available the monitoring agent and or intermediary may determine the interface service providing the response is operational and functional. Although the interface service provides a response to indicate that the service is running the response has content that indicates the interface service is also functioning as desired or expected. In one embodiment the appliance marks the interface service as having a UP state or otherwise is available.

At step the appliance includes in load balancing decisions the operational and functional interface services. For example in one embodiment upon detecting via the monitoring agent an interface service is functional the intermediary may include the functional interface service in the next load balancing rotation or decision. In some embodiments the interface service was previously included in the traffic management and or load balancing decisions and the appliance maintains the inclusions of the functional interface service in these decisions. In another embodiment the interface service may have been marked as down or unavailable and may not have been included in traffic management decisions. Upon detecting the interface service is functional the interface service is marked up or available and included in traffic management decisions.

Referring now to an embodiment of a method to monitor a state of one or more web interface components of a remote access server farm such as an Web Interface server or Broker of a Citrix Presentation Server is depicted. In brief overview of method at step monitoring agents for one or more web interfaces are established. At step the monitoring agents transmits a request for a web page from the one or more web interfaces. At step the monitoring agents receive responses from the web interfaces. At step if the monitoring agent does not receive a response from a web interface within a predetermined time or threshold the appliance may determine the web interface is not operational. At the monitoring agent determines whether or not the response includes a predetermined response string or a code such as a set cookie header. If the response does not include the predetermined response string or code the appliance at step determines the web interface is operational but not functional. At step the appliance excludes the not functional web interface from a load balancing rotation such that client requests are not forwarded to non functional web interfaces. If the response does include the predetermined response string or code the appliance at step determines the web interface is operational and functional. The appliance at step may include the operational and functional web interface in the load balancing rotation such that client requests are forwarded to functioning web interfaces.

At step any type of monitoring agent may used to monitor a state of a web interface such as the Web Interface component of the Citrix Presentation Server remote access farm. In one embodiment the monitoring agent operates as a kernel based monitor. In another embodiment the monitoring agent operates in user mode. A monitoring agent may be bound to one or more VIPs of the appliance . The monitoring agent may operate to determine the functional state of the web interface. In some embodiments one monitoring agent may monitor or probe one web interface. In other embodiments one monitoring agent may monitor or probe a plurality of web interface. In yet another embodiment a plurality of monitoring agents may monitor or probe a plurality of web interfaces.

At step a monitoring agent may transmit a request to one or more web interface to probe or monitor the web interface. The monitoring agent may request from the web interface a web page In some embodiments the monitoring agent transmits a request for a predetermined web page. In one embodiment the monitoring agent transmits a login page to the remote access server farm or any component thereof. In another embodiment the monitoring agent transmits a request for the default page or landing page for the Web Interface. In yet some embodiments the monitoring agents transmits a request for a default page of the Web Interface based on the version of the Web Interface or the remote access server farm. In still other embodiments the monitoring agents transmits a request for a login page. In further embodiments the request may include an indicator to identify to the web service or any other component of the remote access server farm to not consider the request in load balancing metrics.

At step the monitoring agents received responses from the web interfaces. In some cases a monitoring agent do not receive a response from the web interface. In other cases a monitoring agent receives a response with one or more error codes. In another case the monitoring agent receives a response without any errors. In some embodiments the monitoring agent receives a response with a predetermined string or code expected by the monitoring agent. In one embodiment the monitoring agent receives a response including a set cookie header. In yet another embodiment the monitoring agent receives an HTTP based response. In one embodiment the HTTP response includes a unique string identifying any element of the requested web page such as a stylesheet.

At step the monitoring agent may determine that a response was not received from a web interface. In some embodiments the monitoring agent may wait for a predetermined time threshold for the response. In other embodiments the monitoring agents may retransmit the request a predetermined numbers of times. Based upon not receiving a response from the web interface the monitoring agent or appliance may identify the operational state of the web interface as not operational.

At step the monitoring agent determines whether or not the response has the predetermined string or code. The monitoring agent may check for the existence of the predetermined string or code at a location expected within the content of the response. In some embodiments the monitoring agent may check a header of the response. In other embodiments the monitoring agent may check a body of the response. In one embodiment the monitoring agent determines whether response includes a properly formed response. In some embodiments the monitoring agent determines whether the value tag name value pair line or other items in the response identifying the predetermined string or code are formatted or formed properly or as expected. In another embodiment the monitoring agent determines whether or not the predetermined string or code comprises a predetermined number of characters or numbers. In some embodiments the monitoring agent checks the predetermined string or response against a table database a cache or name service. In further embodiments the monitoring agents checks for any error codes or strings within the response.

If at step the response does not include the predetermined string or code such as the set cookie header the monitoring agent and or appliance may determine the web interface providing the response is operational and not functional. Although the web interface provides a response to indicate that the service is running the response has content that indicates the web interface is not functioning as desired or expected. In one embodiment the appliance marks the we b as having a down state or otherwise unavailable.

At step the appliance excludes in load balancing decisions the non operational web interfaces and or operational and non functional web interfaces. For example in one embodiment upon detecting via the monitoring agent a web interface is not functional the intermediary may exclude the non functional web interface in the next load balancing rotation or traffic management decision. In this manner and in some embodiments the appliance avoids transmitting client requests to operational web interfaces that are not functioning properly or otherwise identified as non functional. In other embodiments the appliance excludes the non functional web interface from traffic management decisions until a predetermined time or upon detecting via a monitoring agent that the web interface is functional.

If at step the response includes the predetermined response string or code such as the set cookie header the monitoring agent and or appliance may determine the interface service providing the response is operational and functional. Although the web interface provides a response to indicate that the service is running the response has content that indicates the web interface is also functioning as desired or expected. In one embodiment the appliance marks the web interface as having an UP state or otherwise is available.

At step the appliance includes in load balancing decisions the operational and functional web interfaces. For example in one embodiment upon detecting via the monitoring agent a web interface is functional the appliance may include the functional web interface in the next load balancing rotation or decision. In some embodiments the web interface was previously included in the traffic management and or load balancing decisions and the appliance maintains the inclusion of the functional web interface in these decisions. In another embodiment the web interface may have been marked as down or unavailable and may not have been included in traffic management decisions. Upon detecting the web interface is functional the web interface is marked up or available and included in traffic management decisions.

In view of the structure functions and operations of the systems and methods described herein the appliance provides for the monitoring of functional state of components of remote access server farms to improve the reliability usability and access by users to the server farm. appliance provided failover protection and load balancing based on the functional state of these components which takes into account some of these components dependencies on other services and components. Furthermore the system and methods described herein extent site fail over capability to all end points and access methods as well as to additional data centers. The appliance ensures users are not routed to non functional Web Interface and XML interface services of a presentation server farm.

These systems and methods reduce the vulnerability of access due to untrapped failures of any of the components of the remote access server farm. The deployment of the appliance as depicted herein helps contain any farm wide failure so that the impact is limited to an inability to enumerate and launch applications in the failing farm. The deployment of the appliance helps contact any failure of a single component so that there is no impact on the end user. Furthermore the deployment of the appliance also helps contain multiple component failures so that performance degradation is no more than equal to the number of failing components. As the size and complexity of an environment for a remote access server farm grows the appliances helps maintain or mitigate the risks from these associated complexities. This helps reduce the coordination between multiple internal and external groups involved with the maintenance and administration of the environment.

