---

title: Systems and methods of quota accounting
abstract: Embodiments of the invention relate generally to incremental computing. Specifically, embodiments of the invention include systems and methods that provide for the concurrent processing of multiple, incremental changes to a data value while at the same time monitoring and/or enforcing threshold values for that data value. For example, a method is provided that implements domain quotas within a data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08195905&OS=08195905&RS=08195905
owner: EMC Corporation
number: 08195905
owner_city: Hopkinton
owner_country: US
publication_date: 20110113
---
This application is a division of U.S. patent application Ser. No. 11 787 117 filed Apr. 13 2007 entitled SYSTEMS AND METHODS OF QUOTA ACCOUNTING now U.S. Pat. No. 7 900 015 which is hereby incorporated by reference herein in its entirety. U.S. patent application Ser. No. 11 787 117 was filed on the same day as the following applications U.S. patent application Ser. No. 11 787 225 entitled SYSTEMS AND METHODS OF PROVIDING POSSIBLE VALUE RANGES now U.S. Pat. No. 7 779 048 and U.S. patent application Ser. No. 11 787 224 entitled SYSTEMS AND METHODS OF MANAGING RESOURCE UTILIZATION ON A THREADED COMPUTER SYSTEM published as U.S. Patent Application Publication No. 2008 0256545 all of which are hereby incorporated by reference in their entirety herein.

A portion of the disclosure of this patent document includes material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

The increase in processing power of computer systems has ushered in a new era in which information is accessed on a constant basis. Multiple transactions in a computing environment often access the same data with incremental changes. In some systems it may be advantageous to process incremental change requests or delta transactions concurrently. In some systems it may also be advantageous to establish thresholds for the value of the data being changed incrementally. Additionally it may be advantageous to manage utilization of resources in the computing environment while managing requests for changing data.

In general embodiments of the invention relate to incremental computing. More specifically systems and methods embodying the invention provide support for concurrent processing of delta transactions while monitoring and or enforcing thresholds for the data values being changed incrementally.

In one embodiment a method of determining whether multiple incremental changes to a data field could pass a threshold is provided. The method may include receiving at least one threshold related to a data field receiving a request to incrementally modify a data value of the data field and determining whether the request in combination with a subset of other pending requests to incrementally modify the data value could pass the at least one threshold.

In another embodiment a computer readable medium having instructions stored thereon for determining when the instructions are executed whether multiple incremental changes to a data field could pass a threshold is provided. The instructions may include receiving at least one threshold related to a data field receiving a request to incrementally modify a data value stored in the data field and determining whether the request could cause an incremented data value to pass the at least one threshold in combination with any subset of other pending incremental requests.

In another embodiment a system that determines whether a subset of pending transactions could pass a threshold is provided. The system may include a module configured to receive at least one threshold related to a data field to receive an incremental transaction on the data field and to determine whether the incremental transaction could cause the data field to pass the at least one threshold in combination with any subset of other pending incremental transactions.

In another embodiment a method of tracking a boundary for a field stored in a computer system is provided. The method may include receiving a delta request associated with a field stored in a computer system and computing an updated boundary value of possible values for the field wherein the possible values are based on the delta request and a previous boundary value the previous boundary value derived from a subset of other pending delta requests for the field.

In another embodiment a system for tracking a boundary of a field stored in a computer system is provided. The system may include a boundary module configured to receive a delta transaction associated with a field stored in a computer system and to compute an updated boundary value based on possible values for the field wherein the possible values are based on the delta transaction and a previous boundary value the previous boundary value derived from a subset of other pending delta transactions for the field.

In another embodiment a computer readable medium having data structures stored thereon for tracking a boundary of a data field is provided. The data structures may include a data value field wherein the data value field comprises a stored data value capable of being modified incrementally a plurality of delta value fields wherein the delta value fields comprise respectively ones of a plurality of pending incremental values to be combined with the stored data value and at least one boundary field wherein the at least one boundary field comprises a boundary value of possible data values resulting from a combination of the stored data value with a subset of the plurality of pending incremental values.

In another embodiment a method of implementing domain quotas within a data storage system is provided. The method may include receiving at least one quota related to a size of a data domain wherein the data domain associates a subset of data storage within a data storage system wherein the size measures the subset and wherein the at least one quota defines a threshold size for the data domain receiving a data transaction that could change the size of the data domain and determining whether the data transaction could cause the size of the data domain to pass the at least one quota in combination with a subset of other pending data transactions that could also change the size of the data domain.

In another embodiment a computer readable medium having instructions stored thereon for implementing when the instructions are executed domain quotas within a data storage system is provided. The instructions may include receiving at least one quota related to a size of a data domain wherein the data domain associates a subset of data storage within a data storage system wherein the size measures the subset and wherein the at least one quota defines a threshold size for the data domain receiving a data transaction that could change the size of the data domain and determining whether the data transaction could cause the size of the data domain to pass the at least one quota in combination with a subset of other pending data transactions that could also change the size of the data domain.

In another embodiment a system for implementing domain quotas within a data storage system is provided. The system may include a quota module configured to receive at least one quota related to a size of a data domain wherein the data domain associates a subset of data storage within a data storage system wherein the size measures the subset and wherein the at least one quota defines a threshold size for the data domain to receive a data transaction that could change the size of the data domain and to determine whether the data transaction could cause the size of the data domain to pass the at least one quota in combination with a subset of other pending data transactions that could also change the size of the data domain.

In another embodiment a computer readable medium having data structures stored thereon for implementing domain quotas within a data storage system is provided. The data structures may include a domain size field the domain size field comprising a value that reflects a size of a data domain comprising committed transactions a bounded size field the bounded size field comprising a value that reflects a maximum possible size or a minimum possible size of the data domain based on a plurality of pending data transactions that have not committed or aborted an incremental value field the incremental value field comprising a value that reflects a change in the size of the data domain caused by a data transaction an operation type field the operation type field comprising a value that indicates whether the change in the size of the data domain caused by the data transaction is either an increment or a decrement and a quota field the quota field comprising a value that indicates a size threshold for either a minimum or maximum size for the size of the data domain to be within a quota defined for the data domain.

In another embodiment a method of managing utilization of a resource of a computer system having a number of threads is provided. The method may include receiving a usage threshold for a resource on the computer system and determining a usage for the resource on the system. The method may further include organizing the system into a number of subsystems wherein the number of subsystems is two or more and wherein the number is determined at least in part on factors including the number of threads the usage threshold and the usage. The method may further include allocating the subsystems among the threads tracking resource usage for each subsystem and distributing a request to modify resource usage to at least one subsystem.

In another embodiment a computer readable medium having instructions stored thereon for managing when the instructions are executed utilization of a resource of a computer system having a number of threads is provided. The instructions may include receiving a usage threshold for a resource on the computer system and determining a usage for the resource on the system. The instructions may further include organizing the system into a number of subsystems wherein the number of subsystems is two or more and wherein the number is determined at least in part on factors including the number of threads the usage threshold and the usage. The instructions may further include allocating the subsystems among the threads tracking resource usage for each subsystem and distributing a request to modify resource usage to at least one subsystem.

In another embodiment a system for managing utilization of a resource of a computer system having a number of threads is provided. The system may include a module configured to receive a usage threshold and to determine usage for a resource on the computer system. The module may be further configured to organize the computer system into a number of subsystems wherein the number is two or more and depends at least in part on factors including the number of threads the usage threshold and the usage. The module may be further configured to allocate the subsystems among the threads for tracking resource usage for each subsystem and to distribute a request to modify resource usage to at least one subsystem.

For purposes of this summary certain aspects advantages and novel features of the invention are described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus for example those skilled in the art will recognize that the invention may be embodied or carried out in a manner that achieves one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

These and other features will now be described with reference to the drawings summarized above. The drawings and the associated descriptions are provided to illustrate embodiments of the invention and not to limit the scope of the invention. Throughout the drawings reference numbers may be reused to indicate correspondence between referenced elements. In addition the first digit of each reference number generally indicates the figure in which the element first appears.

Systems and methods which represent one embodiment of an example application of the invention will now be described with reference to the drawings. Variations to the systems and methods which represent other embodiments will also be described.

For purposes of illustration some embodiments will be described in the context of a distributed file system. The present invention is not limited by the type of environment in which the systems and methods are used however and systems and methods may be used in other environments such as for example other file systems other distributed systems the Internet the World Wide Web a private network for a hospital a broadcast network for a government agency and an internal network for a corporate enterprise an Intranet a local area network a wide area network a wired network a wireless network and so forth. Some of the figures and descriptions however relate to an embodiment of the invention wherein the environment is that of a distributed file system. It is also recognized that in other embodiments the systems and methods may be implemented as a single module and or implemented in conjunction with a variety of other modules and the like. Moreover the specific implementations described herein are set forth in order to illustrate and not to limit the invention. The scope of the invention is defined by the appended claims.

One example of a distributed file system in which embodiments of systems and methods described herein may be implemented is described in U.S. patent application Ser. No. 10 007 003 now U.S. Pat. No. 7 685 126 entitled SYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM UTILIZING METADATA TO TRACK INFORMATION ABOUT DATA STORED THROUGHOUT THE SYSTEM filed Nov. 9 2001 which claims priority to Application No. 60 309 803 filed Aug. 3 2001 U.S. Pat. No. 7 146 524 entitled SYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM INCORPORATING A VIRTUAL HOT SPARE filed Oct. 25 2002 and U.S. patent application Ser. No. 10 714 326 published as U.S. Patent Application Publication No. 2004 0153479 entitled SYSTEMS AND METHODS FOR RESTRIPING FILES IN A DISTRIBUTED FILE SYSTEM filed Nov. 14 2003 which claims priority to Application No. 60 426 464 filed Nov. 14 2002 all of which are hereby incorporated by reference herein in their entirety.

In general embodiments of the invention relate to incremental computing. More specifically embodiments of the invention allow for the concurrent processing of multiple incremental changes to a data value while at the same time monitoring and or enforcing threshold values for that data value. illustrates a problem addressed by embodiments of the invention. illustrates a group of potential delta transactions . These potential delta transactions are associated with data a low threshold and a high threshold . Specifically the initial value of data is seventy five the value of the low threshold is zero and the value of the high threshold is one hundred. In other words two threshold values have been defined for data which collectively define a range of possible values for data that do not pass either threshold. In the illustrated example there are eight incremental values in the group of potential delta transactions . Delta transactions may be incremental changes to for example a data field. The illustrated delta transactions include an incremental value and an associated operation type that is either positive or negative corresponding to increment or decrement respectively. Taken together the incremental value and the operation type define an incremental operation to be performed on the value of data . Depending on the sequence in which these potential incremental changes are processed the data value may or may not pass one of the two thresholds low threshold or high threshold . There are three illustrated transaction sequences . In Sequence the third incremental change causes the value of data to pass the value of high threshold . In Sequence the third incremental change causes the value of data to pass the value of low threshold . In Sequence the incremental changes are processed in such an order that the value of data never passes either the value of low threshold or the value of high threshold .

In many computing environments there may be no fixed sequence order for processing pending transactions. Furthermore in some computing environments some pending transactions may be aborted adding increased variability to the possible value of a certain data. In such environments it may be advantageous to know whether any combination of pending delta transactions could cause for example an affected data field to pass a defined threshold. illustrates one embodiment of an example of using possible value ranges to determine whether a combination of pending transactions would cause a value of data to pass the value of either low threshold or the value of high threshold . There are eight potential delta transactions illustrated in . As these incoming potential transactions are considered as possible candidates to become pending transactions that is transactions that may be processed for example without regard to their order of arrival a computing system may evaluate whether the newly considered transaction could cause in combination with any other subset of pending transactions the value of data to pass for example the value of low threshold or the value of high threshold . Determining a possible value range is one method for determining whether any subset of pending transactions may exceed a threshold. In the example illustrated in the delta transaction 20 is considered first. If transaction 20 becomes pending the lowest possible value of data would not be affected because transaction 20 could only cause the value of data to increase. In contrast if transaction 20 becomes pending the highest possible value of data would be ninety five because if transaction 20 completes and there are no other pending transactions the value of data would be the initial value seventy five plus twenty. In some embodiments of an incremental computing system transaction 20 would be allowed to become pending because it could not cause the value of data to pass either the value of low threshold or the value of high threshold .

In the example illustrated in transaction 75 is considered second. If transaction 75 becomes pending the lowest possible value of data would be zero. The value of data would be zero if the transaction 20 aborts and the transaction 75 completes. The highest possible value of data would not be affected if transaction 75 became pending because transaction 75 could only cause the value of data to decrease. In some embodiments of an incremental computing system transaction 75 would be allowed to become pending because it could not cause the value of data to pass either the value of low threshold or the value of high threshold .

In the example illustrated in transaction 10 is considered third. If transaction 10 becomes pending the lowest possible value of data would still be zero because transaction 10 could only cause the value of data to increase. If transaction 10 becomes pending however the highest possible value of data would be one hundred and five. The value of data could be one hundred and five if the 20 and 10 transactions complete and the 75 transaction aborts. In some embodiments of an incremental computing system transaction 10 would not be allowed to become pending as an incremental transaction because it could cause the value of data to pass the value of high threshold which is one hundred. In other embodiments transactions that could cause a data value to pass a threshold may still be allowed to become pending once other transactions have resolved but may for example trigger a notification or trigger a condition to be monitored.

Although in the incremental computing system described above possible value ranges are used to monitor thresholds in a transaction environment where some transactions fail in other incremental computing systems possible value ranges may be used to monitor thresholds even where all transactions complete. For example it may be advantageous to know prior to transaction completion whether a certain pending value could cause in combination with the other pending values a data value to pass a threshold. If a potential transaction could later cause in combination with the pending transactions a threshold to be passed an incremental computing system may for example prevent such a potential transaction from becoming pending may notify a resource that the newest pending transaction will cause a threshold to be passed and or may monitor a condition associated with the forecasted passing of the threshold value.

A storage system is one example of a computing system that may use possible value ranges to determine whether a transaction could cause in combination with a subset of previously pending transactions to pass a threshold. For example in a storage system it may be advantageous to process multiple incremental requests to change a value at a storage location. In some systems writing a new incremental value may include requesting permission from a resource such as a disk drive in order to write the transaction to a specified storage location. Processing a single write request may involve many different processes including for example writing a copy of the value to a journal that temporarily stores the value before verification that the value has been written to long term storage such as a hard disk drive verifying that a data value has been successfully written to a storage device such as a hard disk drive and communicating with other computing devices that may be involved with a related transaction that could cause the incremental transaction to either commit or abort. While these operations are being performed other incremental change requests or delta transactions may arrive at the same time. It may be advantageous to process concurrently as many relevant operations for each delta transaction as possible. In some systems it may be possible to write multiple pending delta transactions to a journal. These pending delta transactions may be recorded in the journal during overlapping periods of time until for example a long term storage device is available to write the value at a particular storage location including the cumulative value of the pending incremental changes to the value that accumulated while attempting to gain access to the long term storage device.

Embodiments of a journal system in which embodiments of systems and methods described herein may be implemented are described in U.S. patent application Ser. No. 11 506 597 entitled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 published as U.S. Patent Publication No. 2008 0046443 on Feb. 21 2008 U.S. patent application Ser. No. 11 507 073 entitled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 published as U.S. Patent Publication No. 2008 0126365 on May 29 2008 U.S. patent application Ser. No. 11 507 070 entitled SYSTEMS AND METHODS FOR PROVIDING NONLINEAR JOURNALING filed Aug. 18 2006 published as U.S. Patent Publication No. 2008 0046444 on Feb. 21 2008 and U.S. patent application Ser. No. 11 507 076 entitled SYSTEMS AND METHODS FOR ALLOWING INCREMENTAL JOURNALING filed Aug. 18 2006 published as U.S. Patent Publication No. 2008 0046667 on Feb. 21 2008. All four of the foregoing applications are hereby incorporated by reference herein in their entirety.

Although storage is illustrated as a single storage device in other embodiments storage may include an array of one or more types of storage devices. Multiple processors system memory components and persistent memory components may also be included. Furthermore although embodiments of the invention are generally described with respect to storage devices based on hard disk drives other embodiments may be implemented on systems including alternative forms of storage such as solid state disks or drives random access memory RAM disks Flash disks combinations of the same and suitable equivalents. Similarly embodiments of the invention may include storage devices with various implementations of system memory including memory based on static RAM SRAM non volatile RAM NVRAM dynamic RAM DRAM combinations of the same and suitable equivalents. It will be appreciated by one skilled in the art how to implement embodiments of the invention on storage systems using suitable alternative storage related devices.

In the illustrated embodiment a journal of disk writes to storage is stored in persistent memory . Persistent memory as described herein may refer to memory devices whose content remain stable despite power failure to the device. For example a hard disk drive is an example of persistent storage. Hard disk drives retain their content even in the absence of a power supply. Hard disk drives do not however have efficient random access. Relatively long seek times limit the advantageous use of hard disk drives for journal storage. Although a hard disk drive may be used to store a journal in some embodiments nonvolatile random access memory NVRAM is preferred. Flash memory for example has faster access times in comparison with hard disk drives. One disadvantage of Flash memory however is its relatively limited lifecycle. In one embodiment persistent memory is battery backed RAM such that if it loses power the backup battery maintains its persistent state. Battery backed RAM has the advantage of efficient access time long lifecycle and persistent state making it a suitable source of persistent memory for storing a journal. Because battery backed RAM can lose its memory contents in the event that the battery fails persistent memory includes not only those storage mediums that maintain their contents without any power such as a hard disk drive but may also include storage mediums with suitable power supply backups. Persistent memory may also include magnetic random access memory MRAM which has access time and lifecycle advantages of battery backed RAM without having a backup power supply. It will be appreciated by one skilled in the art that persistent memory may include many suitable forms of nonvolatile memory including for example magnetic random access memory MRAM Flash RAM battery backed RAM combinations of the same and suitable equivalents.

Although in the illustrated embodiment system modules are illustrated as a separate component the system modules are program instructions that may be stored in a variety of suitable locations including for example local partitions on storage or dedicated storage devices. In general the word module as used herein refers to logic embodied in hardware or firmware or to a collection of software instructions possibly having entry and exit points written in a programming language such as for example C or C . A software module may be compiled and linked into an executable program installed in a dynamic link library or may be written in an interpreted programming language such as for example BASIC Perl or Python. It will be appreciated that software modules may be callable from other modules or from themselves and or may be invoked in response to detected events or interrupts. Software instructions may be embedded in firmware such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units such as gates and flip flops and or may be comprised of programmable units such as programmable gate arrays or processors. The modules described herein are preferably implemented as software modules but may be represented in hardware or firmware. Moreover although in some embodiments a module may be separately compiled in other embodiments a module may represent a subset of instructions of a separately compiled program and may not have an interface available to other logical program units.

In some embodiments computing system may comprise a variety of computer systems such as for example a computer a server a smart storage unit and so forth. In one embodiment the computer may be a general purpose computer using one or more microprocessors such as for example a Pentium processor a Pentium II processor a Pentium Pro processor a Pentium IV processor an x86 processor an 8051 processor a MIPS processor a Power PC processor a SPARC processor an Alpha processor and so forth. The computer may run a variety of operating systems that perform standard operating system functions such as opening reading writing and closing a file. It is recognized that other operating systems may be used such as for example Microsoft Windows 3.X Microsoft Windows 98 Microsoft Windows 2000 Microsoft Windows NT Microsoft Windows Vista Microsoft Windows CE Microsoft Windows ME Palm Pilot OS Apple MacOS Disk Operating System DOS UNIX IRIX Solaris SunOS FreeBSD Linux IBM OS 2 operating systems and so forth.

In some embodiments computing system may be connected to a cluster of networked computing devices forming a distributed network system. A distributed network system may be arranged in many topologies including but not limited to the following topologies fully connected ring mesh star line tree bus topologies and so forth. It will be appreciated by one skilled in the art that various network topologies and or combinations thereof may be used to implement different embodiments of the invention. In addition it is recognized that nodes in a distributed network system may be connected directly indirectly or a combination of the two and that all of the nodes may be connected using the same type of connection or one or more different types of connections. It is also recognized that in other embodiments a different number of nodes may be included in the cluster such as for example 2 16 83 6 883 10 000 and so forth.

In one embodiment the nodes of a distributed network system are interconnected through a bi directional communication link where messages are received in the order they are sent. In one embodiment the link comprises a keep alive mechanism that quickly detects when nodes or other network components fail and the nodes are notified when a link goes up or down. In one embodiment the link includes a Transmission Control Protocol TCP connection. In other embodiments the link includes a Session Description Protocol SDP connection over Infiniband a wireless network a wired network a serial connection Internet Protocol IP over FibreChannel proprietary communication links connection based datagrams or streams and or connection based protocols.

There are various data values stored in system memory that correspond to storage location . Storage reference is a pointer value that refers to the storage location on storage . Usage stores the value of the data stored at storage location . In the illustrated embodiment usage corresponds to a usage value of for example a defined domain of directories and files within a file system. PVR reference is a pointer to possible value range PVR variables including low value and high value . Threshold reference is a pointer to threshold variables for usage including low threshold and high threshold . Delta reference is a pointer reference to the values of delta transactions for usage including delta values . Although in the illustrated embodiment the delta values are illustrated as positive and negative values in other embodiments the delta values may be unsigned values. Additionally and or alternatively there may be additional variables defining the respective signs of data values .

Persistent memory includes a journal data structure . Journal data structure includes a journal block that is a pointer reference to a linked list of transaction blocks . The transaction blocks respectively link together all of the associated data block writes for respective transactions. For example the transaction Tincludes a block descriptor and a block value . Block descriptor includes a pointer reference to storage location . Block value stores the value that is to be written to storage location . Transactions Tand Tinclude delta transactions that modify the value stored at storage location . These delta transactions include a reference to the storage location to which they correspond as well as an incremental value and associated sign. When it comes time to write the value of usage to storage location the incremental values of the delta transactions will be combined with the data value and written to storage location .

In some embodiments a possible value range is a closed range describing bounds or boundaries for the possible values of a variable. A possible value range module tracks one or more boundaries for a data field stored in a computer system. The boundaries are the lowest and or highest possible values that may be stored in the data field. Thus the possible value range is a set of boundary limits for the value of a given data field. Table 1 describes one embodiment of a possible value range PVR .

The illustrated PVR keeps track of both a lower and upper or low and high boundary value for a variable with an initial value of 100. Three subsequent transactions that incrementally modify this same data field are processed. Because these transactions are uncommitted the system cannot determine with certainty the exact value of the data field. In other words in one embodiment until the system has determined whether certain pending uncommitted transactions affecting a particular variable will execute commit or not execute abort the PVR module can track the lower and upper bounds of the possible values for the particular variable. Therefore the PVR module uses the PVR to track the possible lower and upper boundary values of the data field.

Specifically when the first uncommitted transaction is accounted for the PVR for the variable would be 100 101 indicating that the lowest possible value of the variable would be 100 and the highest possible value would be 101. When the second uncommitted transaction is accounted for the PVR for the variable would then be 98 101 . If the first transaction aborted and the second transaction committed the variable with initial state of 100 would be decremented 2 without being incremented 1 yielding a result of 98. Finally when the third uncommitted transaction is accounted for the PVR for the variable would be 88 101 as illustrated. If both the second and third transactions committed but the first transaction aborted the variable would have a value of 88. On the other hand if the first transaction committed and the second and third transactions aborted then the variable would have a value of 101. There are of course other possible values including 99 TXN 1 and TXN 2 commit TXN 3 aborts 89 TXN 1 TXN 2 and TXN 3 commit 100 TXN 1 TXN 2 TXN 3 abort 91 TXN 1 and TXN 3 commit TXN 2 aborts 98 TXN 2 commits TXN 1 and TXN 3 abort and 90 TXN 3 commits TXN 1 and TXN 2 abort . The embodiments described herein generally describe a PVR module that tracks upper and lower boundary values. Other embodiments could track the possible middle boundaries values. In some embodiments the boundary values of a PVR may be inclusive and in other embodiments the boundary values may be exclusive. In other words in some embodiments the possible value range of a variable may include the boundary value and in other embodiments the possible value range of a variable excludes the boundary value.

Table 2 illustrates one embodiment of operations to track a low value and high value in other words a lower bound and an upper bound of a variable. These possible values are modified as uncommitted incremental or delta transactions are accounted for causing a change in the PVR incrementing the high value for increments and decrementing the low value for decrements and then either committed incrementing the low value for increments and decrementing the high value is decrements or aborted decrementing the high value for increments and incrementing the low value for decrements .

If for example the PVR is 88 101 and TXN 2 commits then the high value is decremented by the respective delta 2 yielding a PVR of 88 99 . As described here the delta refers to the unsigned incremental value. If TXN 3 then aborts the low value is incremented by the respective delta 10 yielding a PVR of 98 99 . If TXN 1 then commits the low value is incremented by the respective delta 1 yielding a PVR of 99 99 .

In there is one transaction T linked into the journal. Transaction Tis committed meaning that computing system has committed to write the storage locations associated with transaction Tto their respective storage locations. One of the storage locations associated with transaction Tis storage location z 428 . This storage location corresponds to disk block z at offset 428 on storage . The PVR of the data to be stored at storage location z 428 is 75 75 . In other words the lowest possible value of storage location z 428 is 75 and the highest possible value of storage location z 428 is also 75. This indicates that there are no deltas corresponding to storage location z 428 .

In a new transaction is linked into the journal. Transaction Tis in the prepared state meaning that it has been recorded in the journal but the computing system has not committed to executing transaction T. One of the storage locations affected by transaction Tis storage location z 428 . Transaction Tadds the incremental value of 25 to the value stored at location z 428 . Because the incremental change is an increment the high value of the PVR corresponding to z 428 is increased to 100 the value of the storage location in transaction Tand the incremental value in transaction T. Because the delta transaction corresponding to transaction Twould not cause a decrement to the value of the data corresponding to storage location z 428 the lowest possible value remains the same. Thus the total possible value range in is 75 100 .

In a new transaction T is linked into the journal. It is also in the prepared state meaning that the computing system has not committed to modifying the relevant storage locations. One of the storage locations affected by transaction Tis storage location z 428 . Transaction Tdecrements the value stored at z 428 by 10. Thus the low value of the PVR for the value of the data stored at z 428 is now 65. The high value remains the same. Thus the possible value range for the data stored at z 428 is 65 100 .

In transaction Tcommits meaning that the system is committed to writing the storage locations corresponding to transaction T. Because Thas been committed the PVR for the data stored at z 428 is adjusted. The high value is decremented by 10 resulting in the value of 90. The low value of the data stored at z 428 is still 65. Thus the possible value range is 65 90 .

In transaction Taborts meaning that the corresponding storage locations will not be modified by T. Because Twill no longer be executed the PVR of the data stored at z 428 is adjusted. The high value of the PVR is now 65 which is also the low value because there are no uncommitted delta transactions pending. Thus the PVR is the cumulative sum of the data value 75 and the committed delta transactions which in this example is the delta transaction 10. 

In state the PVR module receives a delta an operation and a threshold for a storage location for example a particular data block and offset stored on storage . In state the PVR module determines the current PVR for the block and the offset. In state the PVR module determines whether the delta can be applied without passing the threshold. This determination is discussed in greater detail below with reference to . If the delta cannot be applied without passing the threshold then the PVR module returns an error. In some embodiments the system may respond to the error by for example retrying after an elapse of time or some other suitable condition or allowing the delta transaction in a serial exclusive or locked mode. In state if the PVR module determines that the delta can be applied without passing the threshold the PVR module writes the delta to the journal in state .

The following is exemplary pseudocode of one embodiment of determining whether to write a delta to a journal. It will be appreciated by one skilled in the art that there are many suitable ways to determine whether to write a delta to a journal.

The following is exemplary pseudocode of one embodiment of determining whether a delta can be applied without passing a threshold. It will be appreciated by one skilled in the art that there are many suitable ways to determine whether a delta can be applied without passing a threshold.

In state transaction Tprepares. In the illustrated embodiment when a transaction prepares the associated delta is written to the journal. Because the transaction has not yet committed the value of the associated data block is not certain. If transaction Taborts the value remains 1000. If the transaction Tcommits then the value would be 1300 as the incremental value of transaction Tfor the data value is 300 and the operation type is increment. Thus in state the PVR is 1000 1300 .

In state transaction Tprepares. Transaction T if committed would decrement the value by 100. If transaction Taborted and transaction Tcommitted then the data value would be 900. Thus the lowest possible value is 900. If transaction Tcommits and transaction Taborts then the data value would be 1300 which is the highest possible value. Thus the PVR is 900 1300 . If both Tand Tcommit then the data value would be 1200. If transaction Tand transaction Tboth abort then the data value would be 1000. 

In state transaction Tattempts to prepare. Because transaction Twould cause the PVR to pass the high threshold of 1400 transaction Tis not written to the journal. Subsequently transaction Trequests an exclusive lock in order to serially handle the application of the delta which could pass a threshold. In state transaction Taborts and the PVR module adjusts the possible value range to 900 1000 . In state transaction Tattempts to prepare again. Because transaction Twould still cause the possible value range to pass the high threshold transaction Tis not allowed to prepare. Transaction Tcontinues to request the exclusive lock. In the illustrated embodiment a disallowed transaction could repeatedly check to see if it still should request an exclusive lock before it receives one. Alternatively a disallowed transaction would request an exclusive lock just once and then wait for it. One skilled in the art will appreciate the various possible implementations of requesting granting shared and exclusive locks. In state transaction Tcommits causing the possible value range to be 900 900 . Although not illustrated in some embodiments transaction Tcould check whether it still should request an exclusive lock.

In state transaction Tacquires an exclusive lock. Transaction Tthen prepares causing the possible value range to adjust to 900 1500 . In state transaction Tcommits causing the possible value range to change to 1500 1500 . In state the PVR module resets the thresholds and the initial value because a threshold has been passed. The data value is updated to the current value of 1500. In the illustrated embodiment an upper threshold is now set at 2000 and the previous upper threshold becomes a lower threshold. The PVR of the data value is now 1500 1500 . In the embodiment just described a transaction is allowed to pass a threshold after acquiring an exclusive lock. Thresholds may be defined with different characteristics that cause different handling after acquiring an exclusive lock. Some thresholds for example may merely issue an advisory notice that a threshold has been passed some may prevent a threshold from being passed and some may prevent a threshold to be passed while certain conditions are met. One skilled in the art will appreciate that there are many suitable ways to define characteristics of thresholds. Some exemplary threshold types are discussed in greater detail below with reference to .

In state transaction Tacquires a shared lock and attempts to prepare. Because transaction Tcould cause the possible value range to pass the lower threshold it is not allowed to prepare. Transaction Tthen requests an exclusive lock. In state transaction Tprepares because it would not cause the possible value range to pass either the low or high threshold. The possible value range is now 1500 1600. The resolution of transactions Tand Tare not illustrated. Although the illustrated embodiments have resolved transactions that could pass thresholds by implementing shared and exclusive locks in other embodiments there are other suitable ways to resolve these transactions such as for example rejecting such transactions.

Described below are enforcement states and state transitions corresponding to the state diagram illustrated in . As used below usage refers to a data variable with defined thresholds. Furthermore as used below grace period refers to the amount of time a threshold may be exceeded before becoming another type of threshold such as for example becoming a hard threshold after the grace period for a soft threshold has expired. A grace period is one embodiment of a condition which may be monitored to implement advisory soft and hard threshold semantics. In the described embodiment all thresholds have an associated grace period. Advisory thresholds have an infinite grace period hard thresholds have a grace period of zero and anything else is a soft threshold. It is recognized that in other embodiments one or more or even all thresholds may not have an associated grace period. As described in greater detail below with reference to the embodiments disclosed in A B C D E F and G usage refers to domain usage.

The following state transitions correspond to the state diagram. State transitions marked with an asterisk define state transitions where errors may be returned and where the action may be denied.

Although the above description relates to one embodiment of a state diagram it is recognized that other embodiments may be used.

In the illustrated embodiment the various nodes of the distributed file system may process transactions according to a global transaction system. A global transaction system in which embodiments of systems and methods described herein may be implemented is described in U.S. patent application Ser. No. 11 449 153 entitled NON BLOCKING COMMIT PROTOCOL SYSTEMS AND METHODS filed Jun. 8 2006 published as U.S. Patent Publication No. 2007 0168351 on Jul. 19 2007 which is a continuation of U.S. patent application Ser. No. 11 262 306 entitled NON BLOCKING COMMIT PROTOCOL SYSTEMS AND METHODS filed Oct. 28 2005 published as U.S. Patent Publication No. 2006 0095438 on May 4 2006 which claims priority to Application No. 60 623 843 filed Oct. 29 2004 all of which are hereby incorporated by reference herein in their entirety.

In state delta commands corresponding to transactions Tare sent from the initiator node I to participant node P. There are two delta commands corresponding to transaction T each delta command corresponding to one of the two domains to which transaction Tcorresponds. In state the initiator node I also sends delta commands corresponding to transaction Tto participant nodes Pand P. Each of the delta commands corresponds to one of the respective domains to which transaction Tcorresponds. The usage field for domain dis stored on participant P the usage field corresponding to domain dis stored on participant P. Thus delta commands are sent to both participant nodes Pand P. Because the usage field for domain dis stored on participant node P both delta commands corresponding to transaction Tare sent to participant node P. Transactions Tand Tare sent within a close period of time. Although in the illustrated embodiment the delta commands arrive in the order in which they were sent in other examples embodiments the delta commands may arrive in an order different from their sending order. Generally speaking the respective delta commands for transactions Tand T the delta commands corresponding to Tand Tmay be processed concurrently by participant nodes Pand P. Generally speaking this concurrency may be between the respective participant nodes or between the respective delta commands being executed on a particular participant node.

After participant nodes Pand Pdetermine whether or not the respective deltas can be applied without passing a threshold participant nodes Pand Psend to the initiator node I a return message indicating a Boolean response of whether the delta may be applied without passing a threshold. In state participant Psends return values for the delta commands corresponding to transaction T. The return value for the delta command corresponding to domain dis Yes indicating that the delta may be applied to domain dwithout passing a threshold. The return value for the delta command corresponding to domain dis No indicating that the delta cannot be applied without passing its threshold. In state participants Pand Preturn respective values for the delta commands corresponding to transaction T. The return value for the delta transaction corresponding to domain dis Yes indicating that the delta can be applied without passing a threshold. The return value for the delta command corresponding to domain dis No indicating that the delta cannot be applied without passing a threshold.

Because transactions Tand Tcould each respectively cause a respective usage value to pass a threshold transaction Tcould cause usage for domain dto pass a threshold transaction Tcould causes usage for domain dto pass a threshold a reorganization is executed for each transaction respectively. Thus in state a reorganization is executed corresponding to transaction T. In state a reorganization is executed corresponding to T.

In state initiator node I sends respective delta commands corresponding to transaction T. Because the usage fields for domains dand dare stored on participant P the two respective delta commands corresponding to these domains are sent to participant P. The delta command corresponding to domain dis sent to participant Pbecause the usage value corresponding to dis stored on participant P. In state participants Pand Psend the respective return values for transaction Tcorresponding to domains d d and d. The return value for the delta command corresponding to dis Yes indicating that the delta may be applied to the usage field of corresponding to dwithout passing a threshold. The return values for the delta commands corresponding to domains dand dare No indicating that the delta value cannot be applied to the respective usage fields of domains dand dwithout passing the respective thresholds for these domains. This occurs in state . In state a reorganization is executed corresponding to transaction Tbecause the thresholds corresponding to domains dand dcould be passed if the respective delta of transaction Tis applied.

The usage value of domain dis stored on disc block y of participant Pat offset 5. The initial usage value of domain dis 48.9. Because there are no deltas yet for the usage value of domain d the PVR of the usage for domain dis 48.9 48.9 . In other words the low value of the PVR corresponding to domain dis 48.9 and the high value of the PVR corresponding to domain dis 48.9. There are two thresholds defined for domain d the low threshold set to 0 and the high threshold set to 49. As mentioned above there are no deltas defined for the usage of domain d.

The usage value for domain dis stored on disc block z of participant Pat offset 428. The initial usage value is 4.55. Because there are no deltas yet defined for the usage value on domain d the PVR of the usage for domain dis 4.55 4.55 . In other words the low value of the PVR for the usage value corresponding to domain dis 4.55 and the high value of the PVR corresponding to usage for domain dis also 4.55. There are two thresholds defined for the usage value corresponding to domain d the low threshold set to 4.5 and the high threshold set to 5. As mentioned above there are no deltas yet defined for the usage value corresponding to domain d.

Table 4 illustrates one embodiment of the initial domain usage values described above and also illustrates the potential incremental affects of three transactions T T and T on the domain usage.

In the respective delta commands corresponding to transaction Tare received by participant P. There are two delta commands corresponding to the two domains dand d the domains affected by transaction T. In other words transaction Tmodifies files and or directories within domain dand d changing the usage values corresponding to these respective domains. Although in the illustrated embodiment the delta cmd Tcorresponding to domain dis processed before the delta cmd Tcorresponding to d in other embodiments the delta commands may be processed in a different order.

The delta cmd Tcorresponding to domain dincludes an operator type field set to add a delta field set to 0.3 a threshold field set to 1001 a block field set to x and an offset field set to 0. In order words the delta cmd Tcorresponding to drequests whether 0.3 may be added to the usage level corresponding to domain d which is stored on block x at offset 0 without passing the threshold 1001. Tcould cause the PVR of the usage value for domain dto be 999 999.3 . In other words if Texecutes commits then the usage of domain d in combination with any other pending transactions could be 999.3. If transaction Tdoes not execute aborts then the usage value for domain dcould be 999. Because the high value of the PVR corresponding to domain dis less than the high threshold corresponding to domain d the delta can be applied without passing a threshold. Subsequently the delta is written to the journal as described in greater detail above with reference to A and B. The in memory structures tracking the possible value range and the deltas are modified. Specifically the high value of the PVR corresponding to dis now 999.3. Furthermore the delta value 0.3 is stored in memory.

The delta cmd Tcorresponding to domain dincludes an operator type field set to add a delta field set to 0.3 a threshold field set to 49 a block field set to y and an offset field set to 5. In order words the delta cmd Tcorresponding to drequests whether 0.3 may be added to the usage level corresponding to domain d which is stored on block y at offset 5 without passing the threshold 49. Tcould cause the PVR corresponding to domain dto be 48.9 49.2 . In other words the delta corresponding to transaction Twould push the high value of the possible value range of the PVR to 49.2. Thus if transaction Texecutes commits then the usage value for domain d in combination with any other pending transactions could be 49.2. If however the transaction Tdoes not execute aborts then the usage value of domain dcould be 48.9. Because the possible high value of the PVR is greater than the value of the high threshold corresponding to domain d the delta corresponding to transaction Tcannot be applied without passing a threshold. Because transaction Tcould cause the usage value of dto pass a threshold the return value of delta cmd Tfor domain dis No. Transaction T therefore requests an exclusive lock. Because transaction Twould not have passed a threshold in domain d as discussed above the delta was applied to the data structures corresponding to domain d. Because transaction Tis now suspended until it acquires an exclusive lock the data structures corresponding to domain dare rolled back to their condition prior to transaction T. Thus the PVR for usage in domain dis 999 999 and there are no pending deltas.

In the delta commands corresponding to transaction Tare processed. As mentioned above although in the illustrated embodiment the respective delta commands are processed in the order of dand then d in other embodiments the delta commands may be processed in a different order. The delta cmd Tcorresponding to domain dincludes an operator type field set to sub a delta field set to 0.1 a threshold field set to 0 a block field set to x and an offset field set to 0. In order words the delta cmd Tcorresponding to drequests whether 0.1 may be subtracted from the usage level corresponding to domain d which is stored on block x at offset 0 without passing the threshold 0. Transaction Tcould decrease the low value of the PVR the usage value for domain dto 9.2. Thus the temporary PVR of the usage value of domain d in combination with any other transactions is 99.2 99.3 . Because the low value of the PVR corresponding to the usage field of domain dis greater than or equal to the low threshold corresponding to domain d the delta value of delta cmd Tcan be applied without crossing a threshold. Subsequently the delta is written to the journal as described in greater detail above with reference to A and B. The in memory structures tracking the possible value range and the deltas are modified. Specifically the low value of domain dis decremented by the delta value 0.1. Furthermore the delta value 0.1 is also recorded in memory as a pending delta.

The delta cmd Tcorresponding to domain dincludes the following data fields an operator type field set to sub a delta field set to 0.1 a threshold field set to 4.5 a block field set to z and an offset field set to 428. In other words the delta cmd Trequests whether 0.1 may be subtracted from the usage value corresponding to domain d which is stored on block z at offset 428 without passing the threshold 4.5. Transaction Tcould cause the PVR corresponding to domain dto be 4.45 4.55 . Because transaction Tcould cause the usage value of dto pass a threshold the return value of delta cmd Tfor domain dis No. Transaction T therefore requests an exclusive lock. Because transaction Twould not have passed a threshold in domain d as discussed above the delta was applied to the data structures corresponding to domain d. Because transaction Tis now suspended until it acquires an exclusive lock the data structures corresponding to domain dare rolled back to their condition prior to transaction T. Thus the PVR for usage in domain dis still 999 999 and there are no pending deltas.

In the PVR module reorganizes domains dand dbased on transaction T. Because transaction Tcould cause the usage value of domain dto pass the corresponding soft threshold in the upward direction transaction Tis processed with an exclusive lock and the relevant domains dand dare reorganized. During the reorganization transaction Tis allowed to commit because no hard thresholds are passed. Because transaction Twould increment the respective usage values of domains dand dby 0.3 the usage value of domain dis set to 999.3 and the usage value of domain dis set to 49.2. The respective PVR values are adjusted to reflect the respective usages for domains dand d. Because no thresholds were passed in domain d the thresholds remain the same for d. Because transaction Tcauses the usage value of domain dto pass the soft threshold for domain din the upward direction the thresholds are adjusted. The low threshold for domain dis now the soft threshold of 49 and the high threshold for domain dis now the hard threshold 50. 

Because transaction Tcould also cause one of the usage values of domains dand dto pass a threshold in domains dand dare reorganized by transaction T. During the reorganization transaction Tis allowed to commit because no hard thresholds are passed. With respect to domain d the usage value is decremented to 999.2. Because transaction Tdoes not cause the usage value of domain dto pass a threshold the thresholds for domain dremain the same. With respect to domain d the usage value is decremented to 4.45. Because the new decremented usage value passes the advisory threshold in the downward direction the thresholds are readjusted. The adjusted low threshold is now 0 and the adjusted high threshold is now the advisory threshold 4.5. 

In the delta commands corresponding to transaction Tare processed. With respect to domain d delta cmd Tincludes the following data fields an operation type field set to add a delta field set to 0.9 a threshold field set to 1001 a block field set to x and an offset field set to 0. In other words delta cmd Trequests whether 0.9 may be added to the usage value corresponding to d which is stored on block x at offset 0 without passing the threshold 1001. Thus the temporary PVR is 99.2 1000.1 . Said differently delta cmd Tcould increment the high value of the PVR corresponding to domain dto 1000.1. Because 1000.1 is less than or equal to 1001 the delta may be applied without passing a threshold. In other words because the high value of the PVR for domain dwould be less than the high threshold for d the delta may be applied. Subsequently the delta is written to the journal as described in greater detail above with reference to A and B. The in memory structures tracking the possible value range and the deltas are modified. Subsequently the high value of the PVR for Dis adjusted to 1000.1 and the delta value 0.9 is recorded in system memory.

With respect to domain d delta cmd Tincludes the following data fields an operation type field set to add a delta field set to 0.9 a threshold field set to 50 a block field set to y and an offset field set to 5. In other words delta cmd Trequests whether 0.9 may be added to the usage value corresponding to domain d which is stored on block y at offset 5 without passing the threshold 50. Transaction Tcould cause the PVR for dto be 49.2 50.1 . In other words delta cmd Tcould increment the high value of the PVR of domain dto 50.1. Because 50.1 is greater than 50 the delta cmd Tcould cause dto pass a threshold. Specifically the transaction Tcould cause the usage value of domain dto pass the high threshold which is a hard threshold. Because transaction Tcould cause the usage value of dto pass a threshold the return value of delta cmd Tfor domain dis No. 

With respect to domain d delta cmd Tincludes the following data fields an operation type field set to add a delta field set to 0.9 a threshold field set to 4.5 a block field set to z and an offset field set to 428. In other words delta cmd Trequests whether 0.9 may be added to the usage value corresponding to domain d which is stored on block z at offset 428 without passing the threshold 4.5. If delta cmd Tis applied the PVR for dwould be 4.45 5.35 . In other words the delta cmd Twould increase the high value of the PVR of domain dto 5.35. Because 5.35 is greater than 4.5 which is the high threshold the delta cmd Tcould cause the usage value of domain dto pass a threshold. Because transaction Tcould cause the usage value of dto pass a threshold the return value of delta cmd Tfor domain dis No. 

Because transaction Tcould cause the usage value of either dor dto pass a threshold transaction Trequests an exclusive lock. Because transaction Twould not have passed a threshold in domain d as discussed above the delta was applied to the data structures corresponding to domain d. Because transaction Tis now suspended until it acquires an exclusive lock the data structures corresponding to domain dare rolled back to their condition prior to transaction T. Thus the PVR for usage in domain dis 999.2 999.2 and there are no pending deltas.

In domains d d and dare reorganized because transaction Tcould cause one or more thresholds to be passed in the respective domains. Specifically because transaction Tcould cause the usage values of domains dand dto pass respective thresholds the relevant domains are reorganized. Because transaction Tcould cause the usage of domain dto pass a hard threshold transaction Tis aborted. Accordingly the usage values of domains d d and dremain the same. Similarly the PVRs and thresholds for domains d d and dalso remain the same. In the illustrated embodiment during reorganization the transaction with the exclusive lock is processed serially with respect to the different affected domains. For example transaction Tmay be processed first with respect to domain dand then domain d. Because transaction Twould not cause domain dto pass a threshold the data structures corresponding to dmay be adjusted before it is discovered that transaction Twould cause domain dto pass a hard threshold triggering an abort of transaction T. Accordingly during reorganization some data structures may be changed and then rolled back after discovering that a hard threshold is passed. Although the final states of the three respective domains are illustrated in the example above the temporary modification and subsequent readjustment are not illustrated.

In many computing environments it is desirable to manage usage of one or more resources by consumers of the resources. Resource usage management may include for example determining the types of resources to be managed tracking and accounting for the usage of these resources reporting resource usage to a system administrator and or enforcing limits on the resource usage. The types of resources accounted for may represent resources that are part of the computing environment for example physical space on a storage medium or external to the environment for example monetary value of banking or brokerage accounts . Consumers of the resources may include for example users having system accounts in the computing environment as well as processes and threads that consume computing resources.

For purposes of illustration embodiments of systems and methods for resource usage management will be described with reference to a distributed computing environment and in particular with reference to quota tracking systems and methods for a distributed file system. The systems and methods disclosed herein are not limited to these illustrative embodiments and are applicable to a wide range of implementations. For example a bank may wish to track account balances for its account holders or a securities brokerage may wish to track the trading activity of participants on an securities exchange. In an Internet context an Internet Service Provide may wish to monitor and enforce limits on bandwidth use.

The implementation of the accounting system illustrated in may suffer a disadvantage because all of the updates on any of the threads S to the resource usage U are processed by the single thread S. If the number or rate of updates becomes too large capacity of the thread Smay be insufficient to handle the updates and the thread Smay become a bottleneck for the computing system

The implementation of the accounting system advantageously may avoid or reduce the likelihood of a bottleneck because updates to resource usage on the computing system are processed by the N threads Sto Srather than by one thread as in system or a few threads. An additional advantage is that the accounting system is scalable. For example if new threads are added to or existing threads are removed from the distributed computing system the number of accounting subsystems can be increased or decreased to accommodate the change. Additionally distributed computing systems may have a very large number of users consuming resources. The number of subsystems Cin the accounting system may be suitably scaled to handle resource usage by the users.

Illustrative embodiments of systems and methods for resource usage management in the context of a quota accounting system for file system domains will now be discussed. The quota accounting system may be configured to track for example usage of storage capacity in a domain of a file system such as for example the domains d d and or dof the file system described with reference to . The storage capacity in the domain may be measured via one or more metrics including for example physical space for example megabytes on a disk drive logical space for example physical space less certain file system metadata and or number of files in the domain. In certain embodiments logical space includes physical space less redundant space used for increased data protection for example minoring parity and or other metadata .

The domain dtracked by the accounting system Cmay be associated with one or more thresholds or limits any of which may be advisory soft or hard as described above with reference to . In this example three limits are associated with the quota on the domain d. The physical limit of 2 gigabytes represents total physical space used to store the files and directories of the domain d. The file limit of 302 files represents the number of files in the domain d and the logical limit of 1.5 gigabytes represents the physical space of the domain dless certain file system overhead. Total current usage on the domain dis 1 gigabyte.

As mentioned the accounting system Cmay be organized into the constituents C where the index i runs from 0 to N 1 where N is the number of constituents 3 in . Various methods for selecting the number N of constituents will be described more fully below. In some embodiments the usage and limits of the domain are divided substantially equally among the constituents. If a quantity does not divide evenly the quantity is divided as evenly as possible subject to the restriction that no lower indexed constituent has a lower value than a higher indexed constituent. For example illustrates the division of the usage and the physical file and logical limits among the three constituents C.

If the accounting system is organized into the constituents C such as the system the transactions are distributed to the constituents C. illustrates two examples and of how the transactions may be distributed and to the three constituents C C C see columns labeled Delta Operations Example 1 and Delta Operations Example 2 . In some embodiments the transactions are distributed randomly to the constituents which advantageously causes the quota accounting processing load to be shared relatively evenly among the constituents.

It may be desirable for the quota domain accounting system to enforce limit exactness in which the usage level relative to the limits is known and in which the usage level takes account of and does not exclude pending modifications to the domain. By enforcing limit exactness an accounting system advantageously can determine whether the current usage level violates any limit and take suitable action if the limit is violated. Enforcing limit exactness however may lead to disadvantages in some incremental computing systems that utilize delta transactions. For example before the accounting system can determine the current usage the system may stop ongoing transactions and wait for pending transactions either to commit or abort. This approach however may lead to serialization of the transactions.

To avoid or reduce the likelihood of serialization certain embodiments of the accounting system use possible value ranges PVRs to track the upper and lower bounds of the possible range for the usage. The use of PVRs advantageously permits the system to process multiple concurrent delta transactions while enforcing limit exactness. In some embodiments methods similar to the method illustrated in may be used to determine whether applying a delta to a constituent usage will cause an associated PVR boundary to pass a constituent usage limit. In one embodiment pending delta transactions in which a boundary of the PVR does not pass the limit are permitted to complete because such transactions will not cause a limit violation. However if the pending delta transaction will cause a boundary of the PVR to cross a limit the delta transaction is rejected. In this case as will be further described below the accounting system may take suitable action to reorganize the constituents.

The quota domain account is organized into a number N of quota account constituents . In various embodiments the number N may be fixed at system initiation or may be dynamically selected depending on system usages and limits. The constituents are labeled QAC where index i runs from 0 to N 1. Each constituent QACtracks usage Uin a portion of the quota domain. As mentioned above the resource usage U may be divided among the constituents so that U U. Additionally each constituent QACmay have constituent limits lthat may be determined according to l l. In certain embodiments division of the resource usage U and the limits lis made as equal as possible among the constituents to balance the processing load on the constituents.

The file system may provide increased protection for the integrity of file system data such as for example by providing error detection and or error correction including for example parity protection and or mirrored protection. In some embodiments providing mirrored protection identical copies of the files are mirrored on different nodes. For example if a particular file system node fails if a media error occurs on part of a storage device for example a disk drive or if other file system problems occur a mirrored file system advantageously enables the user to have continued access to information in the file by accessing a mirrored copy of the file. In many embodiments the protection process is transparent to the user who need not and typically does not know which nodes actually provide the data. The level of protection provided by mirroring may be denoted by a protection value P which in some embodiments is an integer that reflects the number of independent mirrored versions of the file stored by the file system. For example if a file system has 3 protection the value of P equals 3 meaning 3 identical versions of each file are maintained.

The quota domain account may provide mirroring in order to increase the integrity of the quota accounting. In some embodiments each quota accounting constituent is mirrored P times. illustrates mirroring of each constituent QACin P mirrored quota accounting blocks . The quota accounting blocks are denoted as QAB where the index i runs over the number of constituents for example from 0 to N 1 and index k runs over the number of mirrors for example from 0 to P 1 . Each quota accounting block QABmay be configured to track the usage Uand the limits lin the corresponding constituent QAC. In certain embodiments the constituent limits are tracked and managed by the QAB data structures. In other embodiments the constituent limits are tracked and managed by the constituents or by the quota domain account .

As mentioned above in some embodiments the quota accounting blocks QABare configured to manage usage of more than a single resource in a constituent QAC. For example usage of resources such as physical space logical space and or the number of files may be tracked in some or all of the constituents. In such embodiments there may be a separate set of limits l for each resource usage that is tracked for example advisory soft and or hard limits for physical space advisory soft and or hard limits for logical space and so forth .

In some embodiments if nodes are added to or removed from the file system the quota domain accounting system may reorganize and utilize a new and possibly different number of constituents determined from Equation 1 . For example if 4 nodes were added to the file system illustrated in making a total of 12 nodes Equation 1 indicates there should be 4 quota constituents. Each constituent would be mirrored 3 times therefore each node in the file system would be utilized by quota accounting.

Certain embodiments of the quota accounting system provide for reorganization of the constituents based on the occurrence of various events. Quota accounting systems may provide for several events that trigger reorganization. For example if a request to modify resource usage in the quota domain causes constituent usage to pass a constituent limit for example from under to over quota or from over to under quota or if the request causes a data value s PVR boundary associated with constituent usage to pass a constituent limit then the accounting system may reorganize. Such reorganization may be appropriate because although resource usage in a particular constituent may be near a quota limit there may be adequate resources on the other constituents in the domain to support the request. By reorganizing the constituents and their associated usages and limits the accounting system advantageously will be able to more evenly balance the usage load among the constituents.

State represents the typical operating state of the accounting system in which the quota constituent module tracks resource usage in each of the constituents. System embodiments utilizing incremental delta transactions and PVR usage ranges advantageously can process multiple concurrent transactions while enforcing limit exactness.

The quota constituent module monitors the status of the quota accounting system to determine whether an event has occurred that may trigger a reorganization of the constituents. depicts three possible events shown in states and that may trigger the quota constituent module to reorganize. In other embodiments there may be fewer or greater reorganization events and the events may be different from the illustrated examples.

State has been described above and represents the event where a request for resource modification is rejected because a limit would be passed for example by resource usage and or by a PVR boundary . For example in some embodiments an incremental delta request that would cause constituent usage or a PVR value associated with constituent usage to pass a limit is rejected and an error message is communicated to the quota constituent module. In response to the error message the quota constituent module returns to state to reorganize the quota accounting system.

State represents events in which system parameters for example limits PVRs the R parameter and so forth have been changed. For example if a PVR boundary associated with resource usage is modified and the new PVR boundary is sufficiently close to or passes the nearest limit the quota constituent module may return to state and reorganize the constituents. Reorganization caused by events in state advantageously handles cases where resource usage is increasing in a quota domain and the number of constituents should increase to provide better concurrency for resource requests. For example in one embodiment the number N of constituents grows in proportion to allocated resources which beneficially provides that the file system resources allocated to the quota accounting blocks make up only a relatively small fraction of the total resources.

State represents any event in which the layout of the constituents on the nodes of the file system is suboptimal. The quota constituent module may track one or more heuristics that measure a quality factor for the constituent organization and if the quality factor is suboptimal the module causes a return to state for reorganization. In certain embodiments determination of whether the constituent layout is suboptimal is handled in state .

In some embodiments the module also determines one or more reorganize bounds that represent usage levels at which reorganization should occur. For example the reorganize bounds may comprise a pair of values B B which designate a lower B and an upper B usage value for example measured in megabytes or number of files . In this example if current resource usage passes Bfrom above or Bfrom below the quota constituent module causes a reorganization to occur. In some embodiments the reorganize bounds may be different from a limit range which may be defined as a half open interval l l having a lower limit land an upper limit l. A limit range may be defined for example by dividing the range from 0 to a suitable maximum value for each resource type for example physical logical files by all the limits applicable to that resource type including advisory soft and hard limits . In various embodiments the maximum value denoted by max value may be infinite or a suitably large value for example 2 1 bytes for a physical or logical space limit . Returning to the example shown in the domain dhas four limit ranges of 0 1001 MB 1001 MB 1500 MB 1500 MB 2000 MB and 2000 MB max value . In this example the first limit range 0 1001 MB is a closed at the lower usage boundary so that a domain having no usage 0 MB does not violate usage quotas. In some embodiments the reorganize bounds are selected to fall within a particular limit range for example l B B l. Each limit range may have different reorganize bounds. An advantage of using reorganize bounds is that the quota constituent module can if needed force a reorganization to occur at suitable resource usage values within a limit range.

In state the quota constituent module determines the total usage U by combining the constituent usages U after completion of pending incremental delta transactions. In state the module determines whether there are any disk errors such as for example errors caused by defective disk blocks in the storage that cannot be written to or read from. Advantageously these defective blocks can be identified and tracked so that no further reads or writes are performed therein. If disk errors are found the module returns to state and and recomputes the limit state reorganize bounds and usage. State is optional in some embodiments and in other embodiments it may be performed less frequently than at every constituent reorganization.

In state the quota constituent module determines the number N of constituents for example by use of an algorithm such as Equation 1 . Other algorithms for determining the number N of constituents will be described below. In state the module determines the new limit state and reorganize bounds for the number of constituents determined in state . In state the module takes suitable action if there are any new limit violations for example if the limit state is not empty . In certain embodiments the actions may include notifying the system administrator and or user of the violation for example by e mail compressing old or less frequently used files moving files to a different storage device and so forth.

In state the quota constituent module allocates the constituents to nodes of the file system. is a flow chart that illustrates in more detail an embodiment of state . In state the quota constituent module determines the availability of nodes on the file system to serve as constituents. The set of available resources on the nodes for example disks with space for allocating the quota accounting constituents will be denoted by D and the number of available nodes will be denoted by IDI. In state the quota constituent module initializes a counter Q to the number of constituents determined in state shown in . States represent an iterative block that the quota constituent module performs while the counter Q is nonzero. In state the module determines a set of nodes S that will be used for a constituent. To account for minoring the set S comprises P nodes which may be randomly chosen from the available nodes D. In other embodiments other selection criteria may be used such as for example round robin least recently used and so forth. The P nodes selected in state are removed from the set of available nodes D and the number of available nodes IDI is decremented by P.

In state the quota constituent module allocates the quota accounting domain onto the set of nodes S. For example the module may set up a quota domain accounting data structure such as described with reference to . In state the module checks whether the number of available nodes IDI is less than the protection level P. If IDI is not smaller than P there are enough remaining nodes to allocate the next constituent accounting for the protection level and the module decrements the counter Q by one in state and returns to state if the counter is nonzero. However in state if the number of available nodes IDI is smaller than the protection level P then there are too few nodes remaining to provide a separate minor on each node. In this case the quota constituent module continues in state where the set D is equated to the currently available node resources. The quota constituent module then continues in state as described above and continues to allocate quota accounting domains onto the available nodes each of which may be allocated more than one accounting domain.

When the quota accounting system is reorganized the number N of constituents may be selected based at least in part on factors including for example the number of nodes the protection level and constituent usages relative to the limit ranges. In various embodiments the quota accounting system may utilize one or more parameters to provide suitable control over how the number of constituents is determined. An example of one such parameter is the constituents per node parameter R described above with reference to Eq. 1 which can be set to provide an allocation of approximately R constituents per node.

In certain embodiments the number N of constituents is fixed until a reorganization occurs. During the reorganization the quota constituent module in state shown in determines an updated number of constituents based on current system properties. The updated number may be the same as less than or greater than the previous number of constituents.

It will be recognized that during a reorganization the number N of constituents may be selected based on a wide variety of mathematical functions heuristics goals parameters and so forth. Three example reorganize modes will now be described singleton linear and 1 or N. 

In this mode the number N of constituents is always equal to one. When reorganization occurs the new quota accounting domain may be randomly assigned to a node which may differ or be the same as the previous accounting node .

In embodiments using reorganize bounds the bounds may be set to match the limit range currently bounding the usage B land B l. is one embodiment of a graph that illustrates that the number of constituents in the singleton mode is always one regardless of the distance of the resource usage from any of the limits for example Span .

In linear mode the distance of the resource usage U from the nearest bound of the limit state l l is measured by the Span variable according to 

For example if the span size is 10 MB the current usage U 75 MB and the limit state is 20 MB 100 MB then Equation 2 indicates the Span is 2. In linear mode the number N of constituents is equal to the current Span bounded by the range 1 N for example N max min Span N 1 . is one embodiment of a graph that illustrates the number of constituents that will be selected during a linear mode reorganization as a function of the Span at the time of the reorganization. Note that since the number of constituents is held fixed at other times the graph in and is not a dynamic representation of the actual number of constituents in the quota domain accounting system at any particular Span value. to be discussed below illustrates such a dynamic representation of the number of constituents as a function of usage.

If the accounting system uses reorganize bounds the bounds are determined in the following manner in some embodiments. The bounds may be set differently based on which of the limits is nearest to the current usage U and whether changes in usage are moving current usage U toward or away from the nearest limit. In some implementations the reorganize bound in the direction of the near limit is set equal to the limit itself. A rationale for this selection is that choosing a bound with a smaller value would cause unnecessary reorganizations to occur as the limit is approached.

The reorganize bound in the direction of the far limit may be set differently depending upon whether the new number of constituents is equal to N. In some embodiments if the new number of constituents is N then the reorganize bound is set equal to the value of the far limit because more frequent reorganization will not provide additional constituents since the number of constituents is already at the maximum value N. On the other hand if the current number N of constituents is less than the maximum N the reorganize bound B may be set equal to B U N span size F where F is a tunable ratio in the range 0 1 . The parameter F represents a minimum average constituent utilization in the direction of the far limit in order to approximately double the number of constituents when reorganization occurs. For example if F is set equal to an average constituent utilization in the direction of the far limit of about 50 will result in approximately doubling the number of constituents at the next reorganization. If F is set equal to an average constituent utilization of only about 25 will result in approximately doubling the number of constituents at the next reorganization. A possible advantage of this choice for the value of the reorganize bound in the direction of the far limit is that by approximately doubling the number of constituents at a reorganization the system performance may also approximately double at least in cases where the number of constituents is a performance bottleneck. Additionally if a resource user is rapidly writing a large amount of data the user may reach the next reorganization point in about the same time it took to reach the previous reorganization point even though twice as much data is being written.

In 1 or N mode the number of constituents is 1 if the current Span is less than Nand is Notherwise. In terms of the well known ternary operator the number of constituents can be written N Span

If the accounting system uses reorganize bounds the bounds are determined in the following manner in some embodiments. The bound nearest the current usage U is selected using the algorithm for the linear mode. The bound farthest from the current usage is also selected using the linear mode algorithm if the number of constituents is equal to the maximum N. If instead the current number of constituents is 1 the far bound is determined as B U N span size which provides that reorganization will not occur until the distance from the near limit is sufficiently large to ensure that the next reorganization results in Nconstituents.

Returning to the chart in the horizontal axis measures resource usage in megabytes . The example quota accounting system includes an advisory limit at 30 and a soft limit at 5000 accordingly the limit state for this system is 30 5000 . The parameter span size equals 10. The current Span may be calculated using the span size parameter the total usage for a given snapshot in time and the current limits in the limit state 30 and 5000 . Reorganize bounds Band Bare determined according to the algorithm discussed above for the linear mode. At the top of is the snapshot at the initial time t and subsequent snapshots are displaced downward from the initial snapshot. Marked vertically along the chart at each of the times tare the current usage the Span for example determined from Eq. 2 and the number of constituents Cons . For example at initial time t the system has reorganized with a total usage of 35 1 constituent and the Span is 0.

For each snapshot the horizontal bar marked Total depicts the usage and the reorganize bounds for the total quota domain. Below the Total bar are one or more bars showing usage and reorganize bounds for each of the constituents in existence at that snapshot. The constituent bars are labeled as Con followed by a numeral indexing the constituents. For readability at times t twhere there are relatively many constituents constituent bars having identical properties have been grouped together for example Con Con at time t and further labeled with a parenthetical indicator for the number of constituents in the grouping for example x7 . Above each horizontal bar whether for Total or Con the reorganize bounds and the current usage are shown. Below each horizontal bar the distances of the current usage from the low and high reorganize bounds are shown. As can be seen in at time t the initial usage of 35 is between the lower reorganize bound 30 and the upper reorganize bound 50 . In this case the lower reorganize bound equals the value of the nearest limit the advisory limit at 30 and the upper reorganize bound can be determined using the linear mode algorithm as B U N span size F 35 1 10 55 where a minimum average constituent utilization of F has been selected for this example. The distance between the usage and the reorganize bounds is 5 to the lower bound and 20 to the upper bound . Similar calculations can be performed at each of the other snapshots using the information in the chart in .

The state of the accounting system changes from snapshot to snapshot as incremental delta transactions are received and processed by the constituents. The left side of the chart shows the delta transaction s and the node s assigned to handle the transaction s at each snapshot. For example moving from the initial state at tto the first snapshot at t constituent Con processes an incremental delta transaction increasing usage by 15 megabytes 15 . This transaction causes usage to increase from 35 to 50 and span to increase from 0 to 2. The next delta transaction 22 at time tis processed by constituent Con and causes the usage to increase to 72 which is above the upper reorganize bound at 55. Accordingly the quota constituent module causes the quota accounting domain to reorganize.

Using the linear algorithm the number of constituents after reorganization at time tis equal to 4 because the Span equal to 4 is less than the maximum number of constituents equal to 20 . The new upper reorganize bound for the total domain is 152 for example 72 4 10 . illustrates individual usages and reorganize bounds for the four constituents Con Con. As discussed above the constituent usages and bounds are divided as equally as possible among the constituents. The graph in illustrates the increase in the number of constituents from 1 to 4 at the usage level of 72.

At time t each of the four constituents processes a delta transaction that increases the total usage to 132. Usage in each constituent remains below the corresponding reorganize bound. At time t the first constituent Con receives a delta request of 5 which is sufficient to cause the usage to exceed the upper reorganize bound in the first constituent. Accordingly the quota constituent module again reorganizes the quota accounting domain this time into 10 constituents see also the graph in . At time t the ten constituents receive delta requests that can be processed without causing any constituent usage to pass a corresponding constituent bound. The total usage increases to 300.

The final illustrated delta transaction at time tis sufficient to increase usage in constituent Con above the reorganize bound so the quota constituent module causes a third reorganization at this time. The total usage is sufficiently far from the lower reorganize bound that the Span exceeds the maximum number of constituents . Accordingly the number of constituents increases to the maximum number Nrather than the Span. illustrates the increase in constituents from 10 to 20 at the third reorganization at a usage value of 304. Because the number of constituents has reached its maximum value the upper reorganize bound is set equal to the far limit which in this case is the soft limit at 5000.

Further delta transactions at times beyond tthat increase the usage will not increase the number of constituents which has reached its maximum value. If usage continues to increase and the soft limit at 5000 is approached further reorganizations will reduce the number of constituents. Near the soft limit the number of constituents may reach the minimum value of 1.

While certain embodiments of the invention have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the present invention. Accordingly the breadth and scope of the present invention should be defined in accordance with the following claims and their equivalents.

