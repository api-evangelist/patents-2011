---

title: Suspendable interrupts for processor idle management
abstract: Suspendable interrupts are described that allow a processor to remain in an idle state for a longer period of time. Each suspendable interrupt defines a maximum delay value that specifies the maximum delay software associated with the interrupt can wait between a receipt of an interrupt signal associated with the suspendable interrupt and raising the interrupt for servicing by the software. The delay value allows suspendable interrupts to be masked when a processor is placed in the idle state if they can be dealt with at a next scheduled wake time of the processor, allowing the processor to potentially remain in the idle state for a longer period of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504753&OS=08504753&RS=08504753
owner: QNX Software Systems Limited
number: 08504753
owner_city: Kanata
owner_country: CA
publication_date: 20110214
---
This application is related to concurrently filed United States Patent Application and titled Tolerant Timers for Processor Idle Management commonly owned by the applicant having application Ser. No. 13 026 837 the content of which is hereby incorporated by reference in its entirety.

The following description relates to processor idle management and in particular to the use of interrupts.

Power management in electronic devices particularly portable electronic devices is important when power resources such as battery life are limited. Processors used in electronic devices generally have two or more states in which they can operate. In a wake state the processor consumes power when executing software. In an idle state the processor performs minimal if any processing and consequently consumes less power which is useful in extending battery life. Processors may be switched between the wake and idle state for very short durations of time in an effort to conserve power when no processing tasks are required to be performed by the processor.

Operating systems OS allow multiple applications to be executed on a processor by scheduling the execution of the applications. If no applications require processing the OS may place the processor into the idle state. Before placing the processor into the idle state the OS sets a time at which the processor is to switch to the wake state. The wake time may be set by the OS based on a periodic timer or may be set based on timers requested by an application or the OS.

An interrupt can be associated with software or processing that is to be done when the interrupt occurs. Interrupts may be generated as a result of external events and as such the timing of their occurrence is unknown in advance. When an interrupt occurs and the processor is in an idle state the interrupt causes the processor to switch to the wake state to service the interrupt. depicts in a timeline the occurrence of timers T T T T as well as interrupts I I I and the associated switches between the idle state which is represented by the dotted line and wake state represented by X . In it is assumed for clarity that the processor returns to the idle state after switching to the wake state with minimal delay. As is apparent from each time a timer or an interrupt occur the processor is switched from the idle state to the wake state.

It is desirable to have interrupts that enable an increase in the amount of time a processor spends in the idle state.

In accordance with an aspect of the present disclosure there is provided method of extending a processor idle state in an electronic device the method comprising determining that the processor can be placed into an idle state setting a processor wake time based on a timer schedule masking a suspendable interrupt having a maximum delay value when a current time plus the maximum delay value occurs after the set processor wake time and placing the processor into the idle state.

In accordance with an aspect of the present disclosure there is further provided an electronic device comprising a processor executing instructions a memory storing instructions for execution by the processor the instructions when executed by the processor configuring the electronic device to provide an operating system for setting a processor wake time before the processor is placed into an idle state based on a timer schedule and placing the processor into the idle state and a suspendable interrupt control for masking a suspendable interrupt having a maximum delay value when a current time plus the maximum delay value occurs after the set processor wake time.

In accordance with an aspect of the present disclosure there is further provided a computer readable memory comprising instructions for extending a processor idle state in an electronic device the instructions comprising instructions for determining that the processor can be placed into an idle state instructions for setting a processor wake time based on a timer schedule instructions for masking a suspendable interrupt having a maximum delay value when a current time plus the maximum delay value occurs after the set processor wake time and instructions for placing the processor into the idle state.

It will be appreciated that for simplicity and clarity of illustration where considered appropriate reference numerals may be repeated among the figures to indicate corresponding or analogous elements. In addition numerous specific details are set forth in order to provide a thorough understanding of the embodiments described herein. However it will be understood by those of ordinary skill in the art that the embodiments described herein may be practiced without these specific details. In other instances well known methods procedures and components have not been described in detail so as not to obscure the embodiments described herein. Also the description is not to be considered as limiting the scope of the embodiments described herein.

In broad terms interrupts may be used in electronic devices in order to notify a piece of software such as an interrupt handler of the occurrence of an external event. The software may then service the interrupt by performing some associated processing as required. If an interrupt occurs while a processor is executing instructions for some software the execution may be pre empted and switched to the software associated with the interrupt. If the processor is in the idle state it may be switched to a wake state and the software associated with the interrupt can be executed. The forgoing description does not consider many well known details including different priority levels that may be used in determining whether currently executing software should be halted if an interrupt is received. Some details of interrupts that are well known are omitted from the current description in order to highlight features of suspendable interrupts.

An interrupt signal arrives at an interrupt controller which is typically implemented in a hardware component and may form part of the processor or may be separate from the processor. The interrupt controller receives the interrupt signal and generates an interrupt request. The interrupt request notifies the operating system OS that the interrupt has occurred. Once the interrupt has been raised it may be handled by software associated with the interrupt.

If an interrupt request is raised while the processor is in an idle state the processor is placed in a wake state and the interrupt request is serviced as appropriate. That is an associated interrupt handler may be invoked for further processing. It is possible to associate a mask state with an interrupt. The mask state may be used to temporarily ignore an interrupt signal. The mask state of an interrupt may be either masked or unmasked. When an interrupt is unmasked and the associated interrupt signal is received at the interrupt controller it is processed as described above that is the processor is placed in the wake state if previously idle the interrupt request is raised and serviced. When the interrupt is masked and the interrupt signal is received the interrupt controller does not raise the interrupt request until it is unmasked at which time it is serviced as described above. As such if the interrupt signal associated with a masked interrupt occurs while the processor is in the idle state the processor is not switched to the wake state in order to service the interrupt. Rather the processor remains in the idle state until it is placed in the wake state due to some other action such as execution of a scheduled timer. Once the processor is in the wake state the OS may unmask any masked interrupts and if the associated interrupt signal has been received the associated interrupt requests are raised and serviced.

As described further herein suspendable interrupts may be used in order to maintain the processor in the idle state for a longer period of time while still allowing interrupt requests to be serviced in an appropriate amount of time. The appropriate amount of time for servicing an interrupt request can vary and may depend on among other factors what the interrupt is used for. A suspendable interrupt is associated with a maximum delay value which is a maximum time that the software associated with the suspendable interrupt can wait between the interrupt signal for the interrupt being received and the interrupt being raised for servicing. The suspendable interrupt can be associated with its maximum delay value in various ways. For example the OS can provide an application programming interface API that allows software to be attached to or associated with a particular interrupt signal. The software attached to the interrupt signal through the suspendable interrupt may specify an interrupt handler that should be executed when the associated interrupt request is raised. The API interface in addition to allowing the interrupt handler to be specified also allows the software to specify the maximum delay value of the suspendable interrupt. If other software is already associated with the suspendable interrupt and so a maximum delay value already specified the OS may determine if the requested maximum delay value is less then the current maximum delay value and if it is the maximum delay value can be changed to the smaller value in order to satisfy the requirements of all software associated with the suspendable interrupt. Furthermore the API can allow the maximum delay value associated with a suspendable interrupt to be changed. By providing a maximum delay value it is possible to suspend the raising of the suspendable interrupt and allow the processor to remain in an idle state for a longer period of time. If the processor is in the idle state while the interrupt signal is received it may not be necessary to place the processor in the wake state immediately. Rather if the processor will be placed in the wake state for another reason such as expiration of a timer within an amount of time less than the maximum delay value the raising of the suspendable interrupt may be suspend until the processor is placed in the wake state. However it is not possible to determine if the processor will be placed in the wake state within the maximum delay value when the interrupt signal is received since the calculations required to do so would require placing the processor in the wake state. As such the mask states of suspendable interrupts are set as either masked or unmasked before the processor is placed in the idle state.

Each suspendable interrupt is associated with an interrupt signal . In particular suspendable interrupt I is associated with interrupt IS and particular suspendable interrupt I is associated with interrupt IS. The suspendable interrupt Iis not masked and so when a corresponding interrupt signal IS is received as indicated by arrow while the processor is in the idle state the interrupt request for suspendable interrupt Iis raised and the processor is placed in the wake state in order to service the suspendable interrupt I. The suspendable interrupt Iis masked depicted by cross hatching and so when the interrupt signal IS is received as indicated by arrow while the processor is in the idle state the interrupt request for suspendable interrupt Iis masked until the processor is placed in the wake state as a result of timer expiring.

As depicted even when the interrupt signal IS is received at a time represented by arrow that would allow it to be suspended until the processor is placed in the wake state due to timer expiring within the maximum delay value the interrupt request for suspendable interrupt Iis still raised placing the processor in the wake state in order to service the suspendable interrupt I.

As described further herein prior to placing the processor into the idle state the OS determines whether a suspendable interrupt should be masked until the next scheduled wake event. The masking of the suspendable interrupts is done on a worst case scenario assuming that the interrupt signal associated with the suspendable interrupt is received immediately after the processor is placed in the idle state. If it is possible to suspend raising the interrupt request for the worst case scenario the suspendable interrupt is masked until the next scheduled wake event otherwise the suspendable interrupt is unmasked.

The suspendable interrupt table depicts three suspendable interrupts and their associated maximum delay values. The mask state of each of the suspendable interrupts is based on the processor wake time from the scheduled timers of table . Since the processor wake time is 0.4 assuming that the current time is 0 the current time plus the maximum delay value of both suspendable interrupts and occur after the processor wake time of 0.4. As such both suspendable interrupts and are masked. The current time plus the maximum delay value of suspendable interrupt is 0.3 which occurs before the processor wake time. As such the suspendable interrupt remains unmasked.

If it is determined that the current time plus the maximum delay value occurs before the processor wake time No at the suspendable interrupt is unmasked and the processor placed in the idle state. At some time before the processor wake time the interrupt signal associated with the suspendable interrupts may be received . Since the suspendable interrupt is unmasked the processor is placed in the wake state if the interrupt signal was received at . Once in the wake state the interrupt request for the suspendable interrupt is raised and serviced .

The description of the timers and suspendable interrupts has described placing the processor into an idle state when there is no software requiring processing. The time and time ranges described with regards to the timers and interrupts has been described using an arbitrary time scale for clarity of the description. It is contemplated that the actual time scales used by timers and the maximum delay value of the suspendable interrupts will vary based on one or more of the precision of the timing provided by the timer chip the precision of the processor or electronic device the precision of time within the OS and the requirements of the software associated with the suspendable interrupt.

 Software has been described generally for clarity of the description with regards to the functioning of the suspendable interrupts. Software is intended to include one or more applications running on the OS the OS itself a portion of an application or a portion of the OS including the kernel or scheduler or other OS components or other elements of the electronic device that can be executed on the processor .

Individual applications portions of the applications or portions of the OS may execute in a separate thread or process. Since a processor may only process a limited number of threads or processes at a time a component of the OS typically forming part of the kernel and referred to as a scheduler is responsible for scheduling which process or thread will execute on the processor at a particular time. The scheduler may also be responsible for setting the processor wake time for the processor and placing the processor into the idle state. When the processor returns to the wake state from the idle state the scheduler determines which of the processes or threads will be executed including checking to determine if any suspendable interrupts occurred that need to be raised and handled.

A processor may comprise one or more processing cores that can each execute a process or thread independently from the other cores. A scheduler may assign a process or thread to execute on any of the processing cores at any point in the execution of the process or thread. Alternatively a process or thread may be assigned to always execute on the same processing core. The scheduler may place the individual processing cores into the idle state independently.

Although the processor has been described as having two states namely a wake state and an idle state the tolerant timers may be applied to processor which may operate in more than two states. Furthermore the suspendable interrupts may be combined with one or more types of interrupts provided by the OS. Regardless of the type of interrupt the scheduler may determine and set based on one or more parameters such as for example a power mode of the electronic device the processor wake time and the mask state of interrupts based on available interrupt information.

Although the above discloses example methods apparatus including among other components software executed on hardware it should be noted that such methods and apparatus are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in any combination of hardware software and or firmware. Accordingly while the following describes example methods and apparatus persons having ordinary skill in the art will readily appreciate that the examples provided are not the only way to implement such methods and apparatus.

