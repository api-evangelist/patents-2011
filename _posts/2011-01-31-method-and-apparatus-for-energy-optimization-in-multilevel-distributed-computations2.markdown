---

title: Method and apparatus for energy optimization in multi-level distributed computations
abstract: An approach is provided for providing energy optimization in multi-level distributed computations. A distributed computation energy optimization platform determines energy availability information associated with at least one level of a computational architecture executing at least portion of one computation closure. The distributed computation energy optimization platform also determines energy consumption information associated with the at least portion of one computation closure. The distributed computation energy optimization platform further processes and/or facilitates a processing of the energy availability information, the energy consumption information, or a combination thereof to determine whether to migrate the at least portion of one computation closure to at least one other level of the computational architecture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552234&OS=09552234&RS=09552234
owner: Nokia Technologies Oy
number: 09552234
owner_city: Espoo
owner_country: FI
publication_date: 20110131
---
Mobile devices with various methods of connectivity are now for many people becoming the primary gateway to the internet and also a major storage point for personal information. This is in addition to the normal range of personal computers and furthermore sensor devices plus internet based providers. Combining these devices together and lately the applications and the information stored by those applications is a major challenge of interoperability. This can be achieved through numerous individual and personal information spaces in which persons groups of persons etc. can place share interact and manipulate or program devices to automatically perform the planning interaction and manipulation of webs of information with their own locally agreed semantics without necessarily conforming to an unobtainable global whole.

Furthermore in addition to information the information spaces may be combined with webs of shared and interactive computations or computation spaces so that the devices having connectivity to the computation spaces can have the information in the information space manipulated within the computation space environment and the results delivered to the device rather than the whole process being performed locally in the device. It is noted that such computation spaces may consist of connectivity between devices from devices to network infrastructure to distributed information spaces so that computations can be executed where enough computational elements are available. These combined information spaces and computation spaces often referred to as computation clouds are extensions of the Giant Global Graph in which one can apply semantics and reasoning at a local level.

In one example clouds are working spaces respectively embedded with distributed information and computation infrastructures spanned around computers information appliances processing devices and sensors that allow people to work efficiently through access to information and computations from computers or other devices. An information space or a computation space can be rendered by the computation devices physically presented as heterogeneous networks wired and wireless . However despite the fact that information and computation presented by the respective spaces can be distributed with different granularity still there are challenges in certain example implementations to achieve scalable high context information processing within such heterogeneous environments. For example in various implementations due to distributed nature of the cloud exchange of data information and computation elements e.g. computation closures among distributed devices involved in a cloud infrastructure may require excessive amount of resources e.g. process time process power storage space etc. . In various example circumstances to enhance the information processing power of a device and reduce the processing cost one might consider minimizing or at least significantly improving exchange of data information and computations among the distributed devices. In various example embodiments we can minimize or improve or significantly improve data distribution within a computational architecture by providing multi level distributed computations such that the data can be migrated to the most cost effective computation level with minimized or improved cost. However various computations may have different levels of energy consumption security enforcement requirements privacy policies etc. One of the very important functionalities for optimizing computations is to detect identify and determine optimized energy consumption and energy cost for each computation. The recognition of factors such as computation capabilities energy availability and energy cost at every computation environment and also energy consumption for each computation can provide guidelines for determining optimized and cost effective strategies for computation distribution and distribution.

Therefore there is a need for an approach for providing energy optimization in multi level distributed computations.

According to one embodiment a method comprises determining energy availability information associated with at least one level of a computational architecture executing at least portion of one computation closure. The method also comprises determining energy consumption information associated with the at least portion of one computation closure. The method further comprises processing and or facilitating a processing of the energy availability information the energy consumption information or a combination thereof to determine whether to migrate the at least portion of one computation closure to at least one other level of the computational architecture.

According to another embodiment an apparatus comprises at least one processor and at least one memory including computer program code the at least one memory and the computer program code configured to with the at least one processor cause at least in part the apparatus to determine energy availability information associated with at least one level of a computational architecture executing at least portion of one computation closure. The apparatus is also caused to determine energy consumption information associated with the at least portion of one computation closure. The apparatus is further caused to process and or facilitate a processing of the energy availability information the energy consumption information or a combination thereof to determine whether to migrate the at least portion of one computation closure to at least one other level of the computational architecture.

According to another embodiment a computer readable storage medium carries one or more sequences of one or more instructions which when executed by one or more processors cause at least in part an apparatus to determine energy availability information associated with at least one level of a computational architecture executing at least portion of one computation closure. The apparatus is also caused to determine energy consumption information associated with the at least portion of one computation closure. The apparatus is further caused to process and or facilitate a processing of the energy availability information the energy consumption information or a combination thereof to determine whether to migrate the at least portion of one computation closure to at least one other level of the computational architecture.

According to another embodiment an apparatus comprises means for determining energy availability information associated with at least one level of a computational architecture executing at least portion of one computation closure. The apparatus also comprises means for determining energy consumption information associated with the at least portion of one computation closure. The apparatus further comprises means for processing and or facilitating a processing of the energy availability information the energy consumption information or a combination thereof to determine whether to migrate the at least portion of one computation closure to at least one other level of the computational architecture.

In addition for various example embodiments of the invention the following is applicable a method comprising facilitating a processing of and or processing 1 data and or 2 information and or 3 at least one signal the 1 data and or 2 information and or 3 at least one signal based at least in part on or derived at least in part from any one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising facilitating access to at least one interface configured to allow access to at least one service the at least one service configured to perform any one or any combination of network or service provider methods or processes disclosed in this application.

For various example embodiments of the invention the following is also applicable a method comprising facilitating creating and or facilitating modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising creating and or modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

In various example embodiments the methods or processes can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.

Still other aspects features and advantages of the invention are readily apparent from the following detailed description simply by illustrating a number of particular embodiments and implementations including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments and its several details can be modified in various obvious respects all without departing from the spirit and scope of the invention. Accordingly the drawings and description are to be regarded as illustrative in nature and not as restrictive.

Examples of a method apparatus and computer program for providing energy optimization in multi level distributed computations are disclosed. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent however to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.

As used herein the term computation closure identifies a particular computation procedure together with relations and communications among various processes including passing arguments sharing process results flow of data and process results etc. The computation closures e.g. a granular reflective set of instructions data and or related execution context or state provide the capability of slicing of computations for processes and transmitting the computation slices between devices infrastructures and information sources.

As used herein the term cloud refers to an aggregated set of information and computation closures from different sources. This multi sourcing is very flexible since it accounts and relies on the observation that the same piece of information or computation can come from different sources. In one embodiment information and computations within the cloud are represented using Semantic Web standards such as Resource Description Framework RDF RDF Schema RDFS OWL Web Ontology Language FOAF Friend of a Friend ontology rule sets in RuleML Rule Markup Language etc. Furthermore as used herein RDF refers to a family of World Wide Web Consortium W3C specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information and computations that is implemented in web resources using a variety of syntax formats. Although various embodiments are described with respect to clouds it is contemplated that the approach described herein may be used with other structures and conceptual description methods used to create distributed models of information and computations.

The basic concept of cloud computing technology provides access to distributed computations for various devices within the scope of the cloud in such a way that the distributed nature of the computations is hidden from users and it appears to a user as if all the computations are performed on the same device. The cloud computing also enables a user to have control over computation distribution by transferring computations between devices that the user has access to. For example a user may want to transfer computations among work devices home devices and portable devices other private and public devices etc. Current technologies enable a user of a mobile device to manipulate contexts such as data and information via the elements of a user interface of their user equipment. However distribution of computations and processes related to or acting on the data and information within the cloud is typically controlled by the system. In other words a cloud in general does not provide a user e.g. an owner of a collection of information distributed over the information space with the ability to control distribution of related computations and processes of for instance applications acting on the information. For example a contact management application that processes contact information distributed within one or more clouds generally executes on a single device e.g. with all processes and computations of the application also executing on the same device to operate on the distributed information. In some cases e.g. when computations are complex the data set is large etc. providing a means to also distribute the related computations in addition to the information is advantageous.

This goal is achieved by introduction of the capability to construct distribute and aggregate computations as well as their related data. More specifically to enable a user of a cloud e.g. a mobile device user an application developer etc. who connects to the cloud via one or more devices to distribute computations among the one or more user devices or other devices with access to the cloud each computation is deconstructed to its basic or primitive processes or computation closures. Once a computation is divided into its primitive computation closures the processes within or represented by each closure may be executed in a distributed fashion and the processing results can be collected and aggregated into the result of the execution of the initial overall computation.

In one embodiment a computational architecture consists of a plurality of architectural levels including a device level and infrastructure level and a cloud computing level. A device from the device level has connectivity to the cloud computing level via one or more infrastructure levels wherein each infrastructure level may consist of layers and components such as backbones routers base stations etc. Typically the computation closures associated with a process related to a device from device level are defined constructed and executed within the cloud computing level which may have various levels of distribution as well. However the components of the infrastructure levels may be equipped with various resources e.g. processing environments storage spaces etc. that can be utilized for the execution of computation closures associated with a process. Since the infrastructure level functions as an interface between the device level and the cloud computing level if the computation closures can be executed in the infrastructure level there will be no need for the computation closures to be migrated to the cloud computing level that may very well require excessive use of resources. Therefore execution of computation closures associated with a process related to a device at the infrastructure level can provide services to device users in a more efficient manner. However resources such as processing environments storages etc. within the multi level architectural environment of device level infrastructure level and cloud level each may differ in configuration availability processing power storage volume communication capability energy availability level etc. Furthermore execution of computation closures may require varying levels of energy depending on for example the computation complexity of the closures. Because of this diversity considering energy related factors such as energy availability of computation environments and energy consumption of computations in distribution of workload across components of an architectural level or among different levels may become a very critical issue and can significantly affect the total computation cost and productivity.

To address this problem a system of introduces the capability to provide energy optimization in multi level distributed computations. A computational architecture environment consists of different levels of proactive computational elements available for various levels of the computational architecture such as device level infrastructure level and cloud computing level. Since these computational elements provide various levels of functionality for each of the levels providing different levels of distribution of the computational closures within the computational architecture enables the execution of the computational closures after the least required level of distribution. However a very important functionality for optimizing execution of computational closures are to detect identify and determine energy availability and cost including what types and levels of closure capabilities and energy availabilities exist at each part of the multi level computational levels and components and what is the efficient distribution of closures considering their energy consumption cost.

In one embodiment different components of each architectural level support different types of closures with different energy requirements. Each component e.g. infrastructure component node may have a number of previously created entities closures and links for the computation of the closures such as connectors between closures multiple branches interaction points rules etc. that can significantly affect the amount of energy a computation may consume. Furthermore the computations can be requested to be transferred and or expanded from one component to another or from an architectural level to another e.g. from infrastructure to cloud .

In one embodiment a cloud may include a superset of closure elements e.g. closure primitives while the infrastructure or device level components may have subsets of and therefore the cloud may be capable of supporting computational closures more effectively compared to the infrastructure or device levels. Additionally a cloud may have access to a wider collection of energy resources from different sources while the energy resources accessible by an infrastructure may be more limited.

In one embodiment device setup at various architectural levels such as battery consumption quality of service QOS settings class of service COS settings priority settings etc. may affect direction and method of computational closure distribution as different setups may lead to different situations of energy resource availability and requirement. Additionally energy cost can be indirectly affected by other features of architectural levels such as energy consumption strategies privacy settings security enforcements etc. On the other hand cost optimization between different architectural levels and components can be achieved by different levels of computation distribution.

In one embodiment certain amount of computation functionality can be transferred from device level to infrastructure level or further to cloud level depending on the available capabilities at each level. For example for computations associated with a battery operated laptop computer it may be more beneficial if parts of the computations are performed at infrastructure level. However a mobile device plugged to a power socket may receive parts of the computations from the infrastructure if energy cost for the mobile device is lower than the energy cost for the infrastructure. Situations may change when the mobile device is unplugged from the adapter and is back to battery operation mode.

In another embodiment when an infrastructure node has a limited energy budget the computations may be transferred to a next nearest node with available energy supply where computation can continue and redistributed to the cloud level if there is no infrastructure node with sufficient energy available. It is noted that different device setups limits and thresholds may change the direction of computation closure distribution as resource availability can be different for example depending on the instant battery energy or power down cost etc. Furthermore energy cost can be different and can be indirectly affected by other features of device infrastructure or cloud level such as load balancing privacy security enforcements etc.

In one embodiment operations can be performed to determine and compare energy consumption of computation closure processes between devices and infrastructures and between infrastructures and clouds. It can also be determined where it is more cost effective to transfer computation closures to what the energy operational range for each computation closure is taking into account other capabilities relevant for the computation such as security privacy levels and rules other energy issues like battery vs. main power plug connection etc. what the minimum and the maximum threshold values for remote local computations are etc.

In one embodiment the cost functions for energy and operational range may determine that to what extent other capabilities can be taken into account. For example added security cost functions and privacy cost functions can be taken into account when they are within defined operational range. Alternatively energy cost function may exceed or gets cut beyond upper limit of the operational range cost function.

As shown in the system comprises a set of user equipments UEs having connectivity to distributed computation energy optimization platform via a communication network . By way of example the communication network of system includes one or more networks such as a data network not shown a wireless network not shown a telephony network not shown or any combination thereof. It is contemplated that the data network may be any local area network LAN metropolitan area network MAN wide area network WAN a public data network e.g. the Internet short range wireless network or any other suitable packet switched network such as a commercially owned proprietary packet switched network e.g. a proprietary cable or fiber optic network and the like or any combination thereof. In addition the wireless network may be for example a cellular network and may employ various technologies including enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. worldwide interoperability for microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi wireless LAN WLAN Bluetooth Internet Protocol IP data casting satellite mobile ad hoc network MANET and the like or any combination thereof.

The UEs are any type of mobile terminal fixed terminal or portable terminal including a mobile handset station unit device multimedia computer multimedia tablet Internet node communicator desktop computer laptop computer notebook computer netbook computer tablet computer personal communication system PCS device personal navigation device personal digital assistants PDAs audio video player digital camera camcorder positioning device television receiver radio broadcast receiver electronic book device game device or any combination thereof including the accessories and peripherals of these devices or any combination thereof. It is also contemplated that the UE can support any type of interface to the user such as wearable circuitry etc. .

In one embodiment the UEs are respectively equipped with one or more user interfaces UI . Each UI may consist of several UI elements not shown at any time depending on the service that is being used. UI elements may be icons representing user contexts such as information e.g. music information contact information video information etc. functions e.g. setup search etc. and or processes e.g. download play edit save etc. . These contexts may require certain sets of media dependent computational closures which may affect the service for example the bit error rate etc. Additionally each UI element may be bound to a context process by granular distribution. In one embodiment granular distribution enables processes to be implicitly or explicitly migrated between devices computation clouds and other infrastructure.

In one embodiment process distribution can be initiated for example by means of unicast e.g. to just another device or multicast e.g. to multiple other devices . For example one UE may communicate with many infrastructures or many components of many infrastructures while many nodes of infrastructures may communicate with multiple clouds. Additionally process distribution may be triggered via gesture recognition wherein the user preselects a particular set of UI elements and makes a gesture to simulate pouring the selected UE elements from one device to another. In other embodiments process distribution may be initiated automatically without direct user involvement and based on default setup by the manufacturer of the UE previous setup by the user of the UE default setup in an application activated on or associated with a UE or a combination thereof.

As seen in a user of UEs may own use or otherwise have access to various pieces of information and computations distributed over one or more computation clouds in information stores and computation stores where each of the one or more computation spaces include multiple sets of one or more computation closures. In one embodiment the user may be an application developer that uses a UE to connect to the infrastructure and the cloud not only for accessing the services provided for end users but also for activities such as developing distributing processing and aggregating various computations.

In one embodiment the communication network consists of one or more infrastructures wherein each infrastructure is a designed communication system including multiple components . The components include backbones routers switches wireless access points access methods protocols etc. used for communication within the communication network or between communication network and other networks.

In one embodiment the distributed computation energy optimization platform controls the distribution of computations associated with UEs to other components or levels of the computational architecture including the infrastructure level within the environment of the communication network and the cloud level based on energy availability associated with different architectural levels and energy consumption requirements of computations.

In one embodiment computation distribution energy optimization may be initiated by the user or based on a background activity for example by triggering a sequence of computation closures which in turn support distribution process. Prior to computation distribution the capabilities including the energy resources available for performing the computations are evaluated. If capabilities of an architectural level are not satisfactory or changes in capabilities are found the evaluation process will continue until proper capabilities become available. The capabilities may be found in the same or other levels of the computational architecture and the computation closure execution will be performed at the level where available capabilities are found.

In another embodiment network components may provide different levels of functionality. For example some components may provide static computational closures while others may provide dynamic computational closures. As used herein static computational closures are closures with predetermined configurations which in return may require a predefined amount of energy for execution while dynamic computational closures are closures that may function differently based on dynamic factors such as time traffic load type or amount of available energy resource etc. A dynamic computation closure may adjust itself based on the dynamic factors by modifying parameters such as the amount of reserved resources. For example a dynamic computation closure may downgrade itself in order to consume lower amount of energy at the times of low energy availability.

In one embodiment the amount and type of available energy resources at a component of the infrastructure may or may not be aligned with the required energy by computation closures of UE through a one to one mapping. This means that the component may need to locate request further energy resources from current or next layer or level of the computational architecture. In other words if the energy resources between a process and its processing environment are not directly aligned the processing environment may expand its resources for dynamic closures or request additional resources from other components for static closures or a combination thereof. In one embodiment if neither the direct alignment succeeds nor additional resources found the setup may be aligned with lower energy requirements. The requirements may be lowered for example by dropping part of the computational components reducing media requirements e.g. reduction of multimedia to voice only or decreasing speed requirements substituting complex computations with more primitive computations that may produce less accurate but accurate enough for user s needs results. Additionally the satisfaction threshold may be lowered with service provider and user s agreement so that a lower level of computation results setup can be considered as satisfactory.

In one embodiment the computational closures available in multiple levels of device level infrastructure level and cloud level are either aligned meaning that all the computational closures are available in every level or a super set of all computational closures is available at cloud level while each lower level has access to a sub set of the computational closures from its higher level for example infrastructure level computational closures may be a sub set of the closures of cloud level and device level closures a sub set of the infrastructure level closures. Additionally levels of the computational architecture may have sets of functionally equivalent computational closures in the sense that they perform the same process and produce the same results with different levels of accuracy in return for different levels of energy consumption. For example a high resolution video providing set of computation closures may have equivalent sets of computation closures that produce the same video output with lower levels of resolution and lower levels of energy consumption. When configuring a UE the user may select an option for receiving lower levels of resolution in energy restricted occasions e.g. low battery.

By way of example the UEs and the distributed computation energy optimization platform communicate with each other and other components of the communication network using well known new or still developing protocols. In this context a protocol includes a set of rules defining how the network nodes within the communication network interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node from generating and receiving physical signals of various types to selecting a link for transferring those signals to the format of information indicated by those signals to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection OSI Reference Model.

Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises 1 header information associated with a particular protocol and 2 payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols the packet includes 3 trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet its destination the length of the payload and other properties used by the protocol. Often the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks such as the Internet typically include a physical layer 1 header a data link layer 2 header an internetwork layer 3 header and a transport layer 4 header and various application layer 5 layer 6 and layer 7 headers as defined by the OSI Reference Model.

In one embodiment energy availability monitoring module of the distributed computation energy optimization platform determines energy availability information associated with respective levels of a computational architecture wherein the respective levels include at least in part a device level a infrastructure level and a cloud computation level per step of . The determined energy availability can be utilized for deciding at which level each computation should be executed. In one embodiment the energy availability monitoring module may determine energy availability prior to the start of process distribution. In other embodiments the energy availability monitoring module may periodically e.g. based on an initial setup determine energy availability information associated with different levels of the computational architecture store the determined data in storage in information stores of clouds or a combination thereof and retrieve reuse the stored data when needed. The energy availability monitoring module may determine and store the energy availability in Resource Description Framework RDF format.

In one embodiment energy consumption calculator of the distributed computation energy optimization platform determines energy consumption information associated with respective computation closures that are going to be executed on a computational architecture per step of . The determined energy consumption may depend on various factors such as computation complexity and the processing power required for the computation the amount of other resources that the computation consumes e.g. memory space etc. Similar to energy availability energy consumption information can also be utilized for deciding at which level each computation should be executed. In one embodiment the energy consumption calculator may determine energy consumption prior to the start of process distribution. In other embodiments the energy consumption calculator may periodically e.g. based on an initial setup determine energy consumption data associated with different sets of computation closures associated with processes store the determined data in storage in information stores of clouds or a combination thereof and retrieve reuse the stored data when needed. The energy consumption calculator may determine and store the energy consumption in Resource Description Framework RDF format.

In one embodiment as per step of the energy information analysis module processes analyzes or facilitates processing or analyzing of the energy availability information from step and the energy consumption information from step in order to determine an optimum distribution plan for distributing the computation closures among the levels of computational architecture by the migration module so that for example a balance between local and remote computational levels or any other strategic goals set by users manufacturers service providers etc. can be achieved.

It is noted that determining computation distribution strategies may depend on factors other than energy such as computational capabilities of various components of architectural levels and of the computation closures. In one embodiment per step of the capability analysis module determines one or more capability parameters associated with the computation closures the level of the computational architecture at least one other level of the computational architecture or a combination thereof. The one or more capability parameters include at least in part one or more energy parameters one or more security parameters one or more privacy parameters or a combination thereof. The determined capabilities can be utilized by the migration module for deciding at which level of the computational architecture each computation should be executed. In one embodiment the capability analysis module may determine closure capabilities following the start of process distribution. In other embodiments the capability analysis module may periodically e.g. based on an initial setup determine closure capability data associated with different levels of the computational architecture store the determined data in storage in information stores of clouds or a combination thereof and retrieve reuse the stored data when needed. The capability analysis module may determine and store the closure capabilities in Resource Description Framework RDF format.

In one embodiment per step of the emulator determines to cause at least in part an emulation of the at least portion of one computation closure for the current or next available level of computational architecture. The emulator generates a functional duplicate of the computation closures for the target level of the computational architecture in order to determine the amount of resources e.g. energy consumption for the computational closures on the specific level of computational architecture. For example if the migration module determines a level of computational architecture or a component of a level of the computational architecture with sufficient available energy to execute a given set of computation closures the emulator can provide an emulation of the given set of computation closures that is tailored to the configuration of the determined level or component of computational architecture and therefore is executable on the determined level or component .

In one embodiment as shown per step of the cost function provider processes and or facilitates processing of the one or more parameters such as energy availability energy consumption and capability information determined in previous steps of to determine a cost value for the computation closures. The cost functions may be defined by device manufacturers distributed system management service providers or a combination thereof. One or more cost functions may be assigned to each architectural level or to every component of each architectural level. Furthermore definition of a cost function may take into consideration various factors affecting the cost of computations on a certain component or an architectural level such as energy consumption energy cost privacy and or security enforcement measures processing power speed etc. The determined cost can be utilized by the migration module for deciding at which level of the computational architecture each computation should be executed.

In one embodiment as per step of the energy information analysis module determines whether the determined cost by cost function provider in step is affordable for the current level of computational architecture associated or going to be associated with the computation closures. The determination of affordability may include determining whether the available energy at the architectural level is sufficient for the energy consumption level of the computation closures. The determination may also include determining by the energy availability monitoring module whether any changes in energy availability information has occurred. In one embodiment if changes of energy availability have occurred the energy information analysis module utilizes the change information for processing the energy availability information energy consumption information or a combination thereof. Subsequently if the available energy resources are sufficient for the consumption per step of migration module transfers the computation closures to the computational architecture level with sufficient energy available.

In one embodiment if the current computational level does not have enough capability for the execution of computation closures per step the closure substitution module determines at least one other computation closure that is similar or substantially similar to the computation closures and causes at least in part presentation of the at least one other computation closure as a substitute for the at least portion of one computation closure. It is noted that similarity among computation closures may for example include similar input and output with a different e.g. simpler processes for getting to output from the input.

In one embodiment presentation of the at least one other computation closure is further based at least in part on whether the at least one other computation closure is associated with other energy consumption information that is less than the energy consumption information associated with the at least computation closure. The execution of the at least one other computation closure may produce a result with the same or lower output quality with lower energy consumption compared to the initial closure it substituted. The closure substitution module may store the determined similar computation closures in storage in computation stores or anywhere else throughout the various levels of computational architecture. If a similar computation closure is determined per step the closure substitution module substitutes the determined closures for the initial closures and the process of continues from step to determine energy consumption for the new closures by the energy consumption calculator . In one embodiment presentation of the at least one other computation closure is further based at least in part on whether the at least one other computation closure is associated with other energy consumption information that is less than the energy consumption information associated with the at least computation closure.

In one embodiment if no similar computation closure is determined by the closure substitution module per step of the energy availability monitoring module determines energy availability information associated with at least one other level of a computational architecture. This is to determine whether there is at least one other level of computational architecture that is a suitable candidate and has sufficient available energy resources for the execution of computation closures. The process of evaluation of the energy availability at the new level of computational architecture by the energy availability monitoring module will continue from step .

In one embodiment the energy consumption calculator generates energy consumption information based at least in part on a functional flow of the computation closures determined by the functional flow analysis module . The functional flow analysis module determines functional flow information of the respective levels including a device level a infrastructure level and a cloud computation level one or more components of the respective levels or a combination thereof with respect to at least one set of one or more computation closures wherein the at least one set of one or more computation closures may be a set of computations associated with a process that is going to be executed in a distributed environment. The functional flow can be utilized to identify the computational closures that should be executed at each step of the process. The functional flow analysis module may store the determined information in storage in information stores of clouds or a combination thereof and retrieve reuse the stored data when needed. The determined functional flow information can be utilized by the energy consumption calculator to determine the energy consumption for a set of computation closures involved in the flow.

In one embodiment at any step of computation distribution if any changes in the capabilities functional flows energy availability energy consumption or any other parameters of the network are recognized not shown e.g. power shut down fault in a component etc. which may affect the distribution process the energy availability monitoring module the energy consumption calculator and the capability analysis module may reevaluate the capabilities availabilities and consumption and the process of will restart from step . Alternatively if no change occurs in step the distribution process may be performed by the migration module .

It is noted that the determination of energy availability energy consumption or computation capabilities may be performed either statically dynamically or a combination thereof. In the case of static determination the energy availability energy consumption or computation capabilities are determined prior to start of computation distribution process and the results are stored for migration module to refer to. Under the static status the computation closures may be static as well meaning that the closures may consist of pre coded preprocessed pre computed functions or functions that their availability has been previously insured. As for static closures all the states of closure and functions are pre computed so that a particular input will always produce the same output and the internal states remain unchanged.

Alternatively the energy availability energy consumption or computation capabilities may be dynamically monitored prior to and during the computation distribution and whenever diagnosing an unsatisfactory condition alert the migration module . In any case the energy availability energy consumption or computation capabilities determined may not be satisfactory for computation distribution or the evaluation process may diagnose changes in the capabilities. For example excessive work load congestion technical problems or power shutdown at an architectural level or at a component of the architectural level may result in unsatisfactory status of the level or the component for computation distribution. In this case the process of recalculates the energy availability energy consumption or computation capabilities and the needed level of computational closure is re evaluated by the distributed computation energy optimization platform . In this case the closures may be dynamic wherein the code is constructed during the execution and furthermore the internal state of the execution may vary. Also the output of the computation closure execution may change based on dynamically determined energy availability energy consumption and computation capabilities.

In one embodiment whenever the cost of energy requirement for a set or of computation closures exceeds the maximum cost line exceeded parts marked by circles in on the current level of computational architecture the computation is distributed to the next level such as infrastructure level. The distributed computation energy optimization platform receives a request from UE for distribution of set . The migration module of the distributed computation energy optimization platform uses the information provided by the energy availability monitoring module energy consumption calculator and other components of the distributed computation energy optimization platform as described with respect to the flowchart of in order to select a component of the infrastructure levels or for the distribution of computation closures and . In the example of the closure substitution module has selected components and from infrastructure as substitutes for and respectively. In this example component includes three of the five closures from set but has capability for execution of four of the five closures from set . Therefore the migration module migrates the fourth closure to the component shown by arrow and the fifth closure to component shown by arrow . Once the execution is completed the results of execution of set can be aggregated with the result from execution of closure . In the case of UE and set of computation closures the distributed computation energy optimization platform may select component for migrating process . In this example set can be replaced by computation closures and shown by arrow . This means that closures and can be executed to produce results for closure set . The execution results may be stored in storage for further process.

In one embodiment distributed computation energy optimization platform may be informed about energy availabilities found in infrastructure components or clouds via the energy availability monitoring module . The distributed computation energy optimization platform may periodically receive updated information about available energy and updated parameters from the infrastructures or clouds and the energy availability monitoring module . Similarly in various embodiments if the infrastructure levels does not have sufficient available energy resource the computations can be migrated to the cloud . For example diagram shows that the energy requirement for computations and of component in infrastructure exceed the maximum threshold as shown by arrow the computation is migrated to cloud .

As previously discussed the capabilities and energy availability of either point of the distribution e.g. UE or component may change. For example a component may lose its power supply the UE may be plugged to main power supply instead of being operated by a battery etc. In such cases the distributed computation energy optimization platform determines the change and adjusts the parameters accordingly.

In one embodiment connectors may contain information about parameters such as energy availability energy consumption capabilities functional flows distribution maps links between closures and architectural levels etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. As seen in the closures have been distributed from component to component via communication between connector and connector . The computation branch of component includes closures communicating via connectors and while branches and communicate via connectors and . Similarly a third branch has been formed of closures being executed at component and connected by connectors and while the branch communicates with other branches via connector

In one embodiment the initial branch may be in a UE the second branch in a component of the infrastructure and the third branch in another component of the same infrastructure a different infrastructure in a cloud or a combination thereof.

In one embodiment connectors may contain information about parameters such as capabilities including energy availability and energy consumption cost function functional flow specifications distribution maps links between closures and architectural levels etc. Arrows connecting closures to connectors and connectors to next closures show the functional flow adopted based on the parameters. For example star signs and represent the capability parameters provided by the energy availability monitoring module energy consumption calculator and the capability analysis module and associated with each closure and respectively. Additionally blocks and represent cost values provided for one or more closures by the cost function provider . In the example of the cost value shows the cost for binding closure to closure and directs closure to branch via connector as the next closure to be executed after closure . In one embodiment if the value of certain parameters such as energy cost based on the analyses by the energy availability monitoring module energy consumption calculator capability analysis module and the functional flow analysis module exceed a certain thresholds some computational closure may be omitted from the chain in the current branch for the value to be reduced. The closures may be initially assigned with priority levels so that less important closures can be omitted if necessary. Similarly cost values and direct closures and in branch via connectors and . In a higher level of hierarchy the cost value directs closures to component and similarly the cost value directs closures to component . As shown at connector the energy diagram shows the energy diagram for computation closures . Since the energy consumption for the closures has exceeded the horizontal line of the maximum threshold at component the closures are being migrated to component via connector . Additionally if the energy requirement does not exceed the maximum threshold in branch connectors and cost values and direct closures down the path of branch . Similarly in branch connectors and cost values and direct closures down the path of branch .

In one embodiment a balance between the costs of various capabilities can be created. For example if application of a certain privacy rule required excessive energy use parts of the privacy may be omitted in order to avoid excess energy consumption. In this embodiment the computations may be migrated to other levels of the computational architecture for example from device to infrastructure or from infrastructure to the cloud when the combined cost of energy privacy and security exceeds the maximum threshold. Additionally the computation cost can be considered as a function F of three variables E energy cost P privacy cost and S security cost as F E P S x E y P z S where x y and z are factors identifying the importance weight of each cost item for the computation. For example in order to keep the total cost F at a predetermined level when limited energy is available reduction of y or z factors can reduce the privacy and security cost and allow for the total cost to remain unchanged. In one embodiment the values of factors x y and z can be interpreted by the distributed computation energy optimization platform based on predetermined setups by the user manufacturer service provider or a combination thereof.

In the example of graph with the horizontal axis representing time and the vertical axis representing energy cost the curve represents energy cost for the computation chain provided by the energy consumption calculator . The two horizontal lines and show the minimum and maximum cost thresholds meaning that where the cost curves exceed the maximum threshold is the time when distribution of computations may be considered in order to lower the costs. For example the energy cost exceeds the maximum threshold line at points identified by circles and . As seen in the closure is the bottleneck which consumes a higher than maximum level of energy.

In one embodiment the energy availability monitoring module identifies other levels of computational architecture not shown for distribution of the closure set to. The energy information analysis module processes the energy consumption information energy availability information and other capabilities of various levels of the computational architecture provided by the capability analysis module and decided whether to migrate the computation closure set to another level of the computational architecture. The capability analysis module may also receive information from the closure substitution module identifying closures that can be substituted with other closures with lower energy consumption. In the exemplary embodiment of the closure substitution module has identified closure as a substitute for closure in order to lower the energy consumption shown in circle . Following the substitution of closure with closure the functional flow analysis module modifies the functional flow so that the flow can bypass closure and continue on to closure instead. The connectors and are updated accordingly to represent correct to and from links for closures. Following the modification of the closure chain the migration module may use the information provided by the energy availability monitoring module energy consumption calculator capability analysis module and other component of the distributed computation energy optimization platform to distribute the closures of chain to be executed in optimal levels of computational architecture not shown .

In one embodiment the backend device may be equipped with a closure recycling and marshaling component that monitors and manages any access to the computation closures store . In other embodiments the closure recycling and marshaling i.e. standardization for uniform use may be a function of the distributed computation energy optimization platform .

In one embodiment the computation closures within environments and the computation closures store may be composed based on anonymous function objects and automatically created by a compiling system using methods for generating anonymous function objects such as lambda expressions.

In another embodiment the computation closure environment has a developer experience module that provides various tools for a developer for manipulating services offered by the UE . The tools may include standardized and or abstract data types and services allowing the developers to chain processes together across development platforms. In one embodiment the developer experience module provides cross platform support for abstract data types and services under the supervision of a distributed computation energy optimization platform as discussed in . The agent Agent retrieves the computation closures required by the developer experience module from the computation closures store and stores the newly generated computation closures by the developer experience module into the computation closures store for distribution purposes per arrow .

In yet another embodiment the computation closure environment has a scalable computing module that provides an abstract wrapper i.e. monadic wrapper for the migrating closures . This abstraction provides computation compatibility between the closures and the UE . The abstract wrapper may provide scheduling memory management system calls and other services for various processes associated with the closures . These services are provided under the supervision of the distributed computation energy optimization platform as discussed in . The agent Agent retrieves the computation closures required by the scalable computing module from the computation closures store and stores the newly generated computation closures by the scalable computing module into the computation closures store for distribution purposes per arrow . In one embodiment the backend environment may access the computation closures store and exchange migrate one or more computer closures between the computation closures store and the backend computation closures store .

In one embodiment distribution of process by the migration module of the distributed computation energy optimization platform includes distribution of closures combinators and the process states as independent elements into for instance an infrastructure environment . The independent closures from infrastructure environment may be distributed into different components where they may be executed.

It is assumed in this example that component of an infrastructure level not shown is selected by the distributed computation energy optimization platform as a destination for closure distribution from UE . The extracted computation closure closure  is migrated to component by the migration module of the distributed computation energy optimization platform and executed on component

In one embodiment the component receives the computation closure closure  and extracts it from the computation closure store using the Get command . The extracted closure  is projected into a closure with the user device context and the object is produced. The block represents the reconstruction of the closure into the initial context by a component in charge of the execution. The aggregated context may then be executed in the run time environment of component by Agent.

In another embodiment the UE and component may exchange places and the distribution is performed from the component to UE or both devices may be UEs. In this embodiment the decomposition and aggregation processes are similar to the above example.

In one embodiment the UE may include RDF store which holds computation closures for processes associated with the UE . Similarly the backend device may includes a RDF store which holds computation closures associated with processes related to device UEs or any other devices having connectivity to device or cloud .

In other embodiments the Uniform Resource Identifiers URIs in UE and in backend device may be used to identify names or resources accessible to their respective devices via the communication network . Furthermore the legacy codes associated with each device may be stored in legacy code memory areas and on UE and and on backend device

In one embodiment UE may be provided with a non volatile memory space as a closure store. The closure store may include a set of closure primitives shown as geometric objects similar to primitives of sets or of . Similarly the backend device may be provided with a non volatile memory space as a closure store. The closure store may also include a set of closure primitives shown as geometric objects. In one embodiment the closure store is a subset of closure store determined at least in part based on one or more criteria such as time of access frequency of access a priority classification etc. Since non volatile memories are costly and require extensive resources e.g. power consumption compared with volatile memories such as and the capacity of non volatile memory on a UE is limited. However a backend device serving high numbers of users may be equipped with larger volumes of non volatile memory spaces. Because of the limited capacity of non volatile memory spaces on UEs a subset of the closure store is stored locally at the closure store for local use by the UE . In order to minimize the number of times a UE needs to retrieve one or more primitives from closure store of device the subset is determined based on one or more criteria. In one embodiment the closure store may be determined as a set of the most frequently accessed closure primitives of closure store by UE . In another embodiment the closure store may be determined as a set of the most recently accessed closure primitives of closure store by UE . In other embodiments various combined conditions and criteria may be used for determining subset from set as the content of closure store for UE . Furthermore the closure stores and may be periodically synchronized. The synchronization of closure stores ensures that any changes addition deletion modification etc. in closure primitives of closure store are reflected in the closure store .

In one embodiment for execution of a closure set a subset of closure store associated with a process on UE the set can be migrated by the migration module of the distributed computation control platform to the backend device which is a component of the infrastructure the distribution path shown as arrow . The distributed computation control platform may then inform the processing components of the UE the backend device or a combination thereof the processing components are not shown that the closure primitives are ready for execution.

In one embodiment any changes on the closure store of the backend device e.g. addition deletion modification etc. may first enter the URIs via the communication network . The changes may then be applied from URIs on closure store shown by arrows . Similarly the closure store is updated based on the content of the closure store and the updates are shared with other components within UE e.g. with URIs as shown by arrows .

In one embodiment the commonly accessible memory address space is formed from the RDF stores and and the closure stores and . The commonly accessible memory address space can be accessed as a continuous memory space by each of the devices and

The processes described herein for providing energy optimization in multi level distributed computations may be advantageously implemented via software hardware firmware or a combination of software and or firmware and or hardware. For example the processes described herein may be advantageously implemented via processor s Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. Such exemplary hardware for performing the described functions is detailed below.

A bus includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors for processing information are coupled with the bus .

A processor or multiple processors performs a set of operations on information as specified by computer program code related to providing energy optimization in multi level distributed computations. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and or the computer system to perform specified functions. The code for example may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set e.g. machine language . The set of operations include bringing information in from the bus and placing information on the bus . The set of operations also typically include comparing two or more units of information shifting positions of units of information and combining two or more units of information such as by addition or multiplication or logical operations like OR exclusive OR XOR and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions such as an operation code of one or more digits. A sequence of operations to be executed by the processor such as a sequence of operation codes constitute processor instructions also called computer system instructions or simply computer instructions. Processors may be implemented as mechanical electrical magnetic optical chemical or quantum components among others alone or in combination.

Computer system also includes a memory coupled to bus . The memory such as a random access memory RAM or any other dynamic storage device stores information including processor instructions for providing energy optimization in multi level distributed computations. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory is also used by the processor to store temporary values during execution of processor instructions. The computer system also includes a read only memory ROM or any other static storage device coupled to the bus for storing static information including instructions that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus is a non volatile persistent storage device such as a magnetic disk optical disk or flash card for storing information including instructions that persists even when the computer system is turned off or otherwise loses power.

Information including instructions for providing energy optimization in multi level distributed computations is provided to the bus for use by the processor from an external input device such as a keyboard containing alphanumeric keys operated by a human user or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus used primarily for interacting with humans include a display device such as a cathode ray tube CRT a liquid crystal display LCD a light emitting diode LED display an organic LED OLED display a plasma screen or a printer for presenting text or images and a pointing device such as a mouse a trackball cursor direction keys or a motion sensor for controlling a position of a small cursor image presented on the display and issuing commands associated with graphical elements presented on the display . In some embodiments for example in embodiments in which the computer system performs all functions automatically without human input one or more of external input device display device and pointing device is omitted.

In the illustrated embodiment special purpose hardware such as an application specific integrated circuit ASIC is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display cryptographic boards for encrypting and decrypting messages sent over a network speech recognition and interfaces to special external devices such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.

Computer system also includes one or more instances of a communications interface coupled to bus . Communication interface provides a one way or two way communication coupling to a variety of external devices that operate with their own processors such as printers scanners and external disks. In general the coupling is with a network link that is connected to a local network to which a variety of external devices with their own processors are connected. For example communication interface may be a parallel port or a serial port or a universal serial bus USB port on a personal computer. In some embodiments communications interface is an integrated services digital network ISDN card or a digital subscriber line DSL card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments a communication interface is a cable modem that converts signals on bus into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example communications interface may be a local area network LAN card to provide a data communication connection to a compatible LAN such as Ethernet. Wireless links may also be implemented. For wireless links the communications interface sends or receives or both sends and receives electrical acoustic or electromagnetic signals including infrared and optical signals that carry information streams such as digital data. For example in wireless handheld devices such as mobile telephones like cell phones the communications interface includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments the communications interface enables connection to the communication network for providing energy optimization in multi level distributed computations to the UEs 

The term computer readable medium as used herein refers to any medium that participates in providing information to processor including instructions for execution. Such a medium may take many forms including but not limited to computer readable storage medium e.g. non volatile media volatile media and transmission media. Non transitory media such as non volatile media include for example optical or magnetic disks such as storage device . Volatile media include for example dynamic memory . Transmission media include for example twisted pair cables coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM an EPROM a FLASH EPROM an EEPROM a flash memory any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media.

Logic encoded in one or more tangible media includes one or both of processor instructions on a computer readable storage media and special purpose hardware such as ASIC .

Network link typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example network link may provide a connection through local network to a host computer or to equipment operated by an Internet Service Provider ISP . ISP equipment in turn provides data communication services through the public world wide packet switching communication network of networks now commonly referred to as the Internet .

A computer called a server host connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example server host hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system can be deployed in various configurations within other computer systems e.g. host and server .

At least some embodiments of the invention are related to the use of computer system for implementing some or all of the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more processor instructions contained in memory . Such instructions also called computer instructions software and program code may be read into memory from another computer readable medium such as storage device or network link . Execution of the sequences of instructions contained in memory causes processor to perform one or more of the method steps described herein. In alternative embodiments hardware such as ASIC may be used in place of or in combination with software to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware and software unless otherwise explicitly stated herein.

The signals transmitted over network link and other networks through communications interface carry information to and from computer system . Computer system can send and receive information including program code through the networks among others through network link and communications interface . In an example using the Internet a server host transmits program code for a particular application requested by a message sent from computer through Internet ISP equipment local network and communications interface . The received code may be executed by processor as it is received or may be stored in memory or in storage device or any other non volatile storage for later execution or both. In this manner computer system may obtain application program code in the form of signals on a carrier wave.

Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor for execution. For example instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system receives the instructions and data on a telephone line and uses an infra red transmitter to convert the instructions and data to a signal on an infra red carrier wave serving as the network link . An infrared detector serving as communications interface receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus carries the information to memory from which processor retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory may optionally be stored on storage device either before or after execution by the processor .

In one embodiment the chip set or chip includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays FPGA not shown one or more controllers not shown or one or more other special purpose computer chips.

In one embodiment the chip set or chip includes merely one or more processors and some software and or firmware supporting and or relating to and or for the one or more processors.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein to provide energy optimization in multi level distributed computations. The memory also stores the data associated with or generated by the execution of the inventive steps.

Pertinent internal components of the telephone include a Main Control Unit MCU a Digital Signal Processor DSP and a receiver transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing energy optimization in multi level distributed computations. The display includes display circuitry configured to display at least a portion of a user interface of the mobile terminal e.g. mobile telephone . Additionally the display and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry includes a microphone and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone is fed to a coder decoder CODEC .

A radio section amplifies power and converts frequency in order to communicate with a base station which is included in a mobile communication system via antenna . The power amplifier PA and the transmitter modulation circuitry are operationally responsive to the MCU with an output from the PA coupled to the duplexer or circulator or antenna switch as known in the art. The PA also couples to a battery interface and power control unit .

In use a user of mobile terminal speaks into the microphone and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter ADC . The control unit routes the digital signal into the DSP for processing therein such as speech encoding channel encoding encrypting and interleaving. In one embodiment the processed voice signals are encoded by units not separately shown using a cellular transmission protocol such as enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi satellite and the like or any combination thereof.

The encoded signals are then routed to an equalizer for compensation of any frequency dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream the modulator combines the signal with a RF signal generated in the RF interface . The modulator generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission an up converter combines the sine wave output from the modulator with another sine wave generated by a synthesizer to achieve the desired frequency of transmission. The signal is then sent through a PA to increase the signal to an appropriate power level. In practical systems the PA acts as a variable gain amplifier whose gain is controlled by the DSP from information received from a network base station. The signal is then filtered within the duplexer and optionally sent to an antenna coupler to match impedances to provide maximum power transfer. Finally the signal is transmitted via antenna to a local base station. An automatic gain control AGC can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone any other mobile phone or a land line connected to a Public Switched Telephone Network PSTN or other telephony networks.

Voice signals transmitted to the mobile terminal are received via antenna and immediately amplified by a low noise amplifier LNA . A down converter lowers the carrier frequency while the demodulator strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer and is processed by the DSP . A Digital to Analog Converter DAC converts the signal and the resulting output is transmitted to the user through the speaker all under control of a Main Control Unit MCU which can be implemented as a Central Processing Unit CPU not shown .

The MCU receives various signals including input signals from the keyboard . The keyboard and or the MCU in combination with other user input components e.g. the microphone comprise a user interface circuitry for managing user input. The MCU runs a user interface software to facilitate user control of at least some functions of the mobile terminal to provide energy optimization in multi level distributed computations. The MCU also delivers a display command and a switch command to the display and to the speech output switching controller respectively. Further the MCU exchanges information with the DSP and can access an optionally incorporated SIM card and a memory . In addition the MCU executes various control functions required of the terminal. The DSP may depending upon the implementation perform any of a variety of conventional digital processing functions on the voice signals. Additionally DSP determines the background noise level of the local environment from the signals detected by microphone and sets the gain of microphone to a level selected to compensate for the natural tendency of the user of the mobile terminal .

The CODEC includes the ADC and DAC . The memory stores various data including call incoming tone data and is capable of storing other data including music data received via e.g. the global Internet. The software module could reside in RAM memory flash memory registers or any other form of writable storage medium known in the art. The memory device may be but not limited to a single memory CD DVD ROM RAM EEPROM optical storage magnetic disk storage flash memory storage or any other non volatile storage medium capable of storing digital data.

An optionally incorporated SIM card carries for instance important information such as the cellular phone number the carrier supplying service subscription details and security information. The SIM card serves primarily to identify the mobile terminal on a radio network. The card also contains a memory for storing a personal telephone number registry text messages and user specific mobile terminal settings.

While the invention has been described in connection with a number of embodiments and implementations the invention is not so limited but covers various obvious modifications and equivalent arrangements which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims it is contemplated that these features can be arranged in any combination and order.

