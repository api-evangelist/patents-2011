---

title: System and method for managing virtual and dedicated servers
abstract: Some embodiments provide a hosting system for managing virtual and dedicated servers. The system includes a front-end user interface (UI) that allows users to configure, provision, and control virtual and dedicated servers through UI elements. The back-end system includes different actuators that perform different tasks related to the virtual and dedicated server. To interface with these different actuators, the hosting system includes a remote management component (1) that receives a user request from the front-end UI, (2) identifies an actuator that can fulfill the user request, and (3) sends the user request to the identified actuator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09288117&OS=09288117&RS=09288117
owner: GoGrid, LLC
number: 09288117
owner_city: Jersey City
owner_country: US
publication_date: 20110208
---
Hosting services provide a means whereby multiple users can implement custom server configurations without the overhead costs associated with purchasing upgrading and maintaining the equipment needed to implement the configuration. In some cases a hosting service provider maintains and provisions a grid of hardware nodes that are shared amongst the multiple users. More specifically resources of a single node can be partitioned and each of these partitions can be allocated to host a server configuration of a different user.

Virtualization provides the means for partitioning the hardware resources amongst the multiple server configurations. Virtualization creates the fa ade that each server configuration is individually hosted on dedicated equipment with a particular set of resources. Two or more server configurations are provided non conflicting sets of resources of the same hardware node such that a guaranteed amount of processing resources is available to each such configuration. In other words a single physical resource is partitioned to operate as multiple logical resources.

In some cases a hosting service may lease dedicated equipment for users to implement their custom server configurations. The dedicated equipment in some instances may provide higher reliability increased performance and greater security as its hardware resources are not shared amongst multiple users. For instance dedicated servers may be ideal for running applications that users do not want on a multi tenant environment. One example of such an application is a database application that requires Payment Card Industry PCI Data Security Standard compliance.

To facilitate the hosting services users typically place orders for hardware configurations requiring certain functionality. Users fill out forms or place telephone calls to specify their configurations. At the hosting service site system operators review the requests and manually determine which nodes or dedicated equipment to distribute the configurations. The operators then configure the nodes or equipment and install software as specified within the order requests.

In some cases a hosting service may include multiple grids supporting server configurations for different users. However limitations of virtual local area network VLAN protocol e.g. 802.1Q may cause problems when deploying network configurations of virtual servers of multiple grids and dedicated servers on one network switch. For instance the VLAN protocol may specify that a VLAN identification ID includes 12 bits of data. This limits the maximum number of unique VLAN IDs to around 4096 2 12 per grid. As a result the servers of different users may not be able to be bridged on as a same network switch as it will break the logical division of the users network configurations.

Reserving a switch for servers on a per grid basis adversely affects scalability manageability and capacity planning and result in suboptimal resource utilization. Furthermore the problem of configuring and managing separate network switches for different grids may escalate as new grids are added to the hosting service.

Some embodiments provide a hosting system for managing virtual and dedicated servers. In some embodiments the system includes a front end user interface UI that allows user to configure provision and control virtual and dedicated servers through UI elements. For instance the front end UI may include different UI controls that can be used to define configurations for a dedicated server. Examples of such configurations include hardware specifications e.g. memory CPU storage image specifications e.g. operating system applications network specifications e.g. IP address etc.

When a server configuration is received through front end UI the hosting system in some embodiments sends the server configuration to its back end logic and automatically deploys the server configuration. In some embodiments the back end portion of the system includes different actuators that perform different provisioning tasks. For example a virtual server may be logically partitioned and configured on a particular node in a grid of hardware resources through one actuator while a dedicated server may be configured through another different actuator. In addition one datacenter at a first location may have different a set of actuators than another datacenter at a second location.

To interface with different types of actuators the hosting system of some embodiments includes a remote management module. In some embodiments the remote management module 1 receives a user request from the front end UI 2 identifies an actuator that can fulfill the user request and 3 sends the user request to the identified actuator. The remote management system may also identify a datacenter location of the actuator. For example the remote management module may receive a request for a dedicated server at a datacenter located in the eastern portion of the United States. The remote management module may then identify an actuator that can deploy a dedicated server at the datacenter location and send a message to the actuator to deploy an available dedicated server according to the request.

In some embodiments the hosting system provides other types of actuators to control or manage servers that are provisioned. For instance the hosting system may include a message oriented middleware actuator for turning off turning on or restarting dedicated servers. The remote management module in some embodiments may also communicate with these other types of actuators to manage the provisioned servers.

The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly to understand all the embodiments described by this document a full review of the Summary Detailed Description and the Drawings is needed. Moreover the claimed subject matters are not to be limited by the illustrative details in the Summary Detailed Description and the Drawing but rather are to be defined by the appended claims because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.

In the following description numerous details are set forth for the purpose of explanation. However one of ordinary skill in the art will realize that the invention may be practiced without the use of these specific details. In other instances well known structures and devices are shown in block diagram form in order not to obscure the description of the invention with unnecessary detail.

Some embodiments provide a hosting system for managing virtual and dedicated servers. In some embodiments the system includes a front end user interface UI that allows user to configure provision and control virtual and dedicated servers through UI elements. For instance the front end UI may include different UI controls that can be used to define configurations for a dedicated server. Examples of such configurations include hardware specifications e.g. memory CPU storage image specifications e.g. operating system applications network specifications e.g. IP address etc.

When a server configuration is received through front end UI the hosting system in some embodiments sends the server configuration to its back end logic and automatically deploys the server configuration. In some embodiments the back end portion of the system includes different actuators that perform different provisioning tasks. For example a virtual server may be logically partitioned and configured on a particular node in a grid of hardware resources through one actuator while a dedicated server may be configured through another different actuator. In addition one datacenter at a first location may have different a set of actuators than another datacenter at a second location.

To interface with different types of actuators the hosting system of some embodiments includes a remote management module. In some embodiments the remote management module 1 receives a user request from the front end UI 2 identifies an actuator that can fulfill the user request and 3 sends the user request to the identified actuator. The remote management system may also identify a datacenter location of the actuator. For example the remote management module may receive a request for a dedicated server at a datacenter located in the eastern portion of the United States. The remote management module may then identify an actuator that can deploy a dedicated server at the datacenter location and send a message to the actuator to deploy an available dedicated server according to the request.

In some embodiments the hosting system provides other types of actuators to control or manage servers that are provisioned. For instance the hosting system may include a message oriented middleware actuator for turning off turning on or restarting dedicated servers. The remote management module in some embodiments may also communicate with these other types of actuators to manage the provisioned servers.

Several more detailed embodiments of the invention are described in the sections below. Section I provides an overview of a multi server control panel according to some embodiments. Sections II provides a conceptual architecture diagram of the hosting system of some embodiments. Section III describes example operations performed by the hosting system to provision a dedicated server. Section IV describes example operations performed by the hosting system to control or restart a dedicated server. Section V describes the hosting system defining separate broadcast domains for servers through virtual local area network VLAN translations. Finally Section VI describes a computer system which implements some embodiments of the invention.

Some embodiments provide a graphical user interface GUI that allows users manage servers. In some embodiments the servers include virtual and dedicated servers. Several examples of this GUI are given below. In several of these examples the GUI is referred to as a multi server control panel because it allows the users to configure provision and control the servers through UI elements.

In some embodiments the multi server control panel provides UI elements that allow users to provision or configure servers by specifying parameters that define or redefine the attributes of the servers. The multi server control panel of some embodiments displays representations of the servers organized into several tiers where each tier represents a layer in a server configuration. In other words each tier represents a logical application layer e.g. a load balancing layer a web server layer an application server layer a database server layer storage layer etc. in a multi server configuration.

In the example illustrated in the display area is organized into columns that represent several tiers. The display area includes a load balancer tier a web server tier a database server tier and storage tier . The tier organization allows a user to assess a server topology. This tier organization allows the user to scale the server topology by adding one or more servers to or deleting one or more servers from a particular tier using the multi server control panel. For example a user can scale the system topology by adding a second web server to support a first web server. The user can also scale the system topology by adding another tier e.g. by adding an application server to a multi server configuration that includes a load balancer a web server and a database .

In some embodiments this tier organization allows the user to scale the server topology by adding one or more storages e.g. cloud storages as represented by the storage tier . For instance with the multi server control a user can easily allocate a particular amount of storage that he or she intends to use and offload storage maintenance tasks to the hosting service. As a result the user does not have to buy upgrade and maintain physical storages.

Another way in which this tier organization allows the user to scale the server topology is by allowing the users to increase allocated resources e.g. memory storage bandwidth CPU for any server in the server topology. That is the user cannot only increase the system topology vertically e.g. along the tier organization of the display area but horizontally by allocating additional resources for one or more servers in the system topology. Some embodiments of the multi server control panel provide UI elements that allow a user to specify one or more attributes of a server e.g. one or more attributes of a load balancer a web server an application server a database server etc . Examples of such attributes include the amount of memory the OS of the server and the name of the server.

Sections B C below provide several more detailed examples of how a user can use the multi server control panel to configure and add servers to a server topology. In particular Section B describes adding a virtual server to the server topology and Section C describes adding a dedicated server to the server topology.

As shown in stage the object selection window has a list of selectable icons and a datacenter field . The list of selectable icons represents different server configuration components or objects e.g. server load balancer storage that a user can add to a server configuration. In the example illustrated in the list of selectable icons includes icons for a cloud server dedicated server cloud storage and load balancer. Here the cloud server represents either a web server or a database server. As will be described below by reference to in some embodiments a server is defined as a web server or database server based on the application selected for the server. For example a server may be defined as a database server when an image selected for the server includes an operating system that is preconfigured with a database application e.g. SQL server .

The datacenter field allows a user to select a datacenter to host the server configuration. In the example shown in stage the user can select either US East 1 which represents a datacenter located in the eastern portion of the United States or US West 1 which represents a datacenter located in the western portion of the United States. However additional user selectable items representing other locations may be available depending on the locations of datacenters of the hosting system e.g. hosting service provider . The datacenter field may also list datacenters differently. For instance the datacenter field may list each datacenter with a more specific location information such as state city street address etc.

In some embodiments the selection of a datacenter e.g. US West 1 modifies the available selectable icons in the list of selectable icons . That is several selectable icons may be presented or removed based on the services provided by the selected datacenter. For instance a selection of a particular datacenter may cause an icon corresponding to the cloud storage to be removed from or presented in the list of selectable icons .

When the user scrolls the object list the selected icon may be highlighted. This is shown in the fourth stage with the icon for the cloud server highlighted while the icons for the dedicated server cloud storage and load balancer are not highlighted. The user can select any of the icons in the object list e.g. by clicking on them or by scrolling to them and pressing the enter key . When the user selects the cloud server icon in the object list the user is presented with an image list window as illustrated in .

In some embodiments the cloud server is defined as a web server database server or application server based on one or more applications that is installed or preconfigured on the operating system. For example a server may be defined as a database server when an image selected for the server includes an operating system that is preconfigured with a database application e.g. SQL server . Also a server may be defined as a web server when an image having an operating system preconfigured with a web server or application server is selected for the server. Furthermore a server may be defined by default as a web server application server or database server when an operating system is not preconfigured with any application.

As shown in the first stage the image selection window includes an image list and a filter tool . The image list is an area in the window that lists all available images from which the user can choose for the selected cloud server. In some embodiments the list of images represents images in one or more image repositories or libraries. The list may include images provided by the hosting service. The list may further include images provided by other users e.g. customers general public etc . Alternatively the list may include only images provided by other users in some embodiments.

In the example illustrated in several different selectable images are displayed. Several of these images include Linux distributions while others include Windows operating systems. The images are also classified as either a web server or a database server. Also several of the listed images are only available for dedicated severs and others are available for all types of servers. The list may be sequentially organized by name of the operating system the type of server e.g. web server database server the type of operating system architecture e.g. 32 bit 64 bit price date updated and owner.

In some embodiments the images may also be organized or classified by system requirements. In other words different images may have different system requirements. These requirements may include memory storage processor etc. For instance some images may be available for a web server that has a minimum of one gigabyte of random access memory RAM . Also some images may support a maximum of sixteen gigabytes of RAM. As shown in the first stage the list is alphabetically organized by name based on a sorting tool .

The filter tool is a user interface item provided in the image selection window that allows the user to search or filter the image list based on one or more criteria. In the example illustrated in the user can filter the image list based on the name of the operating system and architecture. The user can also filter the image list based on different types of servers. For instance the image list may be filtered to only display images that are defined as a web server or database server. Also the user can reset the filter tool by selecting a reset button.

Having described the image selection window the operations of selecting an image will now be described by reference to the state of this window at the four stages . In the first stage the image list lists several images from which the user can choose for the cloud server. The second stage shows the user filtering the image list based on the architecture of the operating system. Specifically a field of the filter tool is selected to reveal a drop down list of different architectures filter i.e. 32 bit 64 bit . The user chooses the 64 bit filter which causes the image list to display only those operating systems matching the filter as illustrated in the third stage .

In the third stage as the user scrolls the list of images the selected image is highlighted. Here the user selects an image containing a Windows operating system that is defined as a web server. Lastly the fourth stage show the user s selection of the Next button to proceed with configuring the web server. Optionally the user can cancel the process of adding the web server by selecting the Cancel button . When the user selects the next button the user is presented with a cloud server form as illustrated in .

The name field allows the users to specify a descriptive name or site name e.g. Web Server 1 www.abc.com for the web server. The description field is an optional field that allows a user to describe the web server. For example through the description field the user can input self describing information such as the date the web server was added the content of the web pages provided by the web server etc. In some embodiments the name field is automatically populated. For example when a user specifies a site name during a sign up process the name field is automatically populated with the site name provided by the user.

The IP address field allows the users to specify an IP address for the web server. In some embodiments the IP address field is implemented as a drop down menu that opens to provide a list of IP addresses that are available for a user to choose as an IP address for the web server. In some embodiments the available IP addresses are based on a specified hosting plan. For instance if a user signs up for a particular hosting plan the multi server control panel might display ten IP addresses for the servers in the configuration. However if the user signs up for a different hosting plan the multi server control panel might display twenty IP addresses for the servers. In some embodiments the IP address may be from an IP subnet allocated to a customer s virtual local area network VLAN .

The memory field allows the user to specify the amount of memory e.g. RAM in some embodiments that the user wants to allocate to the web server. Different embodiments allow the user to specify this amount differently. For instance some embodiments allow a user to enter a numerical amount for the memory. Other embodiments allow the user to enter a percentage that specifies the percentage of an overall amount of memory that the user has purchased for his entire configuration or a particular tier of his configuration. For instance a user might select a hosting plan with one hundred gigabytes of memory. In such a case a user might then enter 10 in the memory field. This entry then allocates ten gigabytes of memory to the web server. If the user subsequently changes to a different hosting plan that includes more memory or less memory the allocated memory for the web server is automatically adjusted to reflect the change in the hosting plan. In some embodiments this field is implemented as a pull down menu that opens to provide a list of selectable memory values from which the user can choose for the web server.

Instead of or in conjunction with the memory field other embodiments might include fields for other resources in the web server form . Examples of such other resources include physical resources e.g. storage space number of CPUs CPU cycles etc. and network resources e.g. data transfer .

Having described the elements of the cloud server form the operations of configuring a web server will now be described by reference to the state of this form at the four stages . In the first stage the cloud server form displays several indications related to the previously selected options. Specifically the datacenter label indicates that the selected datacenter is US East 1 and the image label indicates that the selected image includes a Windows operating system that is 64 bit. In the first stage the name field is selected e.g. through a cursor click operation through a touch operation etc. to allow the user to input a name for the web server.

Stage two shows the cloud server form after the user has specified a name for the web server. Here the IP address field is selected to reveal a drop down list of different IP addresses from which the user can choose for the web server. As the user scrolls through the list the selected IP address is highlighted. Similarly in stage three the user specifies the amount of memory to allocate to the web server using the memory field . In this example the user selects 4 GB from a drop down list of the memory field . The fourth stage shows the user s selection of the Save button to proceed with configuring the web server. Alternatively the user can cancel the process of adding the web server by selecting the Cancel button .

The graphical element includes a web server icon and a resource meter . The web server icon is a graphical representation of the web server. In some embodiments the web server icon provides an indication of the operating system installed on the web server. For instance if the user selects an operating system image that includes a particular Linux distribution the web server icon may display a representation of the particular distribution. As shown in the web server icon displays an indication that the operating system selected for the web server is a Windows operating system.

The resource meter is a meter that displays usage of several resources e.g. CPU and memory in real time. In the example illustrated in the top resource meter represents CPU usage and the bottom resource meter represent memory usage. Each meter displays the real time usage by fluctuating e.g. moving a bar within the meter in accord with the real time usage of the corresponding server. In some embodiments the fluctuating graphical display is indicative of usage of the resource at different instances in time and or is indicative of real time or near real time usage of the resource.

Also the fluctuating graphical display changes color in some embodiments when the usage of the particular resource exceeds a particular threshold. For instance in some embodiments the bar within a meter changes color when resource usage goes over a predetermined threshold for the resource. One such example is when the memory usage goes over a 50 percent allotted memory capacity the bottom resource meter might change from one color to another color e.g. green to yellow .

The threshold in some embodiments is an expected usage rate over duration of time based on the amount of a particular resource that is assigned to the particular user. Hence the top and bottom meters can indicate different colors at different instances in time to specify excess usage of the resource. These fluctuating display and the changing colors provide a quick visual indication of the CPU and memory being overloaded or thrashed. Hence these icons are referred to as thrash o meters in some embodiments. Instead of or in conjunction with CPU and memory some embodiments of the multi server control panel provide real time usage of other resources. These other resources include network resources e.g. network traffic data transfer and other physical resources e.g. storage space .

The name field description field and IP address field are similar to those discussed above by reference to with respect to the cloud server form . Specifically the name field allows the users to specify a descriptive name or site name for the dedicated server. The description field is an optional field that allows a user to describe the dedicated server. The IP address field allows the users to specify an IP address for the dedicated server.

The configuration list allows the user to select or specify a hardware configuration for the dedicated server. Specifically it lists several different configurations for the dedicated server based on processor memory and storage. For instance a first configuration indicates that the dedicated server includes one multiple core processor 8 GB of memory i.e. RAM and two 320 GB RAID storages. The first configuration also includes a price for a monthly or annual plan. As shown the configuration list lists several other configurations including a second and third configuration with additional processor cores memory and storage.

Alternatively or conjunctively other embodiments might allow the user to select from other resources in the configuration list . Examples of such other resources include hardware resources such as manufacturer and type of CPU CPU cycles memory type storage type etc. and network resources such as data transfer . Different embodiments allow the user to specify the dedicated server configuration differently. For instance instead of selecting a particular configuration from a list of configurations some embodiments allow a user to customize a dedicated server by selecting different hardware components. This allows the user to more gradually define the dedicated server that will be added to the server configuration. In some embodiments the configuration list is implemented as a pull down menu that opens to provide a list of selectable configurations from which the user can choose for the dedicated server.

Having described the elements of the dedicated server form the operations of configuring a dedicated server will now be described by reference to the state of this form at the four stages . In the first stage the datacenter field indicates that the selected datacenter for the dedicated server is US East 1 . Also selecting e.g. through a cursor click operation through a touch operation etc. the name field allows the user to input a name for the dedicated server.

Stage two shows the dedicated server form after the user has specified a name for the dedicated server. Here the IP address field is selected to reveal a drop down list of different IP addresses from which the user can choose. As the user scrolls through the list the selected IP address is highlighted.

In stage three the user selects a radio button corresponding to the third configuration in the configuration list . As shown in the figure the third configuration includes two multiple core processor 24 GB of memory and five 146 GB RAID storages. The fourth stage shows the user s selection of the Next button to proceed with configuring the dedicated server. In some embodiments the user can cancel the process of adding the dedicated server at any time by selecting the Cancel button . When the user selects the next button the user is presented with an image selection window as illustrated in .

In some embodiments a dedicated server is defined as a web server database server or application server based on one or more applications that are installed or preconfigured on the operating system. For example the dedicated server may be defined as a database server when an image selected for the server includes an operating system that is preconfigured with a database application e.g. SQL server . Also the dedicated server may be defined as a web server when an image having an operating system preconfigured with a web server or application server is selected as the server. Furthermore the dedicated server may be defined by default as a dedicated server application server or database server when an operating system is not preconfigured with any application.

As shown in the first stage the image selection window includes an image list and a filter tool . The image list is an area in the window that lists all available images from which the user can choose for the selected dedicated server. In some embodiments the list of images represents images in one or more image repositories or libraries. The list may include images provided by the hosting service. The list may further include images provided by other users e.g. customers general public etc . Alternatively the list may include only images provided by other users in some embodiments.

In the example illustrated in several different selectable images are displayed. Several of these images include Linux distributions while others include Windows operating systems. The images are also classified as either a web server or a database server. Also several of the listed images are only available for dedicated severs and others are available for all types of servers. The list may be sequentially organized by name of the operating system the type of server e.g. web server database server the type of operating system architecture e.g. 32 bit 64 bit price date updated and owner.

In some embodiments the images may also be organized or classified by system requirements. In other words different images may have different system requirements. These requirements may include memory storage processor etc. For instance some images may be available for a dedicated server that has a minimum of one gigabyte of random access memory RAM . Also some images may support a maximum of sixteen gigabytes of RAM. As shown in the first stage the list is alphabetically organized by name based on a sorting tool .

The filter tool is a user interface item provided in the image selection window that allows the user to search or filter the image list based on one or more criteria. In the example illustrated in the user can filter the image list based on the name of the operating system and architecture. The user can also filter the image list based on different types of servers. For instance the image list may be filtered to only display images that are defined as a web server or database server. Also the user can reset the filter tool by selecting a reset button.

Having described the image selection window the operations of selecting an image will now be described by reference to the state of this window at the four stages . In the first stage the image list lists several images from which the user can choose for the dedicated server. The second stage shows the user filtering the image list based on the architecture of the operating system. Specifically a field of the filter tool is selected to reveal a drop down list of different architectures filter i.e. 32 bit 64 bit . The user chooses the 64 bit filter which causes the image list to display only those operating systems matching the filter as illustrated in the third stage .

In the third stage as the user scrolls the list of images the selected image is highlighted. Here the user selects an image containing a Linux operating system that is defined as a web server. The fourth stage show the user s selection of the Next button to proceed with configuring the dedicated server. In some embodiments the user can cancel the process of adding the dedicated server by selecting the Cancel button .

In some embodiments when the user selects the next button the user is presented with a dialog window that inquires whether to proceed with provisioning the dedicated server. The dialog window may list the configuration settings e.g. selected hardware image datacenter etc. for the dedicated server. The dialog window may also list hosting plan details e.g. contract related pricing etc . In some embodiments the dialog window includes an accept button to confirm the provisioning request and cancel button to cancel the request.

The graphical element includes a dedicated server icon and a resource meter . The dedicated server icon is a graphical representation of the dedicated server. In some embodiments the dedicated server icon provides an indication of the operating system installed on the dedicated server. For instance if the user selects an operating system image that includes a particular Windows operating system the dedicated server icon may display a representation of the particular operating system. As shown in the dedicated server icon displays an indication that the operating system selected for the dedicated server is a Linux distribution.

The resource meter is a meter that displays usage of several resources e.g. CPU and memory in real time. In the example illustrated in the top resource meter represents CPU usage and the bottom resource meter represent memory usage. Each meter displays the real time usage by fluctuating e.g. moving a bar within the meter in accord with the real time usage of the corresponding server. In some embodiments the fluctuating graphical display is indicative of usage of the resource at different instances in time and or is indicative of real time or near real time usage of the resource.

Also the fluctuating graphical display changes color in some embodiments when the usage of the particular resource exceeds a particular threshold. For instance in some embodiments the bar within a meter changes color when resource usage goes over a predetermined threshold for the resource. One such example is when the memory usage goes over a 50 percent allotted memory capacity the bottom resource meter might change from one color to another color e.g. green to yellow .

The threshold in some embodiments is an expected usage rate over duration of time based on the amount of a particular resource that is assigned to the particular user. Hence the top and bottom meters can indicate different colors at different instances in time to specify excess usage of the resource. These fluctuating display and the changing colors provide a quick visual indication of the CPU and memory being overloaded or thrashed. Hence these icons are referred to as thrash o meters in some embodiments. Instead of or in conjunction with CPU and memory some embodiments of the multi server control panel provide real time usage of other resources. These other resources include network resources e.g. network traffic data transfer and other physical resources e.g. storage space .

The front end provisioning system 1 receives communications e.g. service requests from external users through a network and 2 routes the communications to different datacenters e.g. datacenters and . In the example illustrated in the front end provisioning system includes a web server an application programming interface API server a core and a remote management system .

The web server communicates to a user through a network such as the Internet. Specifically the user accesses the hosting system through the web browser or which may be executed on the user s desktop computer portable notebook computer personal digital assistant PDAs digital cellular telephone or other electronic communication devices. For instance when the user logs onto the hosting service s website or portal the user may be presented with the multi server control panel as discussed above by reference to .

In some embodiments the web server is responsible for generating a graphical interface through which users specify graphical representations e.g. the multi server control described in Section I above for various server configurations. In conjunction with or instead of the web server some embodiments implement the API server that interfaces with different custom applications e.g. a custom application UI through the network . The custom applications may operate on different operating systems or communication devices. In some embodiments the custom application may be a program or an applet that executes in a web browser.

In the example illustrated in the custom application interfaces with the front end provisioning system through the API server . The custom application may be written in different programming languages e.g. JAVA C C etc . In some embodiments the API server is implemented based on an HTTP based API. For instance the API server may be implemented as a web service using a Representational State Transfer REST API. When a request is received through either the web server or the custom application the request is passed along to the core to be processed.

In some embodiments the core acts as a controller that contains the executable code or logic required to perform different operations related to the multi server control panel. These operations may include operations related to creating user accounts enforcing access privileges e.g. authenticating and authorizing a user billing monitoring resources etc. For instance on an initial communication the web server may pass the user communication to the core for user verification and authentication. Accordingly the core may receive identification information from the user and determine whether the user has already created an account with the system. Also the core may authenticate and authorize the user based on data stored in the customer database . In addition the core may utilize an asset database to track available resources e.g. hardware resources . In some embodiments the core interacts with the remote management system to facilitate management of servers e.g. virtual servers dedicated servers at different datacenters.

The remote management system receives different requests e.g. provisioning tasks restart request from the core and routes these requests to the back end provisioning system. In some embodiments the remote management system 1 receives a change request from the core 2 identifies a particular actuator that can fulfill the change request and 3 sends a message to the particular actuator. The remote management system may also identify a datacenter location from the change request. For instance the remote management system may receive a request for a virtual server at a datacenter located in eastern United States. The remote management system may then send a message to an actuator that deploys virtual severs at the datacenter location.

The remote management system may serialize a message or data structure into a format that is understandable by an actuator e.g. a deployment manager that operates at a particular datacenter. In some embodiments the serialization allows objects or data structures containing information to be sent and understood by different parts or modules of the provisioning system e.g. the front end provisioning system the back end provisioning system . For instance different modules of the provisioning system that are defined by different programming languages e.g. C Java etc. may interoperate by exchanging messages that are serialized.

An actuator e.g. or is a component of the back end system that receives a request e.g. provisioning task and translates the request to control or manage hardware resources such as dedicated machines storage area networks etc. Each datacenter location e.g. datacenter or may have one or more actuators for different tasks. For instance a datacenter may have one actuator that deploys dedicated machines and another actuator that deploys virtual machines. The datacenters may also have one or more other actuators to monitor or control e.g. restart shutdown hardware resources. In the example illustrated in the actuator interfaces with one set of dedicated servers at the datacenter while the actuator interfaces with another set of dedicated servers at the datacenter . However depending on a particular task a particular actuator at a particular datacenter may communicate with other hardware e.g. grid of shared hardware nodes storage area network .

Having described the example architectural components of the hosting system several operations will now be described in Sections III and IV below. Specifically Section III describes example operations performed by the system to provision a dedicated server. Section IV describes several example operations performed by the system to control or restart a dedicated server.

As shown in the server configuration is initially processed by the web browser and sent over the network to the web server . The web server receives the server configuration and passes the configuration to the core . In some embodiments the web server operates in conjunction with an application server to receive and route the server configuration to the core .

In some embodiments when a new server configuration is received the core 1 creates a change request and 2 stores the change request in the customer database . This is illustrated in with the request processor of the core receiving the server configuration and creating a change request that is stored in the customer database . In some embodiments the change request contains all the necessary information to fulfill the provisioning task. The change request may include information extracted or derived from the server configuration request. The information may include machine specification e.g. CPU memory storage image specification e.g. operating system applications on the operating system network specification e.g. IP address datacenter location customer information e.g. customer ID etc. The core may also create the change request by accessing customer data or resource data in one or more data stores e.g. the customer database .

In some embodiments the change request or change request entity stored in the customer database may include a status identifier or an attribute field that indicates the status of the change request. For example when the dedicated server is provisioned according to the received server configuration the core may receive a change request status message indicating that the provisioning task has been completed. The core may then update the status identifier of the change request to reflect the completion of the provisioning task.

As shown in once the change request is created and stored in the customer database the core sends a message to the remote management system indicating that a new change request has been added to the customer database . This causes the remote management system to retrieve the change request from the customer database . In the example illustrated in the core sends a message ChangeRequest.Add that causes the remote management system to access the customer database . Alternatively in some embodiments the remote management receives the change request directly from the core without having to access the customer database .

The change request queue may contain different types of requests. For instance the change request queue may have a request for a virtual server cloud storage load balancer etc. When the change request is ready to be processed the remote management system retrieves the change request from the change request queue and begins processing the change request. For instance a request processor may determine that the request is ready to be processed and pop the request from the queue as illustrated in . If the message is serialized the remote management system may first de serialize the change request to extract information contained in the change request.

After retrieving the change request from the queue the remote management system translates the change request to a create message. In some embodiments the request processor translates the change request by identifying several pieces of information related to the server configuration. As mentioned above the server configuration may include customer identification machine specification image specification and network details. When dedicated servers are hosted on multiple datacenters the request processor may also identify a location of the datacenter e.g. U.S. West .

As shown the remote management system includes a message serializer for serializing the configuration information. In some embodiments the message serializer serializes a message so that a particular actuator operating at a particular datacenter can under the message. For instance in the message serializer serializes the create message into a format that is understandable by a deployment manager at the datacenter .

As shown in the remote management system creates a create message based on the change request and sends the create message to the datacenter . Specifically the remote management system sends the create message based on the datacenter location specified by the user through the multi server control panel. In some embodiments the provision request is sent to an appropriate actuator operating at a datacenter that can fulfill the request. For instance the remote management system may identity from the change request that the create message should be sent to the deployment manager at the datacenter location US West as illustrated in .

In the example illustrated in the deployment manager listens for requests e.g. create messages and stores the requests in the processing queue . When the create message is ready to be processed the deployment manager may pop the message from the queue and start processing the message. However if the message is serialized the deployment manager may first de serialize the message to extract information contained in the message. This is illustrated in as the message de serializer receives the create message from the queue and de serializes the message.

Once the provision request is retrieved the deployment manager of some embodiments performs a validation operation. To perform the validation the deployment manager determines whether the create request from the remote management system includes enough information to fulfill the provision request. For instance the deployment manager may make this determination based on the customer identification machine specification image specification and network details.

In some embodiments the deployment manager may send a create request status back to the remote management system e.g. through the message validation module that indicates whether the validation has passed or failed as illustrated in . In some embodiments the status of the create request is forwarded from the remote management system to the multi server control panel. The multi server control panel may then display a graphical and or textual element indicating that the request sent through the control panel is being processed or has failed. For instance when the multi server control panel receives the status update it may display a graphical or textual representation indicating that the dedicated server will be configured and deployed on a dedicated server at the specified datacenter.

As shown in after validating the provision request message the deployment manager communicates with the scheduler . Specifically the deployment manager interfaces with the scheduler to schedule and deploy the configuration on the dedicated server that is in a pool of dedicated servers .

To configure and deploy the server configuration on the dedicated server the scheduler performs a number of different operations. illustrates several example operations performed by the scheduler to deploy the dedicated server. Specifically this figure illustrates the scheduler interfacing with the asset database and a configuration module to 1 select a dedicated server node i.e. the dedicated server from the pool of dedicated servers and 2 configure the server node according the specifications e.g. network image received through the multi server control panel.

In the example illustrated in the scheduler receives a deployment request from the deployment manager. In some embodiments the scheduler initially accesses the asset database to identify a dedicated machine to deploy the server configuration. The scheduler may make this identification based on the machine specification in the deployment request.

In some embodiments the asset database tracks different information related to dedicated machines and or shared hardware nodes. For instance the asset database may include information that indicates available hardware resources in a particular datacenter. The asset database may also indicate what the machine specifications are on those hardware resources. As will be described below by reference to the asset database may also include information related to the owner of the hardware resource and the power distribution unit PDU that provides power to the hardware resource.

As shown in the scheduler accesses the asset database to determine one or more dedicated servers that meets the machine specification. In some embodiments the scheduler identifies dedicated servers that meet the hardware specification and are available to be provisioned. For example the scheduler may identify a list of candidate dedicated servers from all available servers by matching the machine specification e.g. memory capacity number of memory storage capacity number of storages number of processors or cores processor speed manufacturer of hardware etc. with data stored in the asset database .

When the scheduler identifies an available dedicated server it may lock the dedicated server for the purpose of provisioning. For instance the scheduler may select and lock one particular dedicated server from a group of available dedicated severs. In some embodiments the locking entails preventing another scheduler from provisioning the same dedicated server. Once the dedicated server is marked as locked the scheduler of some embodiments interfaces with the configuration module as illustrated in .

In some embodiments the configuration module performs several different operations to place a dedicated server in operational state. Several examples operations include 1 preparing the dedicated server s file system 2 installing an operating system 3 configuring security settings and 4 configuring network settings. To prepare the file system the configuration module may partition the server s drive and or format the drive. For instance the configuration module may initially partition the drive into several different logical partitions and then format the drive to install the operating system.

As shown in the configuration module accesses an image repository . In some embodiments the image repository is a library that contains links to actual images that can be used to set up different servers. For instance when the configuration module receives a request specifying a Windows operating system and a particular application server then the configuration module might access the image repository to locate an image having the specified operating system and application. As mentioned above by reference to the image repository may include images provided by the hosting service and other users e.g. customers general public etc .

The configuration module may also define security settings for the dedicated server. For example the configuration module may set up session security such as username and password SSH key host key etc. In some embodiments the configuration module configures network setting such as IP address virtual local area network VLAN etc. Once the dedicated server is provisioned the status of the provisioning request may be sent back to the multi server control panel. For instance a status report may be displayed on the multi server control panel that indicates to the user that the dedicated server meeting the specifications has been provisioned. The status report may also include any security contracts configured during the provisioning process.

The core translates at B the provision request to a change request and stores the change request in the customer database . The core sends at C a message to the remote management system indicating that a new change request has been added to the customer database . Example operations performed by the core to create and store the change request are described above by reference to .

The remote management system retrieves at D the change request from the customer database . The remote management at E sends a create message to the deployment manager . In some embodiments the create message includes a location of a particular datacenter. For instance the particular datacenter may be US East 1 which represents a datacenter located in the eastern portion of the United States or US West 1 which represents a datacenter located in the western portion of the United States. Several examples operations performed by the remote management system to create and send the create message are described above by reference to .

The deployment manager sends at F a create request status to the remote management system . In some embodiments the create request status is returned after the deployment manager validates information contained in the create message. Examples of the deployment manger validating the change request and returning a create request status is described above by reference to .

The remote management system sends at G a change request status message to the core . In some embodiments the change request status is based on the create status received from the deployment manager . The core sends at H an update on the status of the provision request to the web browser . For instance the multi server control panel may display a graphical and or textual element indicating that the request sent through the control panel is being processed or has failed. Also when the multi server control panel receives the status update it may display a graphical or textual representation indicating that the dedicated server will be configured and deployed on a dedicated server at the specified datacenter.

The deployment manger sends at I a provision request to the scheduler . In some embodiments the scheduler selects a dedicated server from a grid of dedicated servers based on the provision request. For instance the scheduler may access an asset database to determine whether one or more dedicated servers meet the machine specification as specified by the user of the multi server control panel.

The scheduler returns at J a provision status to the deployment manager . The provision status may indicate that the dedicated server has been provisioned or could not be provisioned. The deployment manager sends at K a create status message to the remote management system . The remote management system sends at L a change request status message to the core . The core sends at M an update on the status of the provision request to the web browser . In some embodiments the status report indicates to the user that the dedicated server that meets the specification has been provisioned. The status report may also include any security contracts or settings configured during the provisioning process.

The process determines at whether there are any dedicated servers available to be provisioned. When there are no available servers the process contacts at support to indicate that no server meeting the hardware specifications is available at the datacenter requested by a user. In some embodiments the process returns at the status of the provisioning request. For instance a status report may be reported back to the multi server control panel to indicate to the user that no dedicated server that meets the specification is available at that datacenter.

In some embodiments the availability of the server is determined by the front end provisioning system. For instance prior to receiving the configuration at the back end provisioning system the front end provisioning system may determine and indicate to the user that dedicated servers are only available at a particular datacenter. The front end provisioning system may make this determination by accessing a data store e.g. the asset database that includes available servers at different datacenters.

When the determination is made that a server is available the process selects and locks at the server for the purpose of provisioning. For instance process may select and lock one particular dedicated server when it finds multiple dedicated servers that meet the hardware specifications. In some embodiments the locking prevents another deployment manager or scheduler from provisioning the same dedicated server.

Once the dedicated server is locked the process selects at an image from a library or repository of images. As mentioned above the image may be selected based on the type of operating system e.g. Windows Linux . The image may also be selected based on a combination of the type of operating system and one or more applications installed on the operating system. For instance when the configuration request specifies a Linux operating system and a particular application server e.g. PHP server then the process might access the image repository to select a particular image that includes the specified operating system and application.

Process then configures at the file system of the selected server. The process configures the file system by formatting the server s drive. In addition the process may configure the file system by partitioning the drive. Once the drive is formatted process copies at the selected image onto the formatted drive. After copying the image to the drive the process configures at network details such as IP address subnet domain naming server etc.

The process then sets at security for the server. For instance the process may set up session security such as username and password SSH key host key etc. Once the server is provisioned the process updates at the asset database. For instance the process may update data related to the provisioned dedicated server by indicating the server is not available to be provisioned. The process returns at the status of the provisioning request. For instance a status report may be reported back to the multi server control panel that indicates to the user that the dedicated server meeting the specifications has been provisioned. The status report may also include any security contracts or settings configured during the provisioning process.

As shown in the restart request is initially processed by the web browser and sent over the network to the web server . The web server receives the restart request and passes the request to the core . In some embodiments the web server operates in conjunction with an application server to receive and pass the restart request to the core .

In the example illustrated in when the core receives a restart request the core 1 validates the restart request 2 creates a change request and 3 stores the change request in the customer database . In some embodiments the validation operation performed by the core determines the ownership of the dedicated server. In other words the validation operation determines whether the dedicated server that is to be restarted is owned by the user who requested the restart operation through the web browser .

In some embodiments the core validates ownership of the dedicated server by accessing data one or more data storages. This is illustrated in as a validation module accesses data in both the customer database and the asset database . In this example the core initially retrieves dedicated server information from the customer database . In some embodiments the dedicated server information includes a customer identification ID and a power distribution unit PDU ID. In some embodiments the PDU is a power strip that is physically connected to the dedicated server. The core may also retrieve PDU and ownership information from the asset database . In some embodiments the core retrieves an asset ID from the customer database and uses the asset ID to retrieve data from the asset database .

Once the information is retrieved from the customer database and the asset database the core may compare the retrieved information to validate ownership of the dedicated server. For instance the ownership might be validated when the PDU information and or customer information from the databases and match. Alternatively or conjunctively the core may access other data in the customer database to validate the ownership. For instance the core may retrieve billing rate from the customer database and compare the rate with a rate associated with the dedicated server that is stored in the asset database .

As shown in the request processor of the core receives restart information from the validation module and creates a change request. In some embodiments the change request contains all the necessary information to fulfill the restart task. For instance the change request may include information related to the PDU such as the port or plug number that distributes power to the dedicated server. When there are multiple datacenters the change request may also include the location information e.g. U.S. west U.S. east . The change request may include information extracted from the initial restart request. The change request may include information retrieved from or more data stores e.g. the customer database the asset database . For example the PDU information e.g. port number datacenter location may be retrieved from the asset database .

As shown in once the change request is created and stored in the customer database the core sends a message to the remote management system indicating that a new change request has been added to the customer database . This causes the remote management system to retrieve the change request from the customer database . In the example illustrated in the core sends a message ChangeRequest.Add that causes the remote management system to access the customer database . Alternatively in some embodiments the remote management receives the change request directly from the core without having to access the customer database .

As shown in the remote management system retrieves the change request from the customer database and stores the request in the change request queue . The change request queue may contain different types of requests. For instance the change request queue may have a request for a virtual server cloud storage load balancer etc. When the change request is ready to be processed the remote management system retrieves the change request from the change request queue and begins processing the change request. For instance a request processor may determine that the request is ready to be processed and pop the request from the queue as illustrated in . If the message is serialized the remote management system may first de serialize the change request to extract information contained in the change request.

After retrieving the change request from the queue the remote management system translates the change request to a restart message. In some embodiments the request processor translates the change request by identifying several pieces of information related to the PDU including the PDU host e.g. 2 150.abc.com the PDU and the port or plug number to which the dedicated server is connected. When dedicated servers are hosted on multiple datacenters the request processor may also identify a location of the datacenter e.g. U.S. West .

After identifying one or more of these pieces of information the request remote management system serializes the information into a format that is understandable by an actuator operating at a datacenter. In the example illustrated in the remote management system includes the message serializer for serializing the identified information e.g. PDU host port strip .

As shown in the remote management system creates a restart message based on the change request and sends the restart message to the datacenter . Specifically the remote management system sends the restart message based on an identified datacenter location. In some embodiments the restart request is sent to an appropriate actuator operating at a datacenter. For instance the remote management system may identity from the change request that the restart message should be sent to a message oriented middleware actuator MOMA at the datacenter location US West as illustrated in .

In some embodiments the MOMA listens for messages such as a restart request and stores the messages in the processing queue . When the restart request is ready to be processed the MOMA may pop the request from the processing queue and start processing the restart request. However if the message is serialized the MOMA may first de serialize the restart request to extract information contained in the restart request. This is illustrated in as the message de serializer receives the restart request from the processing queue and de serializes the message.

Once the restart request is retrieved the MOMA of some embodiments performs a validation operation. To perform the validation the MOMA determines whether the restart request from the remote management system includes enough information to fulfill the restart request. For instance the MOMA may make this determination based on the PDU information contained in the request such as the PDU ID and port number. In some embodiments the MOMA may send a change request status to the remote management system that indicates whether the validation has passed or failed.

In some embodiments the status of the restart request is forwarded from the remote management system to the multi server control panel. The multi server control panel may then display a graphical and or textual element indicating that the request sent through the control panel is being processed or has failed. For instance when the multi server control panel receives the status update it may display a graphical or textual representation indicating that the dedicated server is in the process of being restarted.

In the example illustrated in after validating the restart request message the MOMA sends one or more messages to a power strip that is coupled to the dedicated server . In particular the request processor receives the validated message and identifies several pieces of information relating to the PDU. In some embodiments the information includes a device type of the PDU PDU ID port number etc. The device type of the PDU may be necessary when a datacenter includes different types or brands of PDUs. That is different types of PDUs may use different sets of communication protocols. Hence by identifying the device type the MOMA may identify the appropriate set of protocols to communicate with a particular PDU.

As shown in the PDU receives one or more messages from the MOMA to restart the dedicated server . The PDU identifies a port number from a message. The port number indicates the port of the PDU to which the dedicated server is connected. The PDU then cycles the power to the port to restart the dedicated server . The dedicated servers are not affected by the messages because they are connected to different ports of the PDU .

In some embodiments the back end system at a particular datacenter includes a PDU controller that controls multiple power strips. illustrate example operations performed by a PDU controller to restart the dedicated server . As shown the PDU controller controls power strips and . Also dedicated servers are connected to power strip while dedicated servers are connected to power strip . In to differentiate between power strip and the MOMA sends power strip information to the PDU controller. The PDU controller may then identify the power strip based on the power strip information and send the restart instructions to the appropriate power strip. For instance the PDU controller may receive from the MOMA a PDU ID or PDU type that identifies power strip .

The core translates at B the restart request to a change request and stores the change request in the customer database . The core sends at C a message to the remote management system indicating that a new change request has been added to the customer database . Example operations performed by the core to create and store the change request are described above by reference to .

The remote management system retrieves at D the change request from the customer database . The remote management at E sends a restart message to the MOMA . In some embodiments the restart message includes a location of a particular datacenter. The MOMA sends at F a restart request status to the remote management system . In some embodiments the restart request status is sent after the MOMA validates information contained in the restart message.

The remote management system sends at G a change request status message to the core . In some embodiments the change request status is based on the restart status received from the MOMA . The core sends at H an update on the status of the restart request to the web browser . The web browser may in turn display the status of the restart request.

The MOMA exchanges at I N several messages with the PDU controller to restart the dedicated sever. As shown in the MOMA and PDU controller exchanges messages using Simple Network Management Protocol SNMP . However the MOMA and PDU controller may exchange messages using a different protocol. The MOMA sends at I a SNMP Get message. In some embodiments the get message includes a port number and a PDU ID. The PDU controller then returns at J an SNMP Status message that indicates whether the port specified in the SNMP Get message is on off or unknown. The PDU controller may send back an unknown or failure status when the controller cannot determine the status of the port. For instance an unknown case may occur when the port number indicated in the SNMP Get message is incorrect or does not exist.

When it is determined that the PDU port is on the MOMA sends at K SNMP Set Off message to the PDU controller . In some embodiments the MOMA then enters a processing loop to determine whether the specified port has been turned off. In the example illustrated in the processing loop is represented by the MOMA and PDU controller exchanging at L status messages. When the PDU port is turned off the MOMA sends at M an SNMP Set On message to the PDU controller . The MOMA then enters a processing loop to determine whether the specified port has been turned on. This is shown in with the MOMA and PDU controller exchanging at N status messages.

When the port is turned back on the MOMA sends at O a restart status message to the remote management system . The remote management system sends at P a change request status message to the core . The core sends at Q an update on the status of the restart request to the web browser . In some embodiments the web browser displays a graphical or textual element indicating that the dedicated server has been restarted.

The process starts when it receives at a restart request. In some embodiments the restart request is initially received through the multi server control panel as described above by reference to . The restart request may include a PDU ID and a port number that the dedicated server is connected to. As described above the front end provisioning system may identify the PDU and port number based on information in an asset tracking data store e.g. the asset database .

The process then identifies at a PDU and port number from the restart request. In some embodiments the process identifies a device type brand or manufacturer of the PDU. For instance the device type of the PDU may be necessary when a datacenter includes different types of PDUs using different sets of protocols for communication.

At the process requests the status of the port from the PDU. As mentioned above in some embodiments the status of the port include On Off and Unknown . In some cases the PDU will send back an unknown or failure status when the controller cannot determine the status of the port. For instance an unknown or failure case may occur when the port number indicated is incorrect or does not exist.

The process determines at whether the status of the port is unknown or the status inquiry has resulted in an error. When the status of the PDU port is unknown or the status inquiry has resulted in a failure the process contacts at support to indicate that there is an error in the system. For instance when the status is unknown or there is no response a system administrator may be notified to resolve this issue. This may require the administrator to check the physical connection and or update data in the asset tracking data store. The process returns at the status of the restart request. For instance a status report may be reported back to the multi server control panel to indicate to a user that the restart request could not be processed at this time.

When the status of the port is known the process determines at whether the port is in an off state. When the port is off the process proceeds to in order to the port on. Otherwise the process proceeds to . The process sends at a request to the PDU to turn off the port. The process then requests at the status of the port.

The process then enters a processing loop to determine at whether the request has been fulfilled by the PDU. The process may request the status of the PDU port in specific time intervals e.g. every few seconds milliseconds to make the determination. When the port has been turned off the process proceeds to . Otherwise the process returns to in order to make another status inquiry.

After turning off the port the process turns on the PDU to start the dedicated server. Specifically the process sends at a request to the PDU to turn the port on. Again the process then enters a processing loop to determine at whether the request has been fulfilled by the PDU. The process may request the status of the PDU port in specific time intervals e.g. every few seconds milliseconds to make the determination. When the port has been turned on the process proceeds to . Otherwise the process returns to in order to make another status inquiry.

When the port is turned back on the process returns at the status of the restart request. For instance a status report may be reported back to the multi server control panel that indicates to the user that the dedicated server has been restarted.

Some embodiments provide a hosting system that defines separate broadcast domains for servers of separate entities e.g. customers companies organizations using virtual local area network VLAN translation. To place dedicated and virtual servers of each individual entity in its own broadcast domain the hosting system of some embodiments includes a network switch configured to translate or map overlapping grid VLAN identifications IDs to local or switch VLAN IDs.

Each grid or includes several hardware nodes. Each hardware node in a grid may include one or more processing units e.g. a CPU multiple CPUs CPUs with multiple processing cores ASICs graphics processing units etc. memory block devices e.g. disk storage devices networking capabilities and other such computing resources. Also the resources of the grids and may be partitioned amongst multiple server configurations of different customers. For example in a virtual server for customer A is partitioned on a node of the grid . Also a virtual server for customer B is partitioned on a node of the grid .

The switch may be a physical switch e.g. a Top Of Rack TOR switch . The switch includes multiple ports for connecting the grids and and the dedicated servers and . The switch may be a Layer 2 switch that uses Media Access Control MAC addresses to route frames of data. However the switch may be another type of switch e.g. Layer 3 switch that uses other addresses e.g. IP addresses to route data e.g. packets of data .

A VLAN protocol may limit the number of VLANs on a particular grid. For example the VLAN protocol e.g. IEEE 802.1q protocol may specify that a VLAN ID includes 12 bits of data. This limits the maximum number of unique VLAN IDs to around 4096 2 12 per grid. The maximum number of unique VLAN IDs causes a problem when there are more VLANs than the maximum number as illustrated in .

As shown in the maximum number of VLANs having unique VLAN IDs has been reached in the grid . The grid includes several VLANs with overlapping VLAN IDs as VLANs of the grid . As a result virtual and dedicated servers of different customers with overlapping VLAN IDs cannot be placed on the same switch . For instance the servers and of customer B are assigned a same VLAN IDs i.e. VLAN as the servers and of customer A. This prevents the servers of customers A and B being bridged on the same switch as it will break the logical division of the customers network configurations.

In some cases one or more virtual server of a single customer is assigned both public and private VLANs. The customer s dedicated servers may need to connect to both broadcast domains so that the dedicated server s can communicate with the customer s virtual servers on the public VLAN as well as the private VLAN. In some embodiments to ensure that both environments get adequate performance and maintain complete isolation separate switches are utilized to connect the dedicated servers. Hence each dedicated server may be coupled to ports on two separate switches. For instance a dedicated server may be connected on a port of one switch for public VLAN and a port of another switch for private VLAN.

In the example described above public and private VLAN IDs of a customer s virtual server are the same. However the virtual server may be assigned different VLAN IDs for its public and private networks. Similarly the local VLAN IDs of the virtual and dedicated servers for one customer may differ from one switch to another. In addition in several of the examples described above multiple grids and dedicated servers are placed on a same switch. In some cases the number of translations a switch can perform may be limited by protocol to around 4096 2 12 translation. In some embodiments when one switch reaches a maximum number of translations another network switch may be coupled to one or more grids to support additional VLAN translations.

Many of the above described features and applications are implemented as software processes that are specified as a set of instructions recorded on a computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more computational element s such as processors or other computational elements like ASICs and FPGAs they cause the computational element s to perform the actions indicated in the instructions. Computer is meant in its broadest sense and can include any electronic device with a processor. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc. The computer readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.

In this specification the term software includes firmware residing in read only memory or applications stored in magnetic storage which can be read into memory for processing by a processor. Also in some embodiments multiple software inventions can be implemented as sub parts of a larger program while remaining distinct software inventions. In some embodiments multiple software inventions can also be implemented as separate programs. Finally any combination of separate programs that together implement a software invention described here is within the scope of the invention. In some embodiments the software programs when installed to operate on one or more computer systems define one or more specific machine implementations that execute and perform the operations of the software programs.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the computer system . For instance the bus communicatively connects the processor with the read only memory the GPU the system memory and the permanent storage device .

From these various memory units the processor retrieves instructions to execute and data to process in order to execute the processes of the invention. In some embodiments the processor comprises a Field Programmable Gate Array FPGA an ASIC or various other electronic components for executing instructions. Some instructions are passed to and executed by the GPU . The GPU can offload various computations or complement the image processing provided by the processor .

The read only memory ROM stores static data and instructions that are needed by the processor and other modules of the computer system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the computer system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a floppy disk flash drive or ZIP disk and its corresponding disk drive as the permanent storage device. Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such as a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the invention s processes are stored in the system memory the permanent storage device and or the read only memory . For example the various memory units include instructions for processing multimedia items in accordance with some embodiments. From these various memory units the processor retrieves instructions to execute and data to process in order to execute the processes of some embodiments.

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and commands to the computer system. The input devices include alphanumeric keyboards and pointing devices also called cursor control devices . The output devices display images generated by the computer system. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD .

Finally as shown in bus also couples the computer to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN an intranet or a network of networks such as the Internet. Any or all components of computer system may be used in conjunction with the invention.

Some embodiments include electronic components such as microprocessors storage and memory that store computer program instructions in a machine readable or computer readable medium alternatively referred to as computer readable storage media machine readable media or machine readable storage media . Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives read only and recordable Blu Ray discs ultra density optical discs any other optical or magnetic media and floppy disks. The computer readable media may store a computer program that is executable by a device such as an electronics device a microprocessor a processor a multi processor e.g. a chip with several processing units on it and includes sets of instructions for performing various operations. The computer program excludes any wireless signals wired download signals and or any other ephemeral signals

Examples of hardware devices configured to store and execute sets of instructions include but are not limited to application specific integrated circuits ASICs field programmable gate arrays FPGA programmable logic devices PLDs ROM and RAM devices. Examples of computer programs or computer code include machine code such as is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

As used in this specification and any claims of this application the terms computer server processor and memory all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification the terms display or displaying mean displaying on an electronic device. As used in this specification and any claims of this application the terms computer readable medium and computer readable media are entirely restricted to tangible physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals wired download signals and any other ephemeral signals.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition a number of the Figures including conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. Specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments. Furthermore the process could be implemented using several sub processes or as part of a larger macro process. Thus one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details but rather is to be defined by the appended claims.

