---

title: Customizing automated process management
abstract: Embodiments of an event-driven process management and automation system are disclosed. Such system may be particularly appropriate for a multi-tenant environment so that a single process handling flow may be generated for a given process. Because in a multi-tenant environment many different entities may desire to customize or optimize this process handling flow for their particular usage, modifications to the process flow may be easily handled by a non-technical user to realize process modification without incurring additional development costs. Using a multi-level hierarchical inheritance model in accordance with an embodiment of the present invention, a process may be standardized, with focused customization available on a macro and/or micro level.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839249&OS=08839249&RS=08839249
owner: Rackspace US, Inc.
number: 08839249
owner_city: San Antonio
owner_country: US
publication_date: 20110121
---
In many different areas businesses implement certain types of automated processes. In doing so the time and expense for manually handling a given process can be avoided. While many different types of processes can exist in different business environments some common types of automated processing environments include processes for monitoring responses or events occurring in computers or other similar types of systems business processes for handling various operations within a business and customer processes particularly with regard to handling processes related to initialization configuration and control of customer computer equipment.

While automating any of these and other processes is a goal the automation can be difficult given that there can be many different operations that are to be performed and these may be specialized depending on a given environment. Accordingly current process automation systems are inherently limited by the wide variety of processes that can be implemented by the many different types of operators and so forth.

One area in which automated processes can occur is a computer network such as a network of interconnected server computers such as the commonly known server farm. Typically in such a server farm certain processes with regard to monitoring fault management and so forth can be automated. This is particularly so as generally in a server farm all of the existing servers are of a single entity and thus requirements or desires of the entity are uniform across the various servers.

However in other computer network environments a single entity situation may not be present. That is other types of computer networks can be of a multi tenant environment in which various servers or portions thereof are associated with a given customer. This type of situation can be present in a hosting environment such as a web host storage host or a similar such hosted environment. In addition with the growing importance of cloud computing in which computing capabilities and application execution can be separated from a user the multi tenant environment can provide many challenges in attempting to automate processes.

According to one aspect of the present invention a method can be used to determine an automated process to be performed responsive to an event occurring on a computer system. More specifically in one embodiment a method includes receiving in a process determination module an event occurring on a system of a multi tenant environment. Responsive to receipt of this event a process stack of a database coupled to the process determination module can be accessed. The process stack can include in one embodiment a matrix for a process associated with the event where the process has various modules and the matrix includes for each module multiple entries each corresponding to a business unit entity and process level. Stored in each of these entries may be a value that is one of a customized value an enforced value or an inherited value. Then from this stack an execution stack can be generated that includes for each module the entries having a customized value or an enforced value. From this stack an entry may be selected for each module of the process in order to build an actual process which in one embodiment can be stored in a process action matrix coupled to the process determination module.

As one example the actual process can be built by performing a first layer of inheritance analysis on the execution stack. This analysis may include determining if any entries of a module in the execution stack have an enforced value and if so selecting the entry having the enforced value and that is associated with a highest business hierarchy level to be the selected entry. Otherwise the entry of the module in the execution stack having the customized value and that is associated with a lowest business hierarchy level can be selected as the selected entry. This first level of inheritance analysis determines which modules and their actual steps or elements will be followed in the process. Next to determine the details of each of the process steps or sub elements to be performed during execution of the module a second layer of inheritance analysis may be performed on the selected entry of the actual process and at least some entries of the execution stack. This analysis may include determining whether the selected sub element for the element or any of these entries in the execution stack has an enforced value and if so setting the element to a sub element identified by the entry that is associated with a highest business hierarchy level entry. Otherwise the element can be set to a sub element identified by a lowest business hierarchy level entry having the customized value.

Another aspect of the present invention is directed to a system that can perform the automated handling of incoming events. In general this system which can be implemented in one or more servers or other computing devices of a data center can include an event preprocessor a process determination module a process control module and an automation module.

In one embodiment the event preprocessor can receive and record events from various systems of the data center and output at least some of the events to the process determination module. In turn the process determination module may select according to a multi level hierarchical analysis at least one module of a process to perform responsive to a first event where the process is customized for a client associated with a managed system that generated the first event. In turn the process control module can receive an indication of the selected module and obtain and populate a master controller with elements of the module. Thereafter an automation module can receive the elements and execute at least one of them. In some embodiments an analysis module can be coupled to the automation module by a feedback path to receive and analyze information regarding the execution.

Yet another aspect of the present invention is directed to a system that includes a process determination module to generate for a process including various modules associated with an event an execution stack from a process stack having for each module entries each corresponding to a business unit entity and process level. Each entry in this stack can have a value that is one of a customized value an enforced value or an inherited value.

In one embodiment the process determination module may include multiple hierarchical logic units to determine actual automated operations to be performed responsive to the event. One such logic unit may generate an actual process from the execution stack according to a first hierarchical analysis that is to select for each module the entry having the enforced value and that is associated with a highest business hierarchy level if present and otherwise select the entry having the customized value and that is associated with a lowest business hierarchy level. A second such logic unit may access the execution stack and the actual process to determine sub elements details for each process step to be performed during execution of each module of the process according to a second hierarchical analysis.

In turn a process control module which may be coupled to the process determination module may receive an indication of occurrence of an event and a lifecycle of the event on a client device and determine one or more modules of the process to be executed based on the event and its lifecycle and to populate entries in one or more control queues with elements of the module s as determined by the first hierarchical logic unit. An automation module that includes control engines each coupled to one of the control queues can then receive entries from the associated control queues and execute the steps and their sub elements.

In various embodiments an event driven process management and automation system may be provided. Such system may be particularly appropriate for a multi tenant environment. In this way a single process handling flow may be generated for a given process. However because in a multi tenant environment many different entities may desire to customize or optimize this process handling flow for their particular usage modifications to the process flow may be easily handled. That is rather than incurring additional development costs e.g. developing specific code for a given entity requiring the time of a software developer to generate a process flow for a given entity instead a single process handling flow for a given process may be customized using an inheritance model. In this way a user interface that can be navigated by a non technical user can provide for process modification without incurring additional development costs.

Thus using embodiments of the present invention decreased development time can be realized for providing new automations due to an element based process construction. Furthermore using an inheritance model in accordance with an embodiment of the present invention a process may be standardized with focused customization available on a macro and or micro level.

Referring now to shown is a block diagram of an automation flow in accordance with an embodiment of the present invention. Note that the embodiment shown in is with regard to an event handling process e.g. for events occurring within a computer network. However the scope of the present invention is not limited in this regard and an automation flow as described herein can be used in many other types of processes. Also understand that the illustration of is at a high level and more or different components can be present in particular embodiments. As seen a computer network which may be a multi tenant server farm having many different servers e.g. tens of thousands of servers such as blade servers interconnected storage devices and so forth may trigger events that are provided to an event preprocessor . In various embodiments event preprocessor may be implemented in one or more servers to provide for receipt and initial handling of incoming events from computer network . In some embodiments event preprocessor may be substantially co located with at least portions of computer network although the scope of the present invention is not limited in this regard.

During both normal operation as well as responsive to failures computer network may generate various events. Many different types of events are possible. As examples such events may include monitoring events which report on monitoring that occurs on a given server. Other events may correspond to database events which are events occurring when a watcher senses changes in a portion of a database e.g. where data is stored. Still further events may be scheduled events which correspond to routine monitoring or maintenance events that are performed on the various servers. Other events may be generic triggers such as shopping cart events or employee lifecycle events for example. Any of these or other events may be provided to event preprocessor .

In various embodiments event preprocessor may parse the incoming information which may be in the form of different message types e.g. having different data communication protocols and including various information including header information as well as the event information. Accordingly event preprocessor may log the incoming events to maintain an independent record of the received events and preprocess the events e.g. by filtering certain events if they are determined by the preprocessor to be not suitable for further processing. This filtering may be performed based on information in a filter database which provides various rules for preprocessing of a given type of event.

Still referring to event preprocessor may thus process an event stream or provide endpoints for event submission and provide various incoming events that have been selected for further processing to an automation module . As seen in the illustration of various events may be provided in an event stream which may include monitoring events database events scheduled events and other triggers. Automation module may perform two general actions first forwarding an incoming event to a process control module and second taking an appropriate automated action after being instructed accordingly.

As discussed further below process control module may determine a responsive action for automation module to perform responsive to a given event based on various information available to process control module . Accordingly responsive to an incoming event automation module may first communicate with process control module to indicate the event. This indication may include information regarding the particular customer and the type of event that occurred. Then in response to this information process control module may perform various calculations look up different information in various databases and provide a process indicator to automation module . In turn automation module may perform its second general action namely taking one or more actions responsive to the process indication.

Assume that the event is some type of monitoring event to indicate a failure or other happening occurring in a computer system of the network. The action indicated to occur by process control module may be a notice that can be transmitted by automation module as instructed. As seen in the example of the discrete action to be taken by automation module in this regard may be one or more of various communications such as a short message communication SMS an auto call an e mail ticket generation and transmission diagnostics analysis or event resolution.

With regard to process control module note that various users may interact with this module. Furthermore via a high level user interface non technical users may perform such interaction. That is rather than requiring the resources and expense of software developers engineers or other technical individuals non technical users can access and customize a process response for a given customer e.g. of the multi tenant environment. For example the non technical users may be customer representatives who based on information from a customer can modify a standard process using an inheritance model in accordance with an embodiment of the present invention. As such the need for advanced technical users to create a process flow for a given customer responsive to a given event can be avoided. While shown in at a high level with regard to this specific arrangement understand that in many embodiments various additional tools and modules may be present and may be in communication with each other. In addition users may interact with different modules of the system in order to implement self control.

Referring now to shown is a block diagram of an overall system in accordance with another embodiment of the present invention. As shown in system may include various components that can be present in one or more locations. For example the various modules tools engines and so forth shown in may be part of one or more servers or other computing systems.

As seen in system may include a customer environment . The customer environment can take many different forms and may be one or more servers of a customer either present at a customer location or located in a multi tenant environment. The customer environment can include many different components and in addition to the servers data storage devices and so forth may also be present.

During operations process triggers may occur within devices of customer environment . These triggers may correspond to scheduled processes database analytics monitoring sensors direct injection or other such triggers such as routine reports performance monitoring failure information or so forth. As seen these triggers may thus generate events that can be processed in the form of an event stream and event application programming interfaces APIs which can be provided to an event to grid engine EGE . In various embodiments EGE may journal every event that enters the system and parse certain information from the events for journaling. While the scope of the present invention is not limited in this regard EGE may take the form of a module that can receive and handle initial processing of incoming events such as logging or so forth . The journaling performed by EGE may occur within a journal database not shown for ease of illustration in .

In turn events may be provided to an event preprocessor e.g. in the form of an event preprocessing engine EPE . In various embodiments EPE may take the form of one or more servers at a centralized location e.g. of a multi tenant environment. Event preprocessor may perform various handling on incoming events including enrichment filtering standardization and so forth. For example in some implementations the event preprocessor may first enrich incoming events with business and event data lineage. Or if an event is a new event it may register the event e.g. in an event database to which the event preprocessor is coupled note that this event database is not shown for ease of illustration in . As to filtering the event preprocessor may check suppression business rules to verify whether the event should be processed. For example a suppression manager which may be part of the event preprocessor or coupled thereto can be used to perform various filtering based on the events and other information. For example these rule sets could include flood valves patching suppression business rules duplication rules suppressed events for offline devices and so forth to filter certain events from further processing. In addition the suppression manager may act to filter events on a schedule determined by customers and customer representatives and scheduled through a user interface. Thus certain types of events may be filtered out and not further processed.

Also because the events may be incoming from many different types of customer environments and systems these events can be in different formats. Accordingly event preprocessor may handle these different event types to place them in a general standardized form for further handling.

In turn events from event preprocessor may be provided to a process determination engine PDE which may include at least some functionality of the process control module discussed above regarding . In general process determination engine may be configured to receive an incoming process request from EPE e.g. a Get Process request and to calculate an execution stack for the process based on the received event. This execution stack may be calculated from information present in a process stack that includes a matrix of all possible processes that can be performed. As discussed further below this process stack may be organized by process module and business unit hierarchy with each business unit hierarchy having multiple process layers associated therewith . The resulting execution stack may correspond to a list of possible process modules to be executed responsive to a received event.

This execution stack can then be refined to thus generate a list of actual process modules to be executed that may be stored in a process action matrix. As will be discussed this list may be determined based on an inheritance model in accordance with an embodiment of the present invention. This list of process modules to be executed however alone is insufficient to provide full details for execution of the selected modules. Instead in various embodiments from this list of process modules another inheritance model in accordance with an embodiment of the present invention may be run to thus generate details of the actual steps to be performed in each process module selected for execution. This list of actual steps and their details to be performed may be stored in a process action elements table which can later be accessed by a process control engine to obtain the actual steps for execution.

Accordingly process determination module may provide a list of process modules back to EPE . In turn EPE may communicate this list of process modules to a process control engine PCE . In general process control engine may determine a lifecycle of the event associated with the selected process modules based on parameters defined in process determination engine . That is PCE may communicate with process determination engine to determine the lifecycle based on parameters including ticket reporting options recurrence settings or other such settings such as whether the event is a first event a subsequent event a cleared event or so forth.

Still further in one embodiment PCE may then perform a final suppression check which in one embodiment may be based on business suppression rules in EPE . Thus based on all of these determinations and the suppression check PCE may identify one or more process modules that are to be executed based on the type lifecycle of the event and so forth. PCE may thus prepare the modules for execution flag the first step to be executed and provide them to a process control engine master .

In various embodiments process control engine master may operate to store a list of steps to be performed for each module and to identify an initial step that is ready for execution. In addition as will be discussed further below process control engine master may be coupled to receive status information regarding execution of process steps and take appropriate action to prepare new or different steps for execution.

When a given process module step is ready for execution as indicated by a set ready flag the step may be sent to an appropriate queue. That is process control engine master may be coupled to a set of queues each to store entries corresponding to process steps to be performed by a given control engine. Accordingly process control engine master may identify the type of steps to be performed and provide it to the appropriate queue for storage until it is ready to be executed by the corresponding control engine. To that end system may further include a plurality of individual control engines which may collectively form an automation module. Each such control engine may be configured to perform one or more given types of process steps. Note that each control engine may group consecutive like process steps. In addition the engines may swap out and write variables back to databases or so forth depending on steps. In some embodiments the engines may be configured to receive a batch of actions from the corresponding queue . For example in one embodiment the engines may be configured to receive a set of 10 actions to be performed.

Accordingly control engines may execute various steps for its associated type of action. As seen in the embodiment of these different control engines may perform different tasks including for example internal ticketing customer ticketing analytics process determination actions diagnostics e mail messaging SMS messaging instant messaging auto call messaging or other actions. Note that the various actions taken by these different control engines may be implemented via communication with APIs services third party applications and so forth.

When a given action performed by one of the control engines has completed either successfully or unsuccessfully results may be provided to an analysis engine . In various environments analysis engine may analyze the status results of the action performed. Different settings may determine whether the step was successfully performed needs to be retried results in jumping to a different module in the process or triggering an out of band alert e.g. on an error. That is it is possible that a given process step that is executed does not successfully complete. Accordingly in this situation analysis engine may communicate via an out of band channel to provide an alert on the error. Note that in some embodiments a failing process step may be executed a threshold number of times to attempt successful execution prior to raising an error and issuing an out of band alert. With this out of band channel embodiments thus may provide information regarding the failure so that the automated process handling does not lose an event and corresponding process handling.

Further with regard to analysis engine when a process has successfully completed a message may be sent to process control engine master to update a given process module accordingly. For example the completed step may have its status updated to completed and a next step in the process module may be flagged as being ready for execution. If instead analysis engine determines that a jump to a new module is indicated responsive to either success or failure of a given step of one module an appropriate update message can be sent to process control engine master . For example when jumping to a new module the message may instruct the master to close the last completed step of the old module as completed and cancel all remaining steps in that module and update the new module with its identified steps and flag the first step of this new module as ready for execution. While shown with this particular implementation in the embodiment of understand the scope of the present invention is not limited in this regard.

To further understand how process automation in accordance with an embodiment of the present invention occurs it is instructive to consider the arrangement of hierarchies of business units and processes. As discussed above embodiments are particularly suited to enable a non technical user to customize a selected process for a given customer. In other words a baseline set of processes may be present in the system and for any given customer various components of a given process can be automated to handle the event as desired by the particular customer. Accordingly embodiments may provide customization for subsets of customers devices events or even specific customer events devices events. This customization can be realized in the handling of various automated process steps itself and ticket handling or other reporting events.

Baseline processes may be set in the system as determined by a process manager. This process manager may correspond to a highest level entity of a business unit structure for which its process is associated. For example in a multi tenant environment different business unit structures may be present e.g. for different customers or groups of customers. In yet other embodiments a single business unit structure may be present with additional levels within a business unit structure to be added or deleted over time. That is embodiments may provide for a dynamic hierarchical structure with regard to business units.

Referring now to shown is a hierarchical diagram of business unit structures and process level structures in accordance with an embodiment of the present invention. As shown in a business unit structure is provided that may include various hierarchical levels. As seen these hierarchical levels may include an organization unit segment team account and device.

Additional hierarchy levels may dynamically be added over time. For example as a business evolves a business unit structure hierarchy may evolve to include new business layers for process management. Thus as seen additional hierarchy levels including worldwide corporate region sub account and other levels can be dynamically added. Note also that in different embodiments the active business units e.g. those hierarchy levels on the left side of business unit structure may have labels that can change depending on the environment in which processes are being managed.

As further illustrated in a process level structure may also be present. This process level structure provides a hierarchy for processes that can be performed for a given business hierarchy level entity. Similar to the business unit structure process level structure may be dynamic and can include active process levels which provide a lineage that any event and or process trigger may have. Depending on process needs individual event sources can consider all or some of the process hierarchy levels. Further dynamic process levels may be added over time e.g. as a business evolves process levels may change to provide additional flexibility in process management. Note that each process level may be available for use at every business unit hierarchy level within the business unit structure unless the business decides to restrict what levels are available at a given business unit level.

As seen in the embodiment of process level structure may include a plurality of active process levels including application custom sets source type group and events. Note further that the custom sets of the process hierarchy level may allow a single process to be associated with multiple events groups types sources applications devices and may potentially apply to other process levels of business units. Note that in various embodiments there can be multiple custom sets for a single device which can be stacked by rank and which may be modified e.g. via a user interface.

As further seen in each layer in the process level hierarchy may provide an illustration that at every process level specific exceptions can be defined. As seen in the specific illustration of these specific exceptions may include a device type exception OS exception and one or more time based exceptions. Note that these exceptions may be inserted within the hierarchy after a normal process and these exceptions may be stacked by rank. These exceptions can also be dynamically added as business evolves.

Note that the above discussion with regard to customization of a process is with reference to the operations performed by a process customization module in accordance with an embodiment of the present invention. To further understand how the customization process can be implemented by a non technical user it is instructive to look at an example customization for a sample process.

For ease of illustration discussion is with reference to a process for executing a brunch which consists of three different modules namely an invitation module an execution module and a closing module. As seen in the illustration of there are various business unit hierarchies namely a highest level hierarchy corresponding to a corporate level and for which a standard process is identified a segment level and an account level. For each module it may be possible to have a customization of the operations to be performed in the different modules for each user of a given level . As seen for the corporate level hierarchy a specific set of operations are set forth for each of the process modules. With regard to the segment unit some of the operations performed can be customized meaning that the operation s can be in variance from the operation s for the corresponding module according to the standard process operation s e.g. the invitation module is different in the segment level than in the corporate level . Further for the segment unit some operations are inherited meaning that the selection of the process by the higher level hierarchy is passed to the lower level hierarchy. Specifically as seen with regard to the second module namely execution the segment inherits the operations selected by the corporate level hierarchy. Finally with regard to the last module namely the closing the segment hierarchy may choose a different operation such that it is customized and have that operation enforced meaning that members of all hierarchies below that level must perform the same operation. Thus table entry A shows execution of a customized process by the segment level entity.

As seen in with regard to a lower level hierarchy member namely at an account level a different or customized process can occur for the invitation module while the entity chooses to inherit the same operations as the segment level as for the higher level for the execution module and is enforced to perform the same operations as the segment level for the closing module. Thus as seen further in for an account hierarchy entity the specific operations shown in table entry B are performed.

Accordingly for different operations performed in various modules of a process some of the elements can be customized elements where the operations performed can be customized at any level of a business hierarchy. Yet other elements can be inherited elements in which no customization is made and the operations to be performed are inherited from a higher level in the business unit hierarchy and changes inherited. Still further other elements can be enforced such that the element itself may be customized for a particular business unit hierarchy but from that hierarchy on down the element is enforced to be operated as indicated.

To understand more specifically how process customization in accordance with an embodiment of the present invention can work it is instructive to understand various elements of a process and how they interact with the business level and process layer hierarchies. Referring now to shown is an illustration of a process structure in accordance with an embodiment of the present invention. As shown in process structure may include a plurality of hierarchies from the process level which may be an identification of the process itself namely a complex set of operations to be performed e.g. responsive to a given event. For purposes of discussion an example process in the context of an incident response is described. As discussed each process may be associated with a specific event type of event or so forth. Process includes a plurality of process hierarchy levels including a process phase level a process module level a process element level and a process sub element level . In general the module level and lower levels can be customized while the phase level may provide for visualization of an overall layout of a given process.

As seen in in the particular embodiment of an incident response process process phases may include an initial alert phase subsequent alerts phase recurring alerts phase alert cleared phase failed automation phase optional phase and options phase and can grow. As seen further in the hierarchy of one or more modules may be associated with each process phase. Specifically the initial alert phase may include an initial messaging module a corrective actions module and a closing actions module. Similar and different modules may be present and associated with each of the other phases of the process. In turn each module may be broken up into individual process elements corresponding to specific steps that are to be performed within the module. For example the initial messaging module of the initial alert process may include a send e mail step a send SMS step and create an internal ticket step. Note further that each process element or step may be further subdivided into multiple process sub elements which may provide detailed operations for each step. While shown with this particular illustration in the embodiment of understand the scope of the present invention is not limited in this regard.

As a further aid in understanding how various process modules steps thereof and so forth can be identified responsive to receipt of a given event it is instructive to understand the organization of possible operations available to be performed for a process. Referring now to shown are illustrations of a process stack in accordance with an embodiment of the present invention. As shown in D process stack may be formed as a matrix or array of entries each corresponding to an identification of a module of a process as selected by each different business unit hierarchy level. In turn each business unit hierarchy level may include a full process layer hierarchy. Note that while shown at the module level in in some embodiments each entry within the matrix may include information for sub module levels including which elements are defined in a module and may be defined at the sub element level. As specifically shown in process stack includes a plurality of process modules x. For ease of illustration only a few modules are shown with entries in the process stack. All of these process modules combined may collectively form a full process. However only certain modules may be performed responsive to a given event.

As discussed above each module entry for a given business unit hierarchy level can have one of an inherited customized or enforced value. In addition the information present in each entry may include pointers or unique identifiers to locations of additional information for the corresponding module such as location of instructions regarding the elements or steps to be performed in the module. In the specific illustrations of these module entries that are identified by a general description may correspond to an inherited value while those having vertical crosshatching may be customized modules and in turn those having horizontal crosshatching may correspond to enforced modules. Note that the specific process module definition possible for a given one of the process modules may be set by each business unit and each level within the process layer hierarchy. For example with reference to an organization unit five process layer hierarchies may be present. More specifically an application sets source type group and event levels may be provided as well as exceptions at any level. Each of these different levels may have a given process module value associated with it. In the specific illustrations of the application level value is set at customized the source level value is set at enforced and the remaining levels namely type group and events are set at inherited. Similar other values shown in the illustrations of may be set as desired by a given customer.

This process stack may be calculated at run time responsive to receipt of an event to determine what process modules are to be executed. To determine given process modules to be executed a first level of inheritance analysis may be performed. More specifically a Get Process operation may be requested e.g. by an event preprocessor responsive to receipt of an event to determine all possible process modules that can be executed for the given event. Referring now to shown is an execution stack that results from accessing the process stack of . More specifically all matches corresponding to either the customized value or the enforced value for each of the modules may be obtained to form an execution stack for the process. As seen this execution stack thus populates for each module a list of values from the process stack in hierarchical order that have a value of customized or enforced.

Then from this execution stack an actual process may be calculated. More specifically this actual process may be obtained via a first level inheritance calculation. This first level inheritance calculation may be realized in two manners. First an enforcement analysis may be performed that follows the business unit hierarchy in a top down manner such that a highest level business hierarchy level having an enforced value may be selected as the appropriate process module entry for the execution stack for the given module. If instead no business level entries exist having an enforced value for the module then a natural selection that follows the reverse business leveling tree may be performed such that a bottom up selection occurs so that the entry corresponding to the lowest business level hierarchy entity having a customized value is selected.

Accordingly each module entry of the actual process determines the steps to be performed and results from the identification of either the entry of the highest business level hierarchy entity having an enforced value or the entry of the lowest business level hierarchy entity having a customized value where the corresponding module does not have any business unit entry having an enforced value . Thus the actual process provides an indication of which process modules will be used establishing the structure of that module. For example with reference to the initial messaging module of actual process entry B is selected and can be used to later determine what elements will be followed for that module. Thus while this actual process thus identifies the modules that are to be executed according to a waterfall hierarchy the specific attributes that are defined for each step within these modules is still not known. In other words the modules determine the steps elements to be performed while the attributes sub elements have yet to be determined.

Instead to identify the attributes for each step a second layer of inheritance analysis may be performed. The second layer of analysis may operate in the same manner as the first layer of inheritance analysis. That is to determine actual process sub elements to be performed for a given module information from the execution stack may be accessed and an inheritance analysis in accordance with an embodiment of the present invention can be performed. Referring now to shown is an illustration of operation of a second layer inheritance analysis on a single module namely an initial messaging module to thus realize the actual sub elements or steps of the process that are to be executed for each step of the module. As seen this example for initial messaging module includes four elements or steps .sub.a .sub.d. Each module may include anywhere from 0 n number of process steps elements . Each step is itself formed of multiple process sub elements . Specifically for process step .sub. namely create a new internal ticket five sub elements .sub. .sub. are present. To determine the actual operations to be performed for each of these sub elements reference may again be made to the actual process and the execution stack. Specifically with reference back to the execution stack entry selected as part of the full process list for this module was entry B. Also because this module was at an enforced value it is also appropriate to analyze additional entries of the execution stack. Namely one or more customized values for business hierarchy levels higher than the enforced level may also be obtained and analyzed. Thus as seen in an entry A having a customized value for a higher level business hierarchy may also be obtained. From the possible process entry selections the inheritance analysis may be performed as discussed above. That is if for a given column of the sub element execution stack one or more enforced values are present the highest hierarchy level enforced value operation may be set for the actual executed operation. Otherwise if there are no enforced values present in a given stack column the lowest entry having a customized value is identified in the operation indicated for this entry can be set for the actual executed operation. Each process step Element will only work through the second layer of inheritance where the step has an identical identification number. For example the aforementioned create a new internal ticket element was inherited and shares a unique identification number for second layer inheritance whereas if you were to delete that step in the process and re add the same element as a wholly new step it would get a new unique identifier and would no longer inherit from the step above it.

Referring now to shown is a block diagram that illustrates interaction between various modules present in a system in accordance with an embodiment of the present invention. As shown in system includes various databases or stacks that can provide information to various modules and a pipeline along which events flow from receipt in the system to execution of one or more process steps for the event. In addition system may include various components some of which may be implemented via dedicated servers others of which may be coupled to the various components e.g. by way of network interfaces or so forth.

As to the pipeline along which events flow as seen in incoming events e.g. received from one or more client devices of a multi tenant environment may be provided to an event preprocessor for event processing. Responsive to a received event the event preprocessor may seek a determination of particular customized process elements to be performed via a process determination engine . When a given process is set event preprocessor may provide an indication of corresponding modules to be performed to a process control engine which may be in communication with various databases to provide for identification of actual operations to be performed. From this information process control engine may direct the particular operations to a given one of multiple control engines for execution of the specific operations.

With regard to process determination engine as seen in the embodiment of it may include various logic including a first level hierarchy logic and a second level hierarchy logic . Of course additional logic may be present in the process determination engine such as a process customization engine not shown in . When information regarding an incoming event is received in process determination engine first logic may execute to determine a set of modules i.e. an execution stack corresponding to a customized process to be performed responsive to the event. This determination may be made based on information present in a process stack . Accordingly from this information first logic may generate an execution stack and from this execution stack a first level of hierarchical analysis may be performed to determine specific modules to be performed which can be stored as an entry corresponding to an actual process in a process action matrix .

Then based on additional information regarding the event such as a lifecycle of the event second logic may access the particular modules from the actual process relevant to the lifecycle stage and furthermore access the execution stack to perform a second level of hierarchical analysis to thus determine the actual details sub elements of process operations to be performed in the identified modules. This information may be stored in a process action elements table . Note that the various databases shown in including process action matrix and process action elements table may act as reference tables which only include pointers to other data structures that include full information such as the particular operations to be performed. Accordingly to enable process control engine to access the actual detailed information regarding elements to be performed a translation engine not shown for ease of illustration in may be present to thus translate these pointer references into actual instruction execution streams. Although shown with this particular implementation in the embodiment of understand the scope of the present invention is not limited in this regard.

With the above discussion regarding customization of processes it is instructive now to consider how a customized process can be executed responsive to an associated event received in a process automation system in accordance with an embodiment of the present invention. Referring now to shown is a flow diagram of a method for handling a customized process responsive to an event. As seen method may begin by receiving an event in an event database block . As discussed above this event database may be located in various places and in general may be a storage that is accessible to other portions of the process control system including an event preprocessor.

Accordingly as seen in control passes to block where the event may be preprocessed. This preprocessing may thus take the event and place it into an appropriate form for handling by the remaining portions of the process control system. Next it may be determined at diamond whether the event is filtered. If so the method for handling this event may conclude. Otherwise control passes to block . At block an execution stack may be determined for the selected event and entity. More specifically based on the particular customer e.g. identity and business hierarchy level and event a full process stack for the corresponding event and entity can be accessed and from that information an execution stack may be determined. Specifically this execution stack may correspond to for each module of the process a list of all entries of the process stack that have a value of customized or enforced.

As further seen in control passes to block where a first level hierarchical analysis may be performed to thus determine an actual process where each module may have a single entry identified for it in the actual process. Then control passes to block where a lifecycle of the process may be determined. This lifecycle determination may be based on e.g. information obtained with the event such as type of event and number of occurrences of the event or so forth. Control then passes to block where one or more indicated modules of the actual process stack may be accessed based on the lifecycle. Furthermore these indicated modules may also have their entries within the execution stack accessed such that from these available entries the actual process steps to be performed within the indicated modules can be determined and then their details sub elements can be determined based on a second level hierarchical analysis block . These actual process steps and their details that are thus determined by this hierarchical analysis may be stored in a process action elements table block .

Control then passes to block where execution information may be provided to a process control engine master. For example in one embodiment actual process steps present in the process action elements table may be used to access a storage that includes the particular instructions to be performed for each of the indicated process elements or sub elements. This information may thus enable queuing of process steps in various queues associated with different control engines block .

Accordingly control passes to block where process steps may be executed in one or more control engines based on this execution information. Furthermore responsive to the execution various analyses may be performed e.g. in an analysis module so that the process control engine master may be updated based on success or failure of particular process steps block . Furthermore if an error is indicated an out of band failure report may be generated and forwarded. While shown with this particular implementation in the embodiment of understand the scope of the present invention is not limited in this regard.

As described above processes can be customized for various customers. Note that because of the capabilities of a process control module to handle automated processes and further by way of a hierarchical inheritance model in accordance with an embodiment of the present invention a non technical user such as an account representative for a customer or the customer itself can easily and efficiently customize a given process.

Reference can now be made to which is a flow diagram of generating a customized process in accordance with an embodiment of the present invention. As shown in a method may be used to perform process customization for a given customer. Method may be performed during process customization in a process customization module which may be part of a process determination module e.g. the process determination engine of when triggered by a user e.g. an account representative or a customer itself.

Note that customization of a process may be performed on a module by module basis. That is with regard to any given process it may be subdivided into modular components that slice and dice the process for modular process management. During customization possible elements of one or more modules of a global process to handle a given event may be extracted using customer selection and custom set overrides. That is for a particular event various process steps are possible and all of these possible steps can be identified and extracted using customer selections and custom set overrides which may correspond to directives or enforcement by an inheritance model. That is higher level business units in the hierarchy and process layer levels can dictate that a particular operation is to occur for a given event and can enforce this dictate to the lower levels of a hierarchy for the business unit and or process layer.

Thus inheritance and enforcement can occur when customizing a given process. Referring now to shown is a flow diagram of further details of how an inheritance model and enforcement operations can be realized in one embodiment. More specifically the operations performed in method may be for a given module of a multi process module for which customization is desired. As seen in method may begin by receiving information regarding a business hierarchy level and a process layer hierarchy level associated with a customization request. The process customization module can access this information to determine the hierarchy level. Control then passes to diamond where it may be determined whether a business hierarchy associated with the request is less than a maximum level. Thus for any entity other than corporate level entity e.g. of a multi tenant host environment the business hierarchy will be determined to be less than the maximum level otherwise the method of concludes .

Accordingly control passes to diamond where it may be determined whether enforcement is set for a given module by a higher level. If so control passes to block where the module can t be modified as its set to the enforced operation s . That is when a higher level business entity of the business hierarchy determines that it desires a given module to be enforced for all lower levels of the hierarchy the ability to customize that module by a lower level entity is no longer available for that process level and below.

If instead it is determined that enforcement is not set control passes from diamond to diamond where it may be determined whether the customer wants to customize the given module. If not control passes to block where no action needs to be taken on that module as its set to one or more inherited operations by default. That is because the customer does not wish to customize this given module its operations are inherited from a higher level in the business hierarchy. In particular embodiments the inheritance may be from the immediately preceding level above a given customer s level or higher although the scope of the present invention is not limited in this regard.

Referring still to if instead it is determined that customization is desired control passes to block . At block a user input may be received regarding the selected operation s . Here user input may be received to indicate the one or more operations to be performed for the given module. Note that in many implementations the range of user selected operations may be limited to those available to a user in a graphical user interface. For example for a given module a scroll down or other user selectable set of operations may be displayed to the user to thus set the one or more operations to be performed for the given module.

Still referring to control then passes to diamond where it may be determined whether the user selected operations are valid. That is in some embodiments only a limited number of operations may be allowed for a given user or module. Thus if the user selections are in variance with such a predetermined list of authorized operations control can pass back to block to receive additional user input for authorized operations. If instead at diamond it is determined that the selected operations are valid control passes to block where the module may be set to the user selected operation s . Thus processing may be completed with regard to a particular user for customization of a particular module. In a multi module process the method of may be executed for each module of the process. While shown this particular implementation in the embodiment of the scope of the present invention is not so limited.

Referring now to shown are example graphical user interfaces for a process customization module in accordance with an embodiment of the present invention. As shown in user interface may provide an editor function to enable a non technical user to add modify delete existing operations in a given process for a particular entity. As shown by user interface a palette of potential steps is provided where steps can be added to the process reflected in builder panel . In relevant parts note that the user interface includes a set of tabs that can be used to access the different phases modules of a process. In the illustration of an initial phase is selected and is shown to include several different modules and several different elements namely an initial messaging module a response corrective action module and a ticket routing or closing message module. As seen each of these modules can be customized and each such customized modules can include multiple elements that can be created modified deleted e.g. using intuitive user interface functionality such as click drag and drop or so forth. Note that instead of having customized operations for this module one or more functions of the module can be inherited or enforced for particular entities.

Referring now to shown is another user interface that provides a process list for a given entity. Different customized processes at different process levels are shown each of which can include various identification information. In addition particularized modules of process can be identified for these modules may be indicated e.g. by icons whether the given element or operation is inherited customized enforced.

Referring now to shown is an example user interface for customizing an element of a process module in accordance with an embodiment of the present invention. As shown in a send email element of a process module can include various sub elements each of which can be customized as shown in the user interface. If a user decides not to customize a given sub element the sub element may instead be inherited from a higher level within a hierarchy. These sub elements may be modified through text input or by drag and drop of variables objects represented in the left panel. These variables may be dynamic variables or static variables stored in other databases.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of non transitory storage medium including optical disks solid state drives SSDs compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

