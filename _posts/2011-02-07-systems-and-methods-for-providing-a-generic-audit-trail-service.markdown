---

title: Systems and methods for providing a generic audit trail service
abstract: Systems, methods, and computer readable media are disclosed for providing a generic audit trail service for a plurality of business objects, at least two of the plurality of business objects being of different business object types. In one implementation, a computer-implemented method is provided that comprises receiving, at an application server, a notification of a change associated with at least one of the plurality of business objects, and requesting, in response to receiving the notification, auditing data from the at least one business object, the at least one business object implementing an auditable function set to interface with the application server. Further, the method includes receiving, through a called method of the auditable function set, the requested auditing data, and storing the received auditing data in a repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08352958&OS=08352958&RS=08352958
owner: SAP AG
number: 08352958
owner_city: Walldorf
owner_country: DE
publication_date: 20110207
---
This is a division of application Ser. No. 11 508 227 filed Aug. 23 2006 now U.S. Pat. No. 7 937 712 and claims the benefit of priority from prior European EP Application No. 06290711.8 filed Apr. 28 2006 the entire contents of both which are incorporated herein by reference.

The present invention generally relates to data logging and more particularly to systems and methods for providing generic audit trail services.

There is and will continue to be advances and changes in how organizations conduct business. Whether these advances and changes occur through growing competition and globalization mergers and acquisition or a revamping of business models the key for success will often depend on how quickly an enterprise s information technology IT organization can adapt to evolving business needs. Therefore a major challenge to these enterprises is how they handle change.

For organizations to maintain business agility they must ensure that enterprise applications are not only high performance business engines driving efficiencies but also that they become flexible building blocks of future business systems. A recent and promising solution has risen in the form of services. A service such as a Web service or program represents a self contained and self describing piece of application functionality that can be found and accessed by other applications. A service can be considered self contained because the application using the service does not have to depend on anything other than the service itself. A service can be considered self describing because all the information on how to use the service can be obtained from the service itself. Further descriptions for a service can be centrally stored and accessible through standard mechanisms.

Instead of requiring programmers to establish and maintain links between applications services are often loosely coupled making connections simpler and more flexible and allowing application architects to more easily find and understand services offered by other cooperative applications. However a problem that exists with conventional services is that they are often designed to expose functionality of individual applications and thus are too limited to be efficient building blocks for enterprise wide business processes. A solution to this shortfall has been the migration to a Service Oriented Architecture SOA . SOA is an open architecture middleware which builds on the benefits of services. An example of an SOA can be found in the Enterprise Service Framework ESF which is commercially available from SAP AG Walldorf Germany . The term SOA may also be used to refer to distributed objects architecture such as CORBA Common Object Request Broker Architecture and DCOM Distributed Component Object Model .

SOA enables the abstraction of business objects modeled as services also referred to as enterprise services from actual applications. Aggregating services into business level enterprise services may provide more meaningful building blocks for the task of automating enterprise scale business scenarios. Enterprise services may also allow IT organizations to efficiently develop composite applications which compose functionality and information from existing systems to support new business processes or scenarios.

SOA also enables the use of an enterprise services repository. An enterprise services repository stores relevant pre existing enterprise services and makes them available to selected partners and customers. By using the enterprise services repository these selected partners and customers can use the pre existing enterprise services to aid in the implementation of new services and corresponding business objects. An object refers to a software bundle of variables e.g. data and related methods. For example in object oriented programming an object is a concrete realization instance of a class that consists of data and the operations associated with that data. The term business object BO represents a physical or logical object of significance to a business such as a purchase order GLAccount production order project product cost estimate etc. BO is one instance of an business object type wherein the business object type refers to a generic definition of business objects that describes the general characteristics and common attributes.

Frequently there are many situations where a business should record changes to BOs implemented by partners and customers. For example an online transaction processing system should record alteration creation or deletion of a BO and its transactional data in order to track changes for internal or regulatory reasons such as for financial audits. Currently there are different specialized auditing solutions for different BOs. However in current systems existing SOAs fail to provide robust and flexible auditing services. Instead current solutions are specific and cannot be used by any kind of BO in a SOA. In addition current solutions are costly to design implement and maintain. Therefore there is a need for improved enterprise services to provide a generic audit trail service that can be used by all kinds of BOs.

Embodiments consistent with the present invention relate to systems methods and computer readable media for providing a generic audit trail service. The generic audit trail service may be provided for a plurality of business object types. Embodiments of the invention also relate to systems methods and computer readable media for providing auditing services that can alleviate one or more of the above described disadvantages existing in the related art.

Embodiments consistent with the invention include a computer implemented method for providing a generic audit trail service for a plurality of business objects at least two of the plurality of business objects being of different business object types. The method comprises receiving at an application server a notification of a change associated with at least one of the plurality of business objects and requesting in response to receiving the notification auditing data from the at least one business object the at least one business object implementing an auditable function set to interface with the application server. The method also includes receiving through a called method of the auditable function set the requested auditing data and storing the received auditing data in a repository.

Embodiments consistent with the invention also include a system for providing a generic audit trail service for a plurality of business objects at least two of the plurality of business objects being of different business object types. The system comprises an element for receiving at an application server a notification of a change associated with at least one of the plurality of business objects and an element for requesting in response to receiving the notification auditing data from the at least one business object the at least one business object implementing an auditable function set to interface with the application server. Further the system includes an element for receiving through a called method of the auditable function set the requested auditing data and an element for storing the received auditing data in a repository.

Embodiments consistent with another aspect of the invention include a computer program product including instructions for execution by a processor to perform a method for providing a generic audit trail service for a plurality of business objects at least two of the plurality of business objects being of different business object types. The method comprises receiving at an application server a notification of a change associated with at least one of the plurality of business objects and requesting in response to receiving the notification auditing data from the at least one business object the at least one business object implementing an auditable function set to interface with the application server. Further the method includes receiving through a called method of the auditable function set the requested auditing data and storing the received auditing data in a repository.

Embodiments consistent with yet another aspect of the invention include a computer implemented method for accessing stored auditing data maintained by a generic audit trail service that provides the service to a plurality of business objects. The method comprises receiving a search request from a user providing auditing data that matches the search request to the user receiving a selection from the user of a subset of the provided auditing data for review by the user providing to at least one of the plurality of business objects associated with the selected subset the associated auditing data and requesting the at least one business object to display the selected auditing data.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and should not be considered restrictive of the scope of the invention. Further features and or variations may be provided in addition to those set forth herein. For example embodiments of the invention may be directed to various combinations and sub combinations of the features described in the detailed description.

Additional objects and advantages of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The objects and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims.

Reference will now be made in detail to exemplary embodiments consistent with the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

The following detailed description refers to the accompanying drawings. While several exemplary embodiments and features of the invention are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the invention. For example substitutions additions or modifications may be made to the components illustrated in the drawings and the exemplary methods described herein may be modified by substituting reordering or adding steps to the disclosed methods. Accordingly the following detailed description does not limit the invention.

Embodiments consistent with the present invention are directed to systems methods and computer readable media for providing generic audit trail services. Embodiments consistent with the invention may be implemented in various environments including computer based environments such as personal computers workstations servers laptops personal digital assistants PDAs mobile phones handheld devices and other computing devices workstation networked and other computing based environments with one or more users. Embodiments consistent with the present invention however is not limited to such examples and may be implemented with other platforms and in other environments.

By way of example embodiments consistent with the invention may be implemented using conventional personal computers PCs desktops hand held devices multiprocessor computers pen computers microprocessor based or programmable consumer electronic devices minicomputers mainframe computers personal mobile computing devices mobile phones portable or stationary personal computers palmtop computers or the like.

The storage media referred to herein symbolize elements that temporarily or permanently store data and instructions. Although storage functions may be provided as part of a computer memory functions can also be implemented in a network processors e.g. cache register or elsewhere. Various types of storage mediums can be used to implement features of the invention such as a read only memory ROM a random access memory RAM or a memory with other access options. Further memory functions may be physically implemented by computer readable media such as for example a magnetic media like a hard disk a floppy disk a magnetic disk a tape or a cassette tape b optical media like an optical disk e.g. a CD ROM or a digital versatile disk DVD c semiconductor media like DRAM SRAM EPROM EEPROM memory stick and or by any other media like paper.

Embodiments consistent with the invention may also include computer program products that are stored in a computer readable medium or transmitted using a carrier such as an electronic carrier signal communicated across a network between computers or other devices. In addition to transmitting carrier signals network environments may be provided to link or connect components in the disclosed systems. Networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet i.e. the World Wide Web . The network may be a wired or a wireless network. To name a few network implementations the network may be for example a local area network LAN a wide area network WAN a public switched telephone network PSTN an Integrated Services Digital Network ISDN an infrared IR link a radio link such as a Universal Mobile Telecommunications System UMTS Global System for Mobile Communication GSM Code Division Multiple Access CDMA or a satellite link.

Transmission protocols and data formats are also known such as for example transmission control protocol internet protocol TCP IP hyper text transfer protocol HTTP secure HTTP wireless application protocol unique resource locator URL unique resource identifier URI hyper text markup language HTML extensible markup language XML extensible hyper text markup language XHTML wireless application markup language WML Standard Generalized Markup Language SGML SOAP simple object access protocol etc. Such features may be utilized to implement embodiments consistent with the present invention as disclosed herein.

Systems methods and computer readable media consistent with the present invention may enable more robust and flexible auditing of BOs. Consequently systems methods and computer readable media consistent with the present invention may log changes to BOs and allow access to such information as may be needed. More specifically systems methods and computer readable media consistent with the present invention audit changes made to BOs and enable access to the data stored at a central repository by any person or machine that may require such access.

Application server may comprise a general purpose computer e.g. a personal computer network computer server or mainframe computer having a processor that may be selectively activated or reconfigured by a computer program to perform one or more methods consistent with the present invention. Application server may also be implemented in a distributed network. Alternatively application server may be specially constructed for carrying out methods consistent with the present invention.

Repository may be implemented with any one of a number of commercially available repositories. However in a preferred embodiment the Enterprise Services Repository from SAP AG is used. Repository may employ any of a number of commercially available database systems such as Microsoft Access dbase Oracle Sybase etc.

Repository may also store BOs that may be created using a data type definition consistent with the embodiments of the present invention. BOs stored in repository may encapsulate their data and processes. External access to the BO data and processes may only be possible by means of specific methods. In at least one embodiment the BOs may be accessed by means of Business Application Programming Interfaces BAPI a well known and widely used application interface used to achieve interoperability between various systems and to integrate third party software components with the software offered by SAP AG. In another exemplary environment such as one using an existing SAP NetWeaver architecture the Enterprise Services Infrastructure ESI provides access to the BOs. Within the ESI the implementer of the service may use the Service Provider Interface SPI to specify BOs and the end user may use for example the Generic Consumer Proxy GCP or Typed Consumer Proxy TCP of the ESF to access the business application. According to one embodiment of the present invention application server accesses BOs stored in repository .

Input module may include an input device and or a network interface . Input device may be implemented using a keyboard mouse speech recognition device or data entering devices. Network interface may receive information over any type of network not shown such as a telephony based network e.g. PBX or POTS a local area network a wide area network a dedicated intranet and or the Internet. Application server may also access data stored on storage device . Storage device may include a memory such as RAM or ROM memory that contains program instructions and or data for performing one or more methods consistent with the present invention.

In maintaining repository input module may be used to request application server to output information regarding the data stored in repository . Such requests may originate from for example an employee or network engineer via input device or another computing system via network interface . Application server may then output the requested information via output module .

Output module may include a printer an output interface and or a display . Printer may be used to provide a printout of auditing data to interested parties. Output interface may be used to provide the auditing data to the interested parties via the Internet email fax or page or may save the information on a computer readable medium. Display may be used to provide the auditing data to the interested parties visually. Output interface may also be used to request information regarding the BOs to be audited from other computing systems within a distributed system environment. For example illustrates a more detailed diagram of an exemplary system environment consistent with embodiments of the present invention. As shown in system may comprise multiple computer systems such as one or more application servers A N having BOs that are to be audited and a plurality of clients A N. These various components may be connected and communicate with one another through any suitable network including the Internet. In a preferred embodiment servers A N may use a model view controller architecture to provide access to the data stored in repository . For example a model layer may handle data management a controller layer may handle user input and event processing and a view layer may handle the presentation. One skilled in the art would appreciate that a variety of other architectures and designs may be used.

Each of the clients A N may be implemented with a computing system used to perform tasks consistent with embodiments of the invention. Clients A N can be located in any location and may be managed and or controlled by any user or application that uses BOs.

To perform auditing functions and provide other features consistent with the principles of the invention program may include instructions or programmed logic in the form of software modules . These software modules can be written using any known programming language such as ABAP XML etc. A summary of each of these modules is provided below. As will be appreciated by those skilled in the art the modules of are merely examples and any number of modifications may be made including combining substituting deleting or adding to or from the modules presented in this exemplary embodiment.

In the embodiment of graphical UI module may provide processing to display auditing data and generate other graphical UIs for a user or client. Transmitter module can be used to request the transfer of auditing data BO data etc. from a client to application server . Storage module can be used to save auditing data for persistent storage. Receipt module receives auditing requests and transfers them to transmitter module . In addition Log Data Manager module may be used to administer the persistency of the auditing data. Log Data Manager module may also include an application program interface to provide data access. Further Web Service Access module may be used to provide access to the auditing data from remote locations. A skilled artisan will appreciate the listed software modules are exemplary only and any variation of modules including the addition of other modules can be used. A skilled artisan will also appreciate that program may alternatively or in addition to be included in a separate BO stored in repository or in a separate BO on a different computing system than the computing system maintaining the BOs to be audited.

In one embodiment to perform auditing functions program may include instructions in the form of methods. These methods may be implemented as part of one or more modules cf. or as separate sets of computer readable instructions. An exemplary list of methods that may be included in program are shown below in Table 1. Program may also include attributes such as a trail stack as shown below in Table 1. A skilled artisan will appreciate that program is not limited to the exemplary list of methods and attributes and additional or fewer methods or attributes can be used.

As illustrated in application server first receives a notification of a change associated with at least one BO Step S. . For example if a client application uses a product BO that includes dimensions weight standard price global trade number etc. associated with a product and the price of the product changes then the client application could change the product BO and notify application server of the change. Next application server requests information associated with the at least one BO Step S. . In one embodiment the at least one BO may implement an auditable function set see example discussed below to interface with application server . Thereafter application server receives the requested data Step S. and stores the received data Step S. .

For instance each BO that is configured to use the generic audit trail service can implement a data changed event. The data changed event can be used to notify application server of any change associated with the BO by for example calling the handle data changed method as shown in Table 1 and . cf. Step S. . For example after a user modifies the price for a product BO and releases the change for example by pressing or a confirmation button the BO can notify application server by invoking the data changed event. A skilled artisan will appreciate that the notification of change can be prepared and sent to application server for any kind of change to the BO. For example the creation deletion destruction etc. of a BO can all result in a notification of change being sent to application server .

Next application server requests information associated with the at least one BO. cf. Step S. . As shown in the example of Table 2 each BO may implement a get key function that can return data associated with the BO such as a globally unique identifier GUID a timestamp of the change an identity of the user who made the change a business object type etc. Application server can call the get key function for the at least one BO within the handle data changed method as shown in . Application server also can request specific data regarding the changes that were made to the at least one BO as shown in . Each BO as shown above in the example of Table 2 can also implement an explain change function to provide application server with a record of the changes that were made to the BO. For example a product BO that had a price change may prepare a record showing this change and provide the record to application server . In one embodiment the record may be prepared and stored in any format such as XML HTML text etc. Each BO may prepare the records using the same format or may each prepare them in different formats. In addition a skilled artisan will appreciate that multiple changes may be stored in a single record. The following is one example of an XML record that may be created by a BO 

Next application server receives the data cf. Step S. and stores the received data cf. Step S. . Application server may first store the received data in storage device . For example application server may store the received data in the audit trail stack. Application server may then wait for a notification of commitment of the changes from the at least one BO. After receiving a notification of commitment of the changes from the at least one BO application server can store the received data associated with each BO in repository . For instance after the user making changes to a BO saves the changes application server is notified and application server stores the received data in repository . For example the data can be stored in repository as a persistence table that includes fields such as BO type BO key timestamp changed by user changes done etc. However if a notification of commitment of the changes is not received then application server may disregard or delete the received data. Application server may implement this functionality in the save stack method as shown in and Table 1. In addition to reduce the amount of data stored in repository application server can optionally archive the audited data when the data is no longer needed. For example application server can periodically such as weekly monthly etc. archive all audited data that is older than a specified time stamp. For instance every month application server can archive data older than three weeks. Alternatively or in addition to the client can request as shown in that certain of the audited data be archived. The client application can specify certain criteria and application server can archive the data that meets the specified criteria. Application server can implement the archiving functionality by implementing the archive audit trail method as shown in Table 1.

First application server receives a search request from a user Step S. . The search request can include any search criteria desired by the user. For example the search criteria may indicate a search for the audited data associated with a specific BO by business object type and key. Alternatively or in addition to the search criteria may specify a search for audited data associated with all BOs of a certain type and or within certain time ranges. The search criteria may also specify a search for all changes done by a user. Application server can then by implementing the load audit trail method as shown in locate all the data stored in repository that meets the search criteria and present them to the user Step S. . The user can then if desired select from the presented data a subset of the presented data that the user wants to review Step S. . Application server then provides the selected audited data to the associated BO and requests the associated BO to display the changes by calling the display change function as shown above in Table 2 and Step S. . Each BO can be configured to display the audited data in any way that is desired. Each BO having prepared the record of changes as discussed above can be configured to interpret the received record of changes and display the changes in any way desired. In addition if the user desires the user can request application server to undo the changes Step S. . If the user chooses to undo the changes application server can call the undo change function as shown above in Table 2 and associated with the BO for which changes are to be undone. Each BO can create its own implementation for undoing changes and perform validation consistency checks etc. as desired.

As illustrated in by the dashed line in a preferred embodiment the generic audit trail service may be separated into different activities. For example as shown in one activity may include the processing needed to store the audited data another activity may include the processing to provide access to the stored auditing data and another activity can be used to archive the audited data . A skilled artisan would appreciate that each or a subset of these activities may be processed in serial or in parallel. Further a skilled artisan would also appreciate that the listed activities are exemplary only and any number and variety activities can be used

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

