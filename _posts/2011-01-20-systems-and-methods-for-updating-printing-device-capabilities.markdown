---

title: Systems and methods for updating printing device capabilities
abstract: Systems and methods that generate initial printing device capabilities data including one or more initial printing device capabilities based on the initial print ticket markup language data, receive second print ticket markup language data, generate updated printing device capabilities data including one or more updated printing device capabilities based on the second print ticket markup language data, and generate one or more changed printing device capabilities markup language data based on the initial printing device capabilities data and the updated printing device capabilities data, wherein the one or more changed printing device capabilities markup language data includes one or more changed printing device capabilities that indicate differences between the one or more initial printing device capabilities and the one or more updated printing device capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08994985&OS=08994985&RS=08994985
owner: Canon Kabushiki Kaisha
number: 08994985
owner_city: Tokyo
owner_country: JP
publication_date: 20110120
---
In the field of print processing it is a challenging task for Independent Software Vendors also referred to herein as ISVs to provide a consistent user interface for receiving a desired print intent from a user while supporting private settings for the printers of multiple Independent Hardware Vendors also referred to herein as IHVs . The communication between the Windows print sub system an IHV s plug in driver and an ISV s application causes part of the difficulties because the communication is done thru indexed based binary DevMode structures also referred to herein as DevMode and binary DevCaps structures also referred to herein as DevCaps .

Microsoft introduced a new XML based print schema to address the problems associated with communication between the print subsystem and external applications. The print schema technology uses an XML based public schema to describe printer capabilities device configurations and job formatting settings. Applications can use the XML based schema to provide print dialogs to change print settings.

Whenever a user changes a selected option for a setting the changed setting and the respective option is added to a delta also referred to herein as A PrintTicket and merged and validated with a specified base PrintTicket to produce a resulting PrintTicket which is used to get a corresponding resulting PrintCapabilities document. The resulting PrintCapabilities document is then used to re populate the user interface also referred to herein as a UI .

In one embodiment a method for updating print capabilities of a printing device comprises receiving initial print ticket markup language data generating initial printing device capabilities data including one or more initial printing device capabilities based on the initial print ticket markup language data receiving second print ticket markup language data and generating updated printing device capabilities data including one or more updated printing device capabilities based on the second print ticket markup language data. The method further comprises generating one or more changed printing device capabilities markup language data based on the initial printing device capabilities data and the updated printing device capabilities data wherein the one or more changed printing device capabilities markup language data includes one or more changed printing device capabilities that indicate differences between the one or more initial printing device capabilities and the one or more updated printing device capabilities.

In one embodiment a device for determining changes to print capabilities for a printer comprises a computer readable storage device a processor and a print driver configured to read one or more first print settings in a first print settings markup language file generate first print capabilities data indicating one or more first print capabilities based on the one or more first print settings and read one or more second print settings in a second print settings markup language file the one or more second print settings including at least one print setting different than the one or more first print settings. The printer driver is further configured to generate resulting print capabilities data indicating one or more resulting print capabilities based on the one or more second print settings and the one or more first print settings wherein the resulting print capabilities include a different print capability than the one or more first print capabilities and generate delta print capabilities markup language data indicating delta print capabilities wherein delta print capabilities include the different print capability than the one or more first print capabilities.

In one embodiment a computer readable storage medium stores instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising determining initial print capabilities based on initial print settings in an initial print settings file generating resulting print settings by merging the initial print settings in the initial print settings file with second print settings in a second print settings file determining resulting print capabilities based on the resulting print settings determining changed print capabilities based on the resulting print capabilities and the initial print capabilities and generating a resulting print file including the changed print capabilities.

The following description is of certain illustrative embodiments and the disclosure is not limited to these embodiments but includes alternatives equivalents and modifications such as are included within the scope of the claims. Additionally the illustrative embodiments may include several novel features and a particular feature may not be essential to practice the systems and methods described herein.

Information is presented to a user via the display device including information sent by the printing device . The print capabilities device receives user provided information e.g. user selections of print settings and relays the information to the printing device .

The print capabilities device includes a print dialogue application and a printer driver . The print dialogue application generates a user interface that presents information to the user and or receives information from the user. The user interface may present the information in the form of a graphical interface that shows printer settings and capabilities and that receives user selections such as selections of an option for a respective setting. The information may also be presented in any other manner that allows a user to view the information and or select one or more options. The UI is sent to the display device and the display device presents the user interface to the user.

The printer driver receives data performs requested operations and returns requested data if any to the print dialogue application . For example the print dialogue application invokes the functionality of the printer driver via a function call passes data to the printer driver in the form of parameters of the function call and receives the data returned by the function. The functions implemented by the printer driver and the interface for calling the functions may conform to an application programming interface API for example the WinFX PT PC Win32 PT PC and PrintTicket APIs.

The printer driver may convert received data into a format readable by the printing device . For example the printer driver may receive a print job from a software application convert the print job into PDL data for the printing device and transmit the PDL data to the printing device . The printer driver also communicates with the printing device about the settings and status of the printing device e.g. paper level ink level toner level errors selected paper size colors .

The printer driver may be configured with the relationships between the settings capabilities and selected settings options of the printing device . Thus the printer driver can determine which print capabilities are or are not available based on the selected options for one or more settings and determine which settings options are constrained based on the selected options for one or more settings.

For example the printing driver may be configured with the priorities of different settings and adjust printer capabilities according to respective selected options for the settings. Thus if the selected option of a lower priority setting is changed the printer driver does not change the capabilities of the higher priority settings. However if the selected option of a higher priority setting is changed the printer driver adjusts the capabilities of the lower priority setting s if necessary.

Following the above example a printer driver may be configured to assign the print medium size setting a lower priority than the print medium type setting or the borderless printing setting. Thus if the selected option for the print medium size setting is changed the capabilities for the print medium type or borderless printing settings will not be changed because they are assigned a higher priority. However if the option selected for the print medium type setting or the borderless printing setting is changed then the capabilities for the print medium size and other lower priority settings will be changed if necessary.

The print capabilities device includes one or more processors also referred to herein as CPU which may be a conventional or customized microprocessor s . The CPU is configured to read and execute computer readable instructions and the CPU may command and or control other components of the print capabilities device .

The print capabilities device also includes I O interfaces which provide communication interfaces to other devices including a keyboard a display device a mouse a printing device a touch screen a light pen an optical storage device a scanner a microphone a camera etc. The print capabilities device additionally includes a memory which may be volatile or non volatile such as ROM RAM and flash memory. The network interface allows the print capabilities device to communicate with the network . The storage device stores data or modules and may include for example a hard drive an optical storage device a diskette and or a solid state drive. The components of the print capabilities device are connected via a bus. The print capabilities device includes an operating system which manages one or more of the hardware the processes the interrupts the memory and the file system.

The print capabilities device also includes a print dialogue module a printer driver and lookup table s . A module may be executed by the print capabilities device to cause the print capabilities device to perform certain operations though for ease of description a module may be described as performing the operations. Modules may include logic and or computer readable instructions and may be implemented in software firmware and or hardware. In other embodiments the print capabilities device may include more or less modules the modules may be combined into fewer modules or the modules may be divided into more modules.

The print dialogue module includes instructions that when executed cause the print capabilities device to generate a print dialogue user interface that includes printing information such as printing device settings capabilities and selected options. The user interface may include any combination of text and graphics and may receive data from a user such as via a text field or by user selection of a control on the interface e.g. a menu button check box . As discussed above the printer driver communicates with a printing device e.g. printing device . In the embodiment shown in the print capabilities device also includes lookup table s . The lookup table s includes information about printing device settings and capabilities and the print capabilities device may use the lookup table s to determine the printing device capabilities.

For example the lookup table s may map selected print options to print capabilities e.g. map a PrintTicket to a PrintCapabilities and or map a DevMode to a DevCaps . The lookup table s may include a column for each setting e.g. media size media type color duplexing stapling font and each capability and row for each permutation of setting options and a row of the lookup table may indicate the printing capabilities for a printing device when the printing device is set to the settings options indicated in the respective row. In other embodiments the print capabilities device determines changes in print capabilities by other means including logic data trees etc.

Beginning in block base print capabilities are obtained from the printer driver. For example the printer driver may generate capabilities data that indicates the base print capabilities of a printing device based on received data e.g. base print options and return the capabilities data e.g. an object a file a pointer a data structure to an application and or device. The received data and the capabilities data may include markup language data for example a PrintCapabilities also referred to herein as PC and or a PrintTicket also referred to herein as PT . Next in block a user interface is generated based on the base print capabilities. The user interface may be presented to a user via a display device.

Moving to block print capabilities which show changes to the print capabilities relative to the previous print capabilities e.g. the base print capabilities are obtained from the printer driver. The printer driver may receive updated print settings and in response generate data that contains substantially only the print capabilities and return the data to an application and or device. Also the printer driver may include the print capabilities in data that includes more than the print capabilities and add one or more indicators to the data to identify the print capabilities.

Finally in block portions of the user interface that are associated with the print capabilities are updated. For example the user interface may have one or more fields that are associated with respective print capabilities and when a print capability is modified the respective fields on the user interface are updated and one or more other fields that are not associated with the print capabilities are maintained.

Next in block a resulting PT is generated based on the base PT and a PT . The generation of the resulting PT may include merge and validate operations. The merge operation combines the base PT and the PT into a resulting PT and the validate operation verifies that the printing device can implement the functionality described by the options selected for the settings in the resulting PT .

Finally in block a PC is generated based on the base PC and updated print capabilities that are determined based on the resulting PT . The PC is added to the resulting PT . For example the PC may be added to a resulting PT by including the PC and tags e.g. markup language tags in that indicate the PC and or the PC may be stored in a predetermined location in the resulting PT . The resulting PT including PC may be provided to an application or device.

Accordingly when an application or a device requests the generation of a resulting PT such as a request sent to a printer driver it will receive a resulting PT and a PC in return. Thus the application or device that receives the PT does not need to call an update capabilities function to determine updated print capabilities. For example in some embodiments the base PT and the PT are sent to a driver via a MergeAndValidate Base PT PT function call and the driver returns a resulting PT that includes the PC thus allowing an application and or device to communicate with the driver via an API specified by Windows . Additionally the base PT or the PT sent to the driver may include the base PC or the driver may store the base PC and or retrieve it from a predetermined location in memory.

Next in block a PC is generated based on the resulting PC and the base PC . Finally in block the PC is added to the resulting PC . For example the PC may be added to a resulting PC by including the PC and tags e.g. markup language tags in that indicate the PC and or the PC may be stored in a predetermined location in the resulting PC .

In some embodiments a printer driver is configured to determine the capabilities of the respective printing device when the printing device is configured to the selected settings options in the input PT . The printer driver may receive the input PT in a function call generate the resulting PC such as by accessing an internal repository of data e.g. lookup tables stored logic regarding the settings and capabilities of the printing device and determine the PC . The printer driver adds the PC to the resulting PC and returns the resulting PC to a calling application device. Thus the calling application device will receive both the resulting PC and the PC in response to a request to generate the resulting PC for an input PT .

In the flowchart begins with block where a base PT is merged with a PT to get a resulting PT. Next in block the base PT is converted to a base DevMode. Moving to block the resulting PT is converted to a resulting DevMode. In block the resulting DevMode is compared with the base DevMode to generate a DevMode. Because a DevMode structure represents data in a binary format the comparison may be a binary comparison which can be performed faster than a comparison that requires parsing e.g. a comparison of markup language data .

Moving to block a PC is generated based on the DevMode. For example one or more lookup tables may be used to map the changes to the selected settings options in the DevMode to one or more changes in a DevCaps structure and the one or more changes in the DevCaps structure may then be used to generate the PC. Additionally the resulting DevMode may be used to generate a resulting DevCaps and the base DevMode may be used to generate a base DevCaps. The PC may then be generated by comparing the resulting DevCaps and the base DevCaps. Proceeding to block the PC is added to the resulting PT. Finally in block the resulting PT is returned.

In the flowchart begins in block where a base PC is generated based on a base PT. Next in block the base PT is merged with a PT to generate a resulting PT. Moving to block a resulting PC is generated from the resulting PT. Then in block the base PC is compared with the resulting PC to generate a PC. Proceeding to block the PC is added to the resulting PT and in block the resulting PT is returned.

In the flowchart begins at block where a resulting PC is generated from an input PT. Proceeding to block the resulting PC is converted to a resulting DevCaps. Then in block a base PC is converted to a base DevCaps. Next in block the resulting DevCaps is compared to a base DevCaps to generate a DevCaps. Because a DevCaps represents printing capabilities in binary form the DevCaps comparison is a binary comparison which may be performed faster than a comparison that requires parsing. Proceeding to block a PC is generated based on the DevCaps. In block the PC is added to the resulting PC. Finally the resulting PC is returned in block .

The above described systems and methods can be achieved by supplying a storage medium having computer executable instructions for realizing the above described operations to one or more computing devices e.g. CPU MPU that may read the computer executable instructions stored in the storage medium and execute them.

In this case the computer executable instructions when read from the storage medium and performed by the one or more computing devices execute the operations of the above described embodiments. Thus the computer executable instructions or the storage medium storing the computer executable instructions therein constitute an embodiment.

Any applicable computer readable storage medium e.g. a floppy disk a hard disk an optical disk a magneto optical disk a CD ROM a CD R a magnetic tape a non volatile memory card and a ROM can be employed as a storage medium for supplying the computer executable instructions.

The computer executable instructions may be written to a memory provided on a function extension board inserted into the computing device or on a function extension unit connected to the computing device and a CPU provided on the function extension board or unit may carry out part or all of the actual processing that realizes the operations of the above described embodiments.

When the computer executable instructions are executed by the one or more computing devices not only are the above described operations of the embodiments realized but also an operating system working on the computing system may carry out part or all of the actual processing that realizes the operations of the above described embodiments.

While the above disclosure describes illustrative embodiments it is to be understood that the invention is not limited to the above disclosure. To the contrary the invention covers various modifications and equivalent arrangements within the spirit and scope of the appended claims.

