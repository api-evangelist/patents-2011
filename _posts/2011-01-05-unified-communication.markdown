---

title: Unified communication
abstract: A system for unified communication, according to one embodiment of the present invention, comprises a CAS communicatively coupled to a client. The CAS comprises a server communicatively coupled to a CAS application and a number of service providers. The server receives from the client a CAS message encoded in a CAS format and including a request for a unified communication service. The server communicates with the CAS application to determine a service type for the request. The server sends the request to one of the number of service providers. The server sends a reply message to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09397861&OS=09397861&RS=09397861
owner: Shoretel, Inc.
number: 09397861
owner_city: Sunnyvale
owner_country: US
publication_date: 20110105
---
This application claims priority from the following U.S. provisional patent application which is hereby incorporated by reference Ser. No. 61 365 262 filed on Jul. 16 2010 and entitled UC CLIENT APPLICATION SERVER CAS ARCHITECTURE API. 

The present invention relates to communication systems. In particular the present invention relates to unified communications among communication devices.

Existing communication systems provide numerous services to numerous different clients. These services include for example telephony calls voicemail directory etc. A first problem present in existing communication systems is that the clients must communicate with different interfaces in order to access the different services provided by the communication system. For example an internet protocol phone accesses a different interface than a personal computer with a web browser and both of these devices access a different interface than a mobile phone. Not only is this inconvenient for the user of the client it also means the user must learn to use different interfaces.

A second problem present in existing systems is that the services offered by these systems cannot be easily opened up to third party developers that can provide new and innovative services for clients.

A third problem present in existing systems is that they do not support a subscription model that allows clients to subscribe to services offered by the communication system. For example a user of a communication device cannot subscribe with the communication system to receive updates regarding the presence of another user on the network.

A fourth problem present in existing systems is that they are not able to allow an administrator to add modify and delete permissions for other clients and or client devices and to provide clients with error messages when they do not have permission to receive a requested service.

The present invention overcomes the deficiencies and shortcomings of the prior art by providing a system and method for unified communication. For example the present invention provides unified communication among communication devices such as those used in a Voice over Internet Protocol VoIP telephony system. The system of the present invention is particularly advantageous because it provides a single interface for various different communication devices to access different services. At a high level the system comprises a Client Application Server referred to herein as the CAS communicatively coupled to a client. The CAS comprises a server communicatively coupled to a CAS application and a number of service providers. The server receives from the client a CAS message encoded in a CAS format and including a request for a unified communication service. For example the CAS message requests a directory listing. The server communicates with the CAS application to determine a service type for the request. The server sends the request to one of the number of service providers. The server sends a reply message to the client.

A system and method for unified communications is described. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the invention. For example the present invention is described in one embodiment below with reference to system operation and particular hardware. However the present invention applies to any type of computing device that can receive a data and commands and any peripheral devices providing services.

Although the examples given herein describe the present invention in embodiments applicable to telephony a person having ordinary skill in the art will recognize that the present invention is applicable to other technologies and provides unified communication for different communication devices not limited to telephony.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a non transitory computer readable memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory computer readable storage medium such as but is not limited to flash memory any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

Descriptions herein to a server include one or more of 1 a hardware server 2 a software server executed by a processor 3 a software server stored on a non transitory computer readable memory 4 a virtual server executed by a processor and 5 a virtual server stored on a non transitory computer readable memory. In one embodiment the server is configured to provide the functionality of a telephony switch.

Descriptions herein a switch refer to a telephony switch and include one or more of 1 a hardware telephony switch 2 a software telephony switch executed by a processor 3 a software telephony switch stored on a non transitory computer readable memory 4 a virtual telephony switch executed by a processor and 5 a virtual telephony switch stored on a non transitory computer readable memory. A hardware telephony switch is a hardware device configured to provide the functionality of a telephony switch. A virtual switch is a virtualized telephony switch.

All descriptions herein to modules include one or more of 1 computer code and routines stored on a non transitory computer readable memory and 2 a hardware device comprised of one or more circuit boards and or a processor.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The prior art telephony system includes four client server architectures 1 a prior art Personal Call Manager architecture the prior art PCM architecture that communicates via signal line and or signal line 2 a prior art email client architecture that communicates via signal line 3 a prior art mobile client architecture that communicates via signal line and 4 a prior art web client architecture that communicates via signal line . These four architectures are described below with reference to .

In one embodiment the email client is integrated with the TAPI and the email client signals the client side TAPI and the client side TAPI communicates with the TMS via signal line in order to initiate a telephone call. As described below with reference to this and other complexities are not present in the embodiment of the present invention described for .

The prior art PCM architecture is a client server architecture used for providing telephony functionality to a client device via signal line and . The client device not pictured is a device for providing a human user access to telephony services. For example the client device is a hardware device such as an Internet Protocol phone IP phone . In another embodiment the client device is a softphone application stored on a non transitory memory and executed by a processor e.g. a softphone stored and executed by a personal computer . The prior art PCM architecture comprises the PCM the email client a client side Telephony Application Programming Interface client side TAPI the network the TMS and a server side TAPI .

The PCM manages telephony functionality on the client side of the network . The PCM is code and routines stored on a non transitory computer readable memory not pictured that comprise instructions for causing a processor to perform steps necessary to manage telephony functionality on the client side of the network . For example the PCM is telephony management software stored on a non transitory memory and executed by a processor based device such as a personal computer not pictured . The processor of the personal computer executes the PCM and performs steps necessary to provide call management for telephony calls made using the telephony architecture. In one embodiment the PCM is a conventional call manager application. The PCM is communicatively coupled to the client side TAPI and other elements described below with respect to the email architecture .

The email client provides email functionality for the client device. The email client is code and routines stored on a non transitory memory not pictured that comprise instructions for causing a processor to perform steps necessary to provide email functionality for the client device. For example the email client is email software such as Microsoft Outlook stored on a non transitory memory and executed by a processor based device such as a personal computer not pictured . The email client is communicatively coupled to the client side CSIS client and other elements described below with respect to the email architecture .

The client side TAPI is a conventional TAPI that works to assist the PCM in providing call control for a client device e.g. the telephone device that the user of the PCM is assigned to the personal computer described above for the PCM a modem a VOIP switch and or a private branch exchange . The client side TAPI is communicatively coupled to the network the PCM and the email client .

The network is a partially public or a wholly public network such as the Internet. The network can also be a private network or include one or more distinct or logical private networks e.g. virtual private networks Wide Area Networks WAN and or Local Area Networks LAN . Additionally the communication links to and from the network can be wireline or wireless i.e. terrestrial or satellite based transceivers . In one embodiment of the present invention the network is an IP based wide or metropolitan area network.

The TMS interfaces with the server side TAPI to provide telephony functionality for the client side. The TMS is code and routines stored on a non transitory memory not pictured that comprise instructions for causing a processor to perform steps necessary to process telephony requests for a client side device. The TMS is communicatively coupled to the server side TAPI . The TMS receives requests for a telephony service from the client side device via the server side TAPI . The TMS processes these requests and communicates with the server side TAPI to provide the requested telephony service to the client device.

The server side TAPI is a conventional server side TAPI that communicates with the TMS and the client side TAPI to allow the PCM to control telephony functionality for a client device. The server side TAPI is communicatively coupled to the client side TAPI via signal line . The server side TAPI is also communicatively coupled to the TMS the PCM and the email client .

The following is an example of how the prior art PCM architecture operates. The PCM requests a telephony function. The request is passed to the client side TAPI . The client side TAPI sends the requests to the server side TAPI via the network and signal line . The TMS receives the request and processes the requests to provide the client with the requested telephony functionality. For example the requested telephony functionality is a VOIP phone call with another client device. The server side TAPI communicates with the client side TAPI to connect the requested call.

The prior art email architecture is a client server architecture used for providing email functionality to a client device via signal line . The prior art email client architecture comprises the PCM the email client a client side Client Server Internet Service client client side CSIS client the network the CSIS server and a storage device .

The PCM email client and network are the same as described above with reference to the prior art PCM architecture so those descriptions will not be repeated here.

The client side CSIS client communicates with the CSIS server to facilitate communication between client side devices and server side devices. For example the client side CSIS client is codes and routines stored on a client side device e.g. a personal computer . The CSIS client is communicatively coupled to the email client and the PCM . The CSIS client is also communicatively coupled to the CSIS server via the network . The client side CSIS client receives a communication for a server side device represented by line and uses hypertext transfer protocol messages HTTP messages to communicate with the CSIS server via the network .

The CSIS server is a server that provides services requested by the client device. The requested service is specified by the HTTP messages received from the CSIS client . The CSIS server is communicatively coupled to the network and the storage device . The CSIS server receives the HTTP messages from the CSIS client via the network and processes the messages to provide the requested service. The storage device is a non transitory computer readable memory that stores data and information necessary for the CSIS server to provide the requested service. For example the storage device stores one or more of directory information voice mails call history data etc. In one embodiment there are more than one storage device . For example a first storage device not pictured stores call history data and a second storage device not pictured stores other data and information.

The prior art mobile client architecture is a client server architecture used for providing a conventional mobile device not pictured access to the TMS and the CSIS server . The mobile device is any device capable of accessing a mobile voice network not pictured . For example the mobile device is a mobile phone. The prior art mobile client architecture comprises the MCM the network a Mobile Call Manager server MCM server the server side TAPI the TMS a server side Client Server Internet Service client server side CSIS client the CSIS server and the storage device .

The network server side TAPI TMS CSIS server and storage device are the same as described above with reference to the prior art PCM architecture and the prior art email architecture so those descriptions will not be repeated here.

The MCM manages requests originating from mobile devices e.g. smart phones mobile phones etc. . The MCM is codes and routines stored on a non transitory computer readable memory not pictured that comprise instructions for causing a processor to perform steps necessary to manage the requests originating from the mobile devices. For example the MCM is mobile call management software stored on a non transitory memory and executed by a processor based device such as a smart phone not pictured . The processor comprised within the smart phone executes the MCM and performs steps necessary to manage requests. For example a user of the smart phone provides an input. The MCM receives the input and causes the processor to make a request i.e. a mobile device request that is sent to the MCM server . The mobile device request includes a request for a service. For example the mobile device request includes a request to be connected on a call with an IP phone associated with the server side TAPI and the TMS . The MCM is communicatively coupled to the MCM server via the network . The MCM transmits the mobile device request to the MCM server via the network .

The MCM server is a server that communicates with the MCM to provide services requested by mobile devices. The MCM server is communicatively coupled to the network the server side TAPI and the server side CSIS client . The MCM utilizes a mobile data network not shown in communicating with the MCM server . The MCM server receives the mobile device request from the MCM and processes the mobile device request to 1 determine which service is being requested 2 determined whether the request should be passed to the server side TAPI or the server side CSIS client and 3 transmit the request to the server side TAPI or the server side CSIS client as determined in step 2. The MCM server stores data and information necessary to perform the above described steps. For example the MCM server comprises a non transitory computer readable memory that stores data and information necessary to perform the above described steps.

The server side TAPI performs functions similar to the client side TAPI . The server side TAPI is a conventional TAPI that works to assist the MCM in providing call control for a processor based client device e.g. a mobile device such as a smart phone or cell phone . The server side TAPI is communicatively coupled to the network .

The server side CSIS client performs functions similar to the client side CSIS . The server side CSIS client communicates with the CSIS server to facilitate communication between the MCM server and the services provided by the CSIS server . For example the server side CSIS client is code and routines stored on a server side device e.g. a personal computer switch conference bridge etc . The CSIS client is communicatively coupled to the MCM server and the CSIS server . The server side CSIS client receives a mobile device message from the MCM server requesting services for a client side mobile device. The server side CSIS client translates the messages received from the MCM server to equivalent HTTP messages that are communicated by the CSIS client to the CSIS server .

The prior art web client architecture is a client server architecture used for providing a client devices access to the services provided by the CSIS server via signal line . The client device not pictured is a processor based device used to access the network . The prior art web browser architecture comprises a client side web client the network a server side web client the CSIS server and the storage device .

The network CSIS server and the storage device are the same as described above with reference to the prior art PCM architecture email architecture and mobile client architecture so those descriptions will not be repeated here.

The client side web client provides a client device with access to the network . For example the browser is a conventional browser application e.g. Windows Internet Explorer Mozilla Firefox etc. and the client device is a personal computer smart phone etc that stores the browser on a non transitory memory and executes with a processor comprised within the computer to access the network . The browser communicates with the server side web client to provide a client device with the services available from the CSIS server via the network . The client side web client is communicatively coupled to the server side web client via the network . The client side web client sends messages to the server side web client via the network . The messages include for example requests for the services provided by the CSIS server .

The server side web client is similar to the client side web client . The server side web client receives the messages from the client side web client via the network . The server side web client processes the messages to provide the client side web client with the services available from the CSIS server . The server side web client is codes and routines stored on a non transitory computer readable memory not pictured that comprises instructions for causing a processor not pictured to perform steps necessary to work with the client side web client to provide the client device with the services available from the CSIS server . The server side web client is communicatively coupled to the client side web client via the network . The server side web client is also communicatively coupled to the CSIS server .

As described briefly above with reference to a problem present in with the prior art telephony system is that the clients must communicate with different interfaces in order to access the different services present on the server side of the network . For example 1 the PCM must communicate with a client side TAPI in order to connect telephony calls using the TMS 2 the email client must communicate with a client side CSIS client in order to access the services provided by the CSIS server 3 the MCM must communicate with a MCM server in order to connect telephony call using the TMS or access the services provided by the CSIS server and 4 the client side web client must communicate with a server side web client in order to access the services provided by the CSIS server . What is needed is a single interface for clients to communicate with and access the services present on the server side of the network .

Referring now to an embodiment of a unified communication system according to one embodiment of the present invention is shown. Unified communication system provides a single interface i.e. the Client Application Server referred to herein as the CAS for clients to access services available on the server side of the network . System shown in has numerous deficiencies that are overcome by system . These deficiencies include 1 the different endpoints and or clients exhibit different behavior for different server implementations 2 the system requires numerous interfaces that provide less possibility for reusing logic and computer code from one endpoint and or client at another endpoint and or client and 3 multiple client side transports are necessary i.e. one for each signal line and described with reference to . In contrast the CAS of system overcomes the deficiencies of the system by providing a unified user interface in which 1 endpoints and or clients do not exhibit varying behavior 2 logic and computer code can be reused among many different endpoints and or clients and 3 multiple client side transports are not required.

The telephony system also beneficially provides 1 a plug in architecture for expanding the services available to clients via the CAS 2 a subscription model for allowing clients to subscribe to services available through the CAS 3 the ability to provide multiple services to the client responsive to a single request message and 4 the ability to allow clients having administrative rights to add modify and delete permissions for other clients and or client devices and to provide clients with error messages when they do not have permission to receive a requested service. These benefits among others are not present in the prior art telephony system described above with reference to .

The system comprises an IP phone a PCM an email client a client side web client a MCM a network the CAS a protocol adapter a the TAPI a TMS a storage device a voicemail server a server side web client a collaboration services device and a protocol adapter . Optionally the system further comprises a second server and a Client Application Server plug in CAS plug in . In one embodiment the system comprises one or more elements . In another embodiment one or more systems are communicatively coupled to one another and communicate with one another via the CAS as described below.

The system has a number of clients the Internet Protocol phone IP phone the PCM the email client the client side web client and the MCM . The IP phone PCM email client and client side web client are each communicatively coupled to a the CAS via the network . The CAS is configured to among other things provide clients located on the client side of the network with access to services available on the server side of the network . In other words the CAS provides a single interface for the IP phone the PCM the email client and the client side web client to communicate with and access the services available on the server side of the network . Optionally the system also includes other clients e.g. a softphone stored and executed by a personal computer or equivalent computing device a conference bridge storing and executing a telephony switch call manager application known to those skilled in the art etc that are communicatively coupled to the CAS to receive services available through the CAS .

The IP phones the PCM the email client and the client side web client are communicatively coupled to the CAS via the network . The communicative coupling of the IP phones to the CAS is represented by line the communicative coupling of the PCM to the CAS is represented by the line the communicative coupling of the email client to the CAS is represented by line and the communicative coupling of the client side web client to the CAS is represented by signal line . The MCM communicates with the CAS via the network and the protocol adapter . The communicative coupling of the MCM to the protocol adapter is represented by line and the protocol adapter is communicatively coupled to the CAS . The protocol adapter receives the communication from the MCM translates the communication to a different protocol described below and sends the communication to the CAS . The client side web client also has the ability to communicate with the CAS via a server side web client . The communicative coupling of the client side web client to the server side web client is represented by line . The server side web client is in turn communicatively coupled to the CAS .

In one embodiment the protocol adapter is configured as a client device. For example the protocol adapter is configured as a proxy or a server for the MCM and the protocol adapter is communicatively coupled to the CAS as a client device. One having ordinary skill in the art will recognize different configuration in which the protocol adapter is configured as a client device.

In one embodiment the MCM is communicatively coupled to the CAS . For example the CAS is configured to perform the functionality of the protocol adapter or the MCM is configured to communicate with the CAS using a CAS message. Thus in one embodiment the system does not include a protocol adapter .

The PCM the email client the client side web client the MCM the TAPI the TMS the storage and the server side web client provide functionality similar to the PCM email client client side browser the MCM the TAPI the TMS the storage and the server side web client described above with reference to respectively so that description will not be repeated here. In one embodiment a difference between the PCM the email client the client side web client the MCM the TAPI the TMS the storage and the server side web client versus the similarly named components of is that the PCM the email client the client side web client the MCM the TAPI the TMS the storage and the server side web client comprise among other things a CAS client not pictured . The CAS client is code and routines that enable the PCM the email client the client side web client the MCM the TAPI the TMS the storage and the server side web client to communicate with the CAS either directly or indirectly . The TAPI and the server side web client also differ from the similarly named components of in that they are communicatively coupled to the CAS . In one embodiment the CAS the network the client side and the server side depicted in are similar to the elements depicted in having like reference numerals so the description for these elements will also not be repeated here.

The IP phone is a conventional internet protocol phone. For example the IP phone is a hardware IP phone or a softphone that is stored in a non transitory memory not pictured and executed by a processor not pictured . The IP phone is communicatively coupled to the CAS via the network . The IP phone communicates with the CAS via the network using the signal line . Examples of the IP phone communicating with the CAS are described below.

The CAS is a server the CAS application and the modules and referred to herein collectively as the CAS modules described with reference to . The CAS receives a request message from a client and processes one or more requests included in the request message. For example the request message includes a request for a unified communication service. A unified communication service is any service that is provided by the CAS . Although unified communication services include telephony services they are not limited to just telephony services. For example a unified communication service is a service as described with reference to . In one embodiment the CAS sends reply messages to the clients. The reply message includes for example a service that is responsive to the request included in the request message an error message indicating that the client does not have permission to receive the requested service etc. Other examples of reply messages are described below. The CAS is communicatively coupled to the IP phone the PCM the email client and the client side web client via the network . The CAS communicates with the clients using various signal lines the IP phone communicates with the CAS using the signal line the PCM communicates with the CAS using the signal line the email client communicates with the CAS using the signal line and the client side web client communicates with the CAS using the signal line .

In one embodiment the CAS is a processor based hardware device and the server is a software server i.e. virtual server stored on a non transitory memory of the CAS not pictured . The non transitory memory also stores the CAS application and the CAS modules described with reference to . A processor of the CAS not pictured executes the server the CAS application and the CAS modules. For example the server the CAS application and the CAS modules are stored on a hardware telephony device such as a telephony switch not pictured configured as the CAS . The hardware telephony device e.g. the telephony switch is adapted to store execute and implement the server the CAS application and the CAS modules. A person having ordinary skill in the art will recognize based on the above example that in one embodiment the CAS is processor based hardware device that stores and executes a virtual server that provides the functionality of the server the CAS application and the CAS modules. Examples of this functionality are described with reference to through .

In one embodiment the CAS communicates with the clients e.g. the IP phone the PCM the email client the client side web client the protocol adapter the second server and the collaboration services device using CAS messages. A CAS message is any message that is sent or received by the CAS . In one embodiment the CAS message includes standardized headers i.e. the messages use certain predetermined headers. In one embodiment the CAS messages are HTTP messages i.e. the CAS messages are passed between the client and the CAS via HTTP . The standardized headers provide the benefit of making the messages easier to parse in an understandable manner so that the client does not need to have any additional modifications other than being configured to send receive and parse CAS messages. In one embodiment the data included in the CAS message is encoded using JavaScript Objection Notation JSON Extensible Markup Language XML or a similar set of rules for encoding messages. A CAS message having standardized headers and encoded in JSON XML or a similar set of rules for encoding messages is referred to herein as a CAS message encoded in a CAS format. In one embodiment when such a CAS message as described in the immediately preceding sentence is encoded in JSON it is referred to herein as a CAS message encoded in a JSON based CAS format and when such a CAS message is encoded in XML it is referred to herein as a CAS message encoded in a XML based CAS format. The CAS is described in greater detail with reference to .

Five examples of CAS messages follow each including examples of standardized headers. A first example CAS message follows. In this example a client is sending a request message to the CAS 

 topic find message lookup contacts timestamp 1291231894934 sequence id 26 request id 26 tokens v source flags 255 search fields 1 result fields 2939 flags 0 sort 2 max 25 pres 0

The above example includes examples of standardized headers. Specifically the specialized headers are 1 topic 2 message 3 timestamp 4 sequence id and 5 request id. 

A second example CAS message follows. In this example a client is sending a request message to the CAS 

 topic tel message make call timestamp 1291231721388 sequence id 27 request id 27 dest 501 name hint Vanessa guided conf transfer true

The second example CAS message includes the same standardized headers as the first example CAS message. Similar standardized headers are present in each of the following example CAS messages. A person having ordinary skill in the art will recognize that other standardized headers are possible.

A third example CAS message follows. In this third example CAS is sending a reply message to the client 

 topic find message lookup contacts timestamp 1291231884203 sequence id 135 request id 26 response 0 contacts id source type first mid last co dept source name contact points flags 2 5 Vanessa id type addr addr canonical field 1 16 501 501 10 2 2 VKensington tovino.shoretel.com VKensington tovino.shoretel.com 50 3 4 VKensington shoretel.com VKensington shoretel.com 1000 0 SysDN 102 16 null null Voice Mail Login id type addr addr canonical field 1 16 102 102 10 0 

A fourth example CAS message follows. In this fourth example CAS is sending a reply message to the client 

A fifth example of CAS messages follows. The fifth example includes an example of an asynchronous completion event for the fourth example CAS message described above 

The voicemail server is a server that receives requests to perform write or read operations on voicemail data that is stored in the storage device . In one embodiment the voicemail server is comprised within a telephony switch a conference bridge or some other processor based telephony device having a non transitory memory not pictured . The voicemail data is stored in the non transitory memory. The voicemail data is described in greater detail with reference to . In one embodiment the voicemail data is stored on a memory that comprises the voicemail server . The voicemail server is communicatively coupled to the CAS and the storage device . The voice mail server receives a request from the CAS to perform a read operation or a write operation on the voicemail data stored in the storage device . In one embodiment the voicemail server is communicatively coupled to the TAPI and the TMS and the voicemail server communicates with the CAS to provide voicemail services to the TAPI and the TMS .

The protocol adapter receives messages from the MCM and translates them to CAS messages that are sent by the protocol adapter to the CAS . A person having ordinary skill in the art will recognize that messages received from the MCM originate on a mobile network not pictured and have a protocol that is different from a CAS message. For the purpose of clarity these messages are referred to herein as mobile device messages. The protocol adapter is communicatively coupled to the MCM via the network . The protocol adapter is also communicatively coupled to the CAS . The protocol adapter receives the mobile device messages and translates these messages to CAS messages. The protocol adapter sends the CAS message to the client. The CAS message includes a request for a service that was included in the mobile device message. The CAS communicates with the protocol adapter and other elements such as the TAPI voicemail server etc. to process the CAS message and provide the mobile device with the requested service. In one embodiment the protocol adapter is communicatively coupled to the server side web client .

In one embodiment the protocol adapter is a hardware device comprised of electronic circuit boards and or firmware adapted to provide the functionality described above for the protocol adapter . The protocol adapter optionally comprises a processor and or a non transitory memory that stores code and routines such as the firmware. In another embodiment the protocol adapter is codes and routines stored on a non transitory memory and configured to provide the functionality described above for the protocol adapter when executed by a processor not pictured . For example the protocol adapter is an application stored in a memory of a computer not pictured and executed by a processor not pictured comprised within the computer.

In one embodiment the protocol adapter and the web client are comprised within the same hardware device e.g. any telephony device . For example the protocol adapter and the web client are codes and routines stored on a non transitory memory in the hardware device and configured to provide the functionality described above for the protocol adapter and or the web client when executed by a processor not pictured . One having ordinary skill in the art will recognize that in one embodiment one or more of the protocol adapter and the web client are electronic circuit boards and or firmware adapted to provide the functionality described above for the protocol adapter and or the web client .

The collaboration services device provides services such as instant messaging and presence to the clients. The collaboration services device is communicatively coupled to the storage device and the CAS . The collaboration services device receives a CAS message from the CAS requesting instant messaging and or presence services and the collaboration services device communicates with the CAS to provide these services to the requesting client.

In one embodiment the collaboration services device is a hardware device comprised of electronic circuit boards and or firmware adapted to provide the functionality described above for the collaboration services device . The collaboration services device optionally comprises a processor and or a non transitory memory that stores codes and routines such as the firmware that is executed by the processor. In another embodiment the collaboration services device is codes and routines stored on a non transitory memory and configured to provide the functionality described above for the collaboration services device when executed by a processor not pictured . For example the collaboration services device is an application stored in a memory of a computer not pictured and executed by a processor not pictured comprised within the computer.

A person having ordinary skill in the art will recognize that in one embodiment the TAPI is configured to provide a portion of the presence service to the client device e.g. IP phone . For example the TAPI provides information such as whether the user of the client device is on the phone out of office or whether the client device is ringing.

In one embodiment the TAPI and the TMS communicate with each other to provide real time information about whether users are on a call. In another embodiment the TAPI and or the TMS communicate with the configuration storage see to provide the client with information about whether a user is out of the office. For example the configuration storage is a database that is accessed by the TMS to retrieve the information described above and then relayed to the TAPI which then communicates with the CAS to provide the client with this information via a CAS reply message. In one embodiment the CAS communicates with the configuration storage to determine some or all of the presence information it will provide to the client e.g. whether the user is out of the office .

The second server is a server configured to communicate with the CAS using the CAS plug in . In one embodiment this architecture beneficially isolates third party software operating on the second server from the CAS since the CAS plug in is executing in a different process than the processes executed on the CAS . The second server is a server that is communicatively coupled to the CAS . The second server communicates with the CAS to provide services requested by clients that are available via the second server . For example the second server is a third party server that communicates with the CAS to provide services such as presence or instant messaging to clients. In one embodiment the collaboration services device is a second server . The second server includes a non transitory storage medium not pictured and a processor not pictured .

In one embodiment the CAS plug in comprises third party software and the CAS plug in and the CAS execute on the same server but are in different processes. This architecture beneficially isolates the CAS from third party software since the CAS is in a different process than the CAS plug in .

The second server comprises a CAS plug in . The CAS plug in is codes and routines that enable the second server to communicate with the CAS . The CAS plug in is stored on the non transitory storage medium and executed by the processor comprised within the second server .

In one embodiment the CAS plug in is a service that provides additional functionality e.g. services and or events to clients communicatively coupled to the CAS . The services provided by the CAS plug in are referred to herein as plug in services. The events provided by the CAS plug in are referred to herein as plug in events. The CAS plug in operates on any processor based device having a memory to store the CAS plug in such as the second server described with reference to or the server described with reference to . In one embodiment clients log into CAS and access the services of the CAS plug in using CAS messages that request the plug in services via the CAS . In one embodiment CAS forwards the requests to the CAS plug in the CAS plug in provides a response to CAS and CAS forwards the response to the client. In another embodiment the CAS plug in is enabled to send events to CAS and CAS forwards the events to the client.

In yet another embodiment the CAS is configured so that the CAS plug in is required to register with the CAS to be eligible to provide services to the clients. For example CAS is configured to have the services organized into topics e.g. telephony email chat instant messaging etc . Some of these topics are set as restricted. A restricted topic is a topic of service that no CAS plug in can provide to the client. For example the telephony service can be restricted so that no CAS plug in can provide telephony service to the clients. In this case only the telephony module comprised within the CAS can provide telephony service to clients. In one embodiment the CAS plug in registers with CAS to provide services on any non restricted topic. Once the CAS plug in is registered the clients access the features of this plug in through CAS using an API specific to the plug in .

In one embodiment the CAS is configured so that only one CAS plug in can register for a given topic per instance of the CAS . In another embodiment one plug in is allowed to register an unlimited number of topics per instance of the CAS .

A person having ordinary skill in the art will recognize that the above described plug in architecture enables the CAS to access additional functionality provided by the CAS plug in . For example the second server is a server owned and operated by the same company that owns and operates the CAS and that company implements upgrades to the services provided by CAS via the second server instead of upgrading the CAS itself. This architecture also beneficially enables the CAS to integrate third party applications and services into the CAS . For example an integrator can write a CAS plug in that provides the third party application and or service and provide a means to enable the CAS to access the services available via the CAS plug in . The CAS plug in is stored on a different device such as the second server . In one embodiment the means to enable the CAS to access the services and or events available via the CAS plug in is a client that is stored on CAS or a plug in that is stored on a non transitory memory of the CAS and is different from the CAS plug in that enables the CAS to access the CAS plug in when executed by a processor of the CAS . This client or plug in is referred to herein as an access client or an access plug in .

As described above the CAS plug in also provides additional functionality. This additional functionality includes any service not provided by the CAS or duplicative in one or more respects. For example the CAS plug in can provide clients of the CAS with a cloud computing based telephony service.

A person having ordinary skill in the art will recognize that in one embodiment the access client or access plug in does not require a second server outside of the CAS to function. For example the CAS plug in is stored on any processor based device and the access client or access plug in communicates with the CAS plug in to provide different services to clients that communicate with the CAS .

In one embodiment the CAS plug in is stored on the CAS and used by the CAS to communicate with the second server and provide clients with services available on the second server . For example the CAS stores the CAS plug in and the CAS plug in enables the CAS to communicate with a second server and retrieve services and events from the second server .

A person having ordinary skill in the art will recognize how the system can be modified to include various telephony devices not shown including for example a conference bridge a telephony switch a softphone a smartphone a mobile phone etc.

Turning to depicted is the CAS according to one embodiment of the present invention. In addition to the CAS also depicts the IP phone the PCM the email client the MCM the web client the network the protocol adapter the web client the TAPI the voicemail server the storage device the collaboration services and a number of signal lines . Optionally the system depicted in also comprises a second server that includes the CAS plug in or other clients that are not depicted in such as softphones conference bridges call center applications etc that are communicatively coupled to the CAS via a signal line and the network . These elements listed above are similar to the elements described above for so that description will not be repeated here.

The CAS comprises a Client Application Server application CAS application a server a subscription module a telephony module a directory module a configuration module a voicemail module a call history module a presence module and an instant messenger module . In one embodiment the CAS comprises one or more processors not pictured and or one or more non transitory computer readable memories not pictured .

The server is a server that receives CAS messages and processes these messages to provide services requested by the clients. The server is communicatively coupled to the PCM via the network the email client via the network the protocol adapter the client side web client via the network the server side web client the TAPI via signal line the CAS application and the CAS modules i.e. modules . In one embodiment the server includes one or more processors and one or more non transitory computer readable memories. The server communicates with the above described elements to process requests included in CAS messages received by the server as described below with reference to . In one embodiment one or more of the CAS application and the CAS modules do not communicate with the server using CAS messages and the server translates messages to CAS messages that are sent as reply messages to the clients.

The CAS application is codes and routines that when executed by a processor cause the server to provide the functionality described below with reference to . For example the CAS application translates messages received from the CAS modules to CAS messages that are sent to the client as reply messages. The CAS application is communicatively coupled to the server . The CAS application is stored on a non transitory memory and executable by a processor. For example the CAS application is stored on a non transitory memory comprised within the server and executed by a processor comprised within the server .

In one embodiment one or more of the CAS application and the CAS modules are stored on a memory that comprises the server or one or more storage devices communicatively coupled to the server .

The subscription module manages subscriptions for clients. A subscription service includes for example adding modifying or deleting a subscription for a client device. A subscription is a registration of one or more of the clients to receive notifications in changes in the services provided by the CAS modules . In one embodiment the subscription service includes subscriptions to services available on the second server . A person having ordinary skill in the art will recognize that subscription services are possible. The subscription module is communicatively coupled to the server and the storage device . Subscription data that describes the different subscriptions for the clients is stored in the storage device . The subscription module receives a CAS message from the server and processes the message. For example the CAS message requests a read operation or a write operation for the subscription data stored on the storage device . The subscription module communicates with the storage device to process the request included in the CAS message. The subscription data is described in more detail with reference to . The subscription module is described in more detail with reference to .

The telephony module communicates with the TAPI to provide telephony services for clients. A telephony service is a conventional telephony service and includes for example placing a telephone call parking a call placing a call on hold placing a conference call etc. A person having ordinary skill in the art will recognize that other telephony services are possible. The telephony module is communicatively coupled to the server and the TAPI . A client e.g. the PCM the IP phone a softphone not pictured etc. sends a CAS message to the server requesting a telephone call connection. The server passes the CAS message to the telephony module . The telephony module communicates with the TAPI to connect the call. The TAPI sends a message to the server via signal line indicating that the call is connected. In one embodiment the server sends a reply message to the client indicating that the call is connected. The telephony module is described in more detail with reference to .

The directory module communicates with the storage device to provide a directory service to clients. A directory service is a conventional directory service and includes for example searching a directory database for a telephone number associated with a user specified by the client. The directory service can include for example 1 a system directory 2 a personal directory 3 distribution lists 4 speed dials 5 imported data and 6 uploaded data. A person having ordinary skill in the art will recognize that other directory services are possible. The directory module is communicatively coupled to the server and the storage device . A client e.g. the PCM sends a CAS message to the server requesting a directory service. The server sends the CAS message to the directory module . The directory module communicates with the storage device to provide the requested service to the client. The server sends a reply message to the client providing the requested service. The directory module is described in more detail with reference to .

The configuration module communicates with the storage device to provide a configuration service to clients. A configuration service modifies or describes the configuration for a client. For example a configuration services includes changing the configuration of a telephony device. A person having ordinary skill in the art will recognize that other configuration services are possible including for example providing the client with information describing the current call handling mode for a client. The configuration module is communicatively coupled to the server and the storage device . A client e.g. the PCM sends a CAS message to the server requesting a configuration service. The server sends the CAS message to the configuration module . The configuration module communicates with the storage device to provide the requested service. The server sends a reply message to the client providing the requested service. The configuration module is described in more detail with reference to .

The voicemail module communicates with the voicemail server and the storage device to provide a voicemail service to clients. A voicemail service is a conventional voicemail service and includes for example replaying voicemails that are stored in the storage device . A person having ordinary skill in the art will recognize that other voicemail services are possible. The voicemail module is communicatively coupled to the server and the voicemail server . A client e.g. the PCM sends a CAS message to the server requesting a voicemail service. The server sends the CAS message to the voicemail module . The voicemail module communicates with the voicemail server and the storage device to provide the requested service. The server sends a reply message to the client providing the requested service. The voicemail module is described in more detail with reference to .

The call history module communicates with the storage device to provide a call history service to clients. A call history service is a convention call history service and includes providing a client with information indicating for example which calls have been placed received and or missed using a particular telephony device e.g. and IP phone . This embodiment of call history is referred to herein as a device based call history. In one embodiment call history is tracked on a user basis instead of a device basis. For example a user has one or more devices and one or more extensions and the call history for each of these device s and extension s is tracked and recorded in a unified call history record. This embodiment of call history is referred to herein as a user based call history. The call history module is communicatively coupled to the server and the storage device . A client e.g. the PCM sends a CAS message to the server requesting a call history service. The server sends the CAS message to the call history module . The call history module communicates with the storage device to provide the requested service. The server sends a reply message to the client providing the requested service. The call history module is described in more detail with reference to .

The presence module communicates with the collaboration services device to provide a presence service to clients. In one embodiment the presence module communicates with the telephony module and the collaboration services device to provide presence service to clients. In this embodiment the presence module is communicatively coupled to the collaboration services device as shown in the storage device as shown in and the telephony module not pictured in . In an alternative embodiment the telephony module is communicatively coupled to the collaboration services device not pictured in and the presence module is communicatively coupled to the storage device and the collaboration services device . In another embodiment one or more of the CAS modules the CAS plug in and any other service provider work with the presence module and the collaboration services device to determine and provide presence data to the client device via the CAS .

A presence service is information indicating for example the availability of an individual user or a group of users on a network. The availability of a user or group of users on the network includes for example whether a device associated with a user or group of users is presently active on the network. In one embodiment the availability of a user or group of users on the network includes a description of a type of activity taken by a user or group of users such as on a call call on hold phone ringing etc. The presence module is communicatively coupled to the server and the collaboration services device . A client e.g. the web client sends a CAS message to the server requesting a presence service. The server sends the CAS message to the presence module . The presence module communicates with the collaboration service device to provide the requested service. The server sends a reply message to the client providing the requested service. The presence module is described in more detail with reference to .

The instant messenger module communicates with the collaboration services device to provide an instant messaging service to clients. An instant messaging service is real time direct text based communication between two or more people using personal computers or other processor based devices. The instant messenger module is communicatively coupled to the server and the collaboration services device . A client e.g. the web client sends a CAS message to the server requesting an instant messaging service. The server sends the CAS message to the instant messenger module . The instant messenger module communicates with the collaboration service device to provide the requested service. The server sends a reply message to the client providing the requested service. The instant messenger module is described in more detail with reference to .

In one embodiment the CAS modules i.e. modules are each hardware devices comprised of electronic circuit boards and or firmware adapted to provide the functionality described above for the modules . The individual hardware devices optionally comprise a processor and or a non transitory memory that stores codes and routines such as the firmware. In another embodiment the various modules are codes and routines stored on one or more non transitory memories and configured to provide the functionality described above for the modules when executed by a processor not pictured . For example the modules are one or more applications stored in a memory of a computer not pictured and executed by a processor not pictured comprised within the computer.

Although only one storage device is depicted in a person having ordinary skill in the art will recognize that in one embodiment there are more than one storage devices communicatively coupled to the CAS and that each one comprises one or more of the directory storage configuration storage voicemail storage call history storage permission storage and the subscription storage . One skilled in the art will also recognize that in one embodiment the different storages and the data they comprise are stored in different devices on the server side on the system . For example the voicemail storage is stored on a memory that comprises the voicemail server .

At step the server determines if the CAS communicates synchronously or asynchronously with the service provider. A determination that the CAS communications synchronously occurs if the CAS does not need to communicate with an intermediary to provide the client with the requested service. A determination that the CAS communications asynchronously occurs if the CAS communicates with an intermediary to provide the client with the requested service. An intermediary is the TAPI the voicemail server or the collaboration service device .

If a determination is made at step that the CAS communicates synchronously then at step the applicable module from step communicates with the storage device to provide the requested service. In one embodiment the applicable module interfaces with middleware in order to communicate with the storage device and provide the client with the requested service. Referring now to the server receives a response from the applicable module. The server translates the response for the client. For example the server translates the response to a HTTP message encoded according to JSON or XML. The server then sends the response to the client.

Referring back to if a determination is made at step that the CAS communicates asynchronously then at step the applicable module from step communicates with the intermediary. Since asynchronous communication requires more time to provide the requested service to the client at step the server alternatively sends a message to the client informing the client that asynchronous communication is occurring. For example the message informs the human user of the client that providing the requested service will take additional time. In one embodiment this message is encoded in JSON XML or a similar coding language. In one embodiment this message includes an identifier e.g. an integer used as an identifier that is later used to identify the reply message received from the CAS . For example the client is an HTTP based client that receives the message and the identifier. The client stores the identifier. After a period of time the client receives the reply message from the CAS and determines that the reply message corresponds to the identifier. In one embodiment the above described identifier is for clients having protocols that do not already contain a way to match up a request with a response. A person having ordinary skill in the art will recognize that HTTP based clients already includes the functionality of the identifier i.e. HTTP based clients can match up requests with responses so in one embodiment the above described identifier is implemented for clients that use a protocol that does not have the functionality of the identifier and cannot match up requests with responses.

The applicable module receives the response from the intermediary. Referring back to the server receives a response from the applicable module . The server then translates the response for the client. For example the response is translated to an HTTP message encoded using JSON or XML etc. . In one embodiment the translated response includes the identifier e.g. integer described above with reference to step .

In one embodiment the client logs in to the CAS prior to requesting a service. For example the CAS has one or more threads that receive requests from a client i.e. a thread pool . The individual threads that comprise the thread pool process individual requests from individual clients. For example the server assigns a first thread from the thread pool to log the client into the CAS and process request messages received from the client. In one embodiment when assigning a first thread the server does not make a distinction between a request for a service received from a client and a request for an event. The server also does not make a distinction between which threads handle requests for a service and which threads handle requests for retrieving events. Instead the server assigns a second thread from the thread pool to run an event loop that waits for request messages from the client and dispatches reply messages after the request messages are processed. In one embodiment the first thread also performs the function of the second thread.

In another embodiment from the client perspective the two threads are 1 one thread logs the client into the CAS and sends request messages to the client and 2 the second thread runs an event loop that sends request messages to the CAS or protocol adapter or web client and waits for reply messages responsive to the request messages.

In a different embodiment the client is a web client . The web client communicates with CAS on two threads from the thread pool. At any given time the web client uses a first thread to make a GetEvent request to the CAS . The web client uses a second thread to either 1 make a request for a service from the CAS or 2 wait to receive an input e.g. a input received from a human user of the web client to initiate a service request from the CAS . The GetEvent request is described in further detail in the provisional application having Ser. No. 61 365 262 the entirety of which is incorporated by reference in this application referred to herein as the priority application .

In one embodiment the CAS has a general pool of threads that process requests from clients. Threads are not assigned to any particular client and no distinction is made between clients in terms of choosing threads from the thread pool. In other words all the threads in the general thread pool can handle requests from any client. This is advantageous in that the server does not need one thread per client which makes the CAS scale up more efficiently.

In yet another embodiment the client is a thick client. Specifically one or more of the IP phone PCM email client and MCM are a thick client. For example the MCM is a thick client and is an element of a smartphone. A thick client is known to those having skill in the art. The thick client uses a first thread to make a GetEvent request to the CAS . The thick client uses a second to log in to the CAS and make service requests to the CAS .

In one embodiment the response described with reference to steps and or includes permission data. Permission data is data that specifies what actions the client can take with the provided service. For example if the client requests a call history service user based and or device based the CAS returns a response to the client at step that includes permission data that specifies what actions the client can take on call history entries returned to the client using the call history service. For example the permission data specifies whether the call history entries included in the history service can be deleted or whether notes included on the history entry can be updated. In one embodiment the permission data is applied to individual history items or the call history service as a whole e.g. the client is not permitted to request a call history service . A person having ordinary skill in the art will recognize that other actions are possible for the above described call history service. Accordingly the client has a record of the tasks that can be performed for any service. For example the client comprises a non transitory memory e.g. flash and stores a record of the permission data on the memory. In one embodiment if the permissions for a service change CAS sends a message to the client updating the permission data so that the client has real time permission data. In one embodiment the client does not offer the user the option of performing steps that exceed the scope of the permission for any given service. For example if the permission for a history service does not permit the client to delete a history entry the client is not provided with a menu option at the client device that would request deletion of the history entry. As a result in one embodiment the CAS does not have the undesirable requirement of sending error messages to the client devices when they make a request that exceeds the scope of permission granted to the client. In another embodiment the CAS sends error messages to certain clients that are not designed and or configured according to the specifications of the CAS referred to herein as other specification based clients when these other specification based clients make a request that exceeds the scope of permission granted to the client.

In another example of permission data a client is a web client and requests a telephone call. The CAS returns a reply message to the web client that includes among other things data specifying a state of the call the parties on the call and the way the call was constructed. In one embodiment the data additionally provides information to the client on precisely what actions the client has permission to take on that call such as answer hold drop transfer conference begin a data conference based on the call park etc as the call state changes or additional parties are added to the call CAS keeps the client apprised of the changes in which actions are allowed via events sent to the client.

Accordingly in one embodiment permissions are centralized on CAS and pushed out to clients as permission data included with messages sent by CAS to the clients. Centralizing permissions on the CAS as described above beneficially enables among other things a dynamic and more reliable way of providing permissions to client devices. For example other telephony systems e.g. system provide static permissions to client devices that do not reflect the real time status of permissions. The permission data provided by the CAS beneficially enables the client to receive real time status of permissions since CAS provides updated permission data with each request. Centralizing permissions on the CAS also beneficially enables among other things easier client authoring since the client does not need to contain logic to determine which actions the client can take this information is being provided by the CAS in one embodiment and enables a configuration where the CAS has access to all the information required for determining permissions clients do not have this information centrally stored and have to be configured with error prone code in order to determine permissions . Another benefit of the above described embodiment is that human users of clients will not expect to receive as many error messages. Other benefits will be apparent to one having skill in the art. The permission data will be described in more detail below with reference to .

In one embodiment permission data limits the scope of features for a service that can be provided to a client. For example whether a user can retrieve all of a call history. In another embodiment permission data limits access to the service itself. For example whether a user can request any call history service.

In one embodiment as described above with reference to steps and the response sent to the client at step includes permission data describing what actions the client can take on call history data returned to the client using the call history service e.g. whether the call history entries included in the history service can be deleted or whether notes included on the history entry can be updated .

The voicemail module receives the voicemail reply data from the voicemail server . The voicemail module generates and sends a message to the server including the voicemail reply data. The server translates the message received from the voicemail module for the client. For example the server translates the message to an HTTP message encoded according to JSON. This message is referred to herein as the first voicemail reply message. The first voicemail reply message includes the voicemail reply data. The server sends the reply message to the client.

In one embodiment the voicemail reply data also includes permission data that specifies what actions the client can take with the voicemail service. For example the permission data specifies that the client can perform one or more of the following actions 1 reply to the voicemail message 2 forward the voicemail message and 3 edit the subject of the voicemail message. Persons skilled in the art will recognize that the permission data can regulate other actions not listed here. In one embodiment these permissions are kept up to date by CAS via events and or messages sent by CAS to the client. For example if an administrator of CAS changes the permissions the CAS sends a message to the client updating the permission data.

In one embodiment permission data is not sent with reply messages for voicemail service requests. In this embodiment the client itself is configured so that the client only performs a limited number of options for how voicemail data is used and the client only provides options to the user that are consistent with these options. Similar clients are described in U.S. patent application Ser. No. 12 415 586 the entirety of which is hereby incorporated by reference. For example the client is a IP phone that is configured so that voicemail data is always played over the speaker of the IP phone . The client only provides the user with input options i.e. buttons and or a user interface that are consistent with this configuration i.e. inputs are only provided for playing the voicemail data over the speaker of the IP phone . In another example the client is an MCM stored on a smartphone and the client only supports playing the voicemail data back over the speaker of the smartphone and this is the only option presented to the user of the client. For example the smartphone only has one button for playback of voicemails and this button is only configured to playback the voicemail over the speaker of the mobile phone. In yet another example the client is a PCM stored as an element of a personal computer and the client supports playing the voicemail data back over a set of speakers that are communicatively coupled to the personal computer or playing the voicemail data back over the IP phone that is communicatively coupled to the client PCM . For example the PCM generates a graphical user interface displayed on a monitor communicatively coupled to the personal computer and the graphical user interface has two buttons for playback of voicemails. A first button is only configured to playback the voicemail over the speakers communicatively coupled to the personal computer. A second button is only configured to playback the voicemail over the IP phone communicatively coupled to the personal computer. A person having ordinary skill in the art will recognize that other options for voicemail data are possible that are still consistent with the description for this embodiment.

Turning to the server receives a second message from the client. For example the second request includes data indicating that a user desires to play a selected voicemail message. The second message is referred to herein as the second voicemail request message. The server sends the second voicemail request message to the voicemail module . At step the voicemail module sends a request to the voicemail server for the requested service. The voicemail server receives the request and processes the request to retrieve data from the voicemail storage responsive to the second voicemail request message. For example the second voicemail request message includes data for playing the selected voicemail. The voicemail storage is a storage device e.g. a database stored on a hard drive flash or other non transitory memory that includes for example stored voicemails for the client device. The voicemail server generates a query and retrieves the selected voicemail from the voicemail storage . The voicemail server sends the retrieved data to voicemail module . The voicemail module receives the data and sends the data to the server in a message. The server receives the message translates the message for the client and sends the translated message to the client. This message is referred to as the second voicemail reply message. At step the voicemail module receives data from the voicemail server when an action is about to take place e.g. the message is about to be played . The voicemail module sends the data to the server in a message. The server receives the message translates the message for the client and sends the translated message to the client. The voicemail data provides the client with the requested service. For example the user of the client listens to selected using the IP phone when the voicemail data is received .

In one embodiment the second voicemail reply message includes additional permission data that specifies what actions the client can perform on the data that comprises the voicemail. The additional permission data specifies for example how the client can access the data that comprises the voicemail. For example whether the client has the option to download the voicemail message media to a device and or play the voicemail message over a telephone or IP phone. Persons skilled in the art will recognize that the permission data can regulate other actions not listed here. In one embodiment these permissions are kept up to date by CAS via events and or messages sent by CAS to the client. For example if an administrator of CAS changes the permissions the CAS sends a message to the client updating the permission data.

In one embodiment if the client requests that the voicemail data is to be played back on the client device e.g. IP phone the voicemail module communicates with the voicemail server to send request that the voicemail server play the selected voicemail message. The voicemail server receives the request to play a selected voicemail message and establishes a connection to the client e.g. the IP phone . The voicemail server receives the request to play the selected voicemail message and establishes a connection to the client. The voicemail server notifies the voicemail module that the message is about to be played and starts playing the message for the client. When the voicemail module receives the notification that the message is about to be played from the voicemail server it sends an event to the client notifying it that the message is starting to play.

In another embodiment the client e.g. PCM sends a request to CAS that the voicemail data be downloaded. In one embodiment the downloaded voicemail data is played via speakers present at the client. For example the client sends a request to the CAS indicating that the client wants to download a specific message. The server sends the request to the voicemail module which sends the request to the voicemail server . In one embodiment the voicemail module sends a response to the client indicating the request has been received. The voicemail server communicates with the storage and prepares the selected voicemail message to be downloaded by the client. The voicemail server downloads the voicemail data to the storage . When the message is ready to be downloaded the voicemail module is notified by the voicemail server and sends an event to the client indicating the location of the message that can be downloaded e.g. the storage . The client can then download the message to a local memory and play the message using an application configured for this purpose.

In one embodiment the voicemail module saves the voicemail data received at step described with reference to . For example the voicemail module saves the voicemail data in the storage . In one embodiment the voicemail module saves the voicemail data and the permission data. The client then sends a third request to the CAS . The third request includes for example a request for the list of voicemails included in the voicemail data. The third request is not depicted in but will be understood to one having ordinary skill in the art as occurring between steps and . The third request is referred to herein as a third request not because it comes after the first request or the second request described above with reference to but instead to distinguish the content of the third request from the content of the first and second request i.e. the actual data and or service that is being requested from the CAS . After receiving the third request the method moves on to step and continues as described above for .

At step the server receives a CAS message including a request for a user s call handling settings. This message is referred to herein as the first configuration request message. The message is generated by a client such as the IP phone . The server determines that the first configuration request message is requesting a configuration service. The server sends the message to the configuration module . The configuration module generates a query for the configuration storage . For example the client device is a IP phone and the configuration storage is a database comprised within the storage device that includes data describing the call handling settings for the IP phone or a user of the IP phone . In one embodiment the call handling settings includes a menu of modifications that can be made to the call handling settings. The menu is based in part on permission data. For example the menu options only include modifications that are within the permission boundaries for the user and or client device. The configuration module retrieves a response to the query. For example the configuration module sends the query to the configuration storage . The configuration storage receives the query and executes the query on the configuration database. The configuration storage generates an answer to the query and sends the answer in a response back to the configuration module . The answer includes data responsive to the client request. The configuration module receives the answer to the query from the configuration storage . The configuration module sends the answer to the server and the server translates the answer. For example the server translates the answer to an HTTP message encoded according to JSON. This message includes the retrieved configuration data and is referred to herein as the first configuration reply message. In one embodiment the answer also includes permission data. The server sends the first configuration reply message to the client.

Turning to the server receives a second configuration request message from the client. For example the second configuration request message includes the data indicating a user selection made from the configuration menu sent to the client in the first configuration reply message. In this example the user requests a change to the call handling mode for the IP phone which is an example of a write operation to be performed on the configuration database. Since the configuration menu included a menu option for changing the call handling mode the permission data described above with reference to step included data indicating that the user has permission to modify the call handling mode of the client device. If the user did not have this permission the option to modify the call handling mode of the client device would not have been present in the configuration menu. The server sends the second configuration request message to the configuration module . At step the configuration module performs the write operation requested by the client. For example the configuration module modifies the configuration data by writing new configuration data to the configuration database . The call handling mode for the client device is now changed. Optionally at step the server sends a message to the client confirming that the write operation occurred. Step is depicted with a dashed line to indicate that it is an optional step of method .

In one embodiment the initial request for presence service described with reference to step includes a request for updates on the presence status of users. For example and as a continuation of the example described above where presence status is provided with a directory listing the user requests real time updates on the presence status of the users included in the directory listing. The CAS monitors the presence status of users and sends update messages to the client when the presence status of the users changes. For example the CAS communicates with the collaboration service device to monitor the status of the users in the requested directory listing and send messages to the client that include data describing the updated presence status of the users in the directory listing.

In one embodiment the request for presence service described with reference to step includes a request for updates on the presence status of users until an event occurs that indicates that the CAS should stop monitoring the presence status for these users. Examples of events that indicate the CAS should stop monitoring the presence status for these users includes 1 CAS receives a message from the client cancelling the presence service 2 the client logs out of CAS and 3 the client is abandoned by CAS due to inactivity. The CAS monitors the presence status of one or more users e.g. the presence status of a device associated with a user and sends presence status update messages to the client responsive to a change in the presence status of one or more users. For example and as a continuation of the example described above where presence status is provided with a directory listing the user requests real time updates on the presence status of the users included in the directory listing and updates on the presence status of the users included in the requested directory listing. The CAS communicates with the collaboration service device to monitor the status of the users in the requested directory listing and send messages to the client that update the presence status of the users in the directory listing. The client then generates and sends a message to the CAS canceling the presence updates. The CAS receives the message and ceases all presence monitoring and updates for the client.

In one embodiment the client sends a single request message for a presence service to the CAS . The request message is a CAS message. The CAS message requests both the presence service and the directory listing in a single message. For example the CAS message includes a request that the CAS provide the client with the directory listing or a subset thereof with presence information for the entries in the directory listing. The server receives the request optionally translates the request and passes the request to the directory module . The directory module receives the request from the server and communicates with the presence module and the collaboration services to provide the requested service. The server then sends a CAS message back to the client providing the requested directory listing and the requested presence information for the entries in the directory listing. In one embodiment the single request described above also includes a request for updates about the presence information. In this embodiment the directory module 1 receives the request from the server 2 performs the steps described above and 3 communicates with the subscription module to subscribe the client to updates about the presence information similar to the description in the two paragraphs immediately above this paragraph.

In one embodiment the presence module communicates with the collaboration services and other CAS modules to provide a compound presence service to a client. The compound presence service provides presence information to a one or more clients who have one or more presence enabled addresses. Such a client device can include for example an IP phone an externally assigned cell phone not pictured an externally assigned smartphone not pictured or any similar device. These devices are referred to herein as presence enabled devices. The presence enabled devices can include any device capable of communicating with the collaboration services to provide a presence status. In one embodiment the compound presence service provided by the presence module provides one or more of the following 1 information about a telephony presence e.g. whether a user is using their phone and or how the user is using their phone such as IP phone or a system that knows about other types of phones 2 information about a instant messaging presence i.e. information about a user s available for receiving instant messages 3 information about a mobile phone presence i.e. whether a user is using a mobile phone not pictured how a user is using a mobile phone and or whether a person is available to make and or receive a call on a mobile phone 4 a rollup presence i.e. a rollup presence is a single presence state that rolls up the presences of all endpoints into one value this is explained in further detail below and 5 any combination of the above described presence services e.g. the presence module retrieves a telephony presence and an instant messaging presence for client or the presence module retrieves all of the above described presence information for a client referred to herein as a everything presence request . For example a first client is a first PCM operating on a first personal computer. Persons having ordinary skill in the art will recognize that other clients are possible. A second user is associated with an IP phone and a second PCM . The first PCM sends a CAS message to the CAS including a compound presence request. A compound presence request is a presence request that includes a request for more than one type of presence service. In this example the compound presence request includes a telephony address and an instant messaging address for the second IP phone and the second PCM i.e. the first user is requesting presence information about the second user . The server receives the compound presence request and relays the request to the presence module . The presence module analyzes the compound presence request and identifies the telephony address and the instant messaging address. Since the compound presence request includes both a telephony address and an instant messaging address the presence module determines that the first PCM is requesting presence service for both telephony and instant messaging about the second user i.e. about the second IP phone and the second PCM . The presence module then communicates with the telephony module and the collaboration services to provide a telephony presence service to the first PCM e.g. information about whether the second user is on the phone or not and an instant messaging service similar to what is described below with reference to about the second user. Instant messages and instant messaging services are described in greater detail with reference to below.

In another embodiment the compound presence request identifies a user and requests both telephony and instant message presence information for the user without providing the separate addresses. In this embodiment presence module utilizes storage to determine the telephony address and instant message address from the user identifier and proceeds to provide the presence information utilizing these addresses.

In one embodiment the directory module and or the presence module provide a client or a user of the client with directory and or presence information for only those entries they are authorized to receive such information for. In one embodiment a client or a user of the client is authorized to receive directory data for certain entries but not the corresponding presence data for those entities. In one embodiment the directory module returns directory entries for a larger number of authorized entries but the presence module returns presence information for only the subset that the client is authorized to receive

As stated above in one embodiment the presence module is adapted to provide a rollup presence service to a client. There are various different embodiments of a rollup presence including for example 1 a most available rollup presence and 2 a semi available rollup presence. A person having ordinary skill in the art will recognize that other types of rollup presences are possible.

A most available rollup presence service describes a second user as a being available or any other similar characterization if the user is available on at least one client. For example a second user is associated with multiple addresses such as an extension number and an instant messaging address IM address . The second user s status on their extension which could for example be assigned to the IP phone describes a telephony presence for the second user and the second user s IM status e.g. on an instant messaging server not pictured describes an IM presence for the second user. A first user accesses a client and requests a most available presence service for the second user. The presence module receives the request and communicates with the telephony module and the collaboration services to determine the telephony presence and the IM presence for the second user. So long as the second user is available via ether telephony or IM the presence module sends a message to the first client indicating that the second user is available. If the second user is not available via either telephony or IM the presence module sends a message to the first client indicating that the second user is not available or any other similar characterization or offline. A person having ordinary skill in the art will recognize that there are other ways to implement a most available rollup presence.

A semi available rollup presence service is similar to a most available rollup presence service. The difference here is that a semi available rollup presence service describes a second user as a being semi available or any other similar characterization if the user is not available on every client associated with that user. For example a second user is associated with multiple clients with multiple addresses such as an extension number and an IM address. A first user accesses a client and requests a semi available presence service for the second user. The presence module receives the request and communicates with the telephony module and the collaboration services to determine the telephony presence and the IM presence for the second user. So long as the second user available at one but not all of the communication services i.e. telephony and IM the presence module determines the second user to be semi available and the presence module sends a message to the first client indicating that the second user is semi available or any other similar characterization . If the second user is not available via either telephony or IM the presence module sends a message to the first client indicating that the second user is not available or offline . A person having ordinary skill in the art will recognize that there are other ways to implement a semi available rollup presence.

With reference to the server receives a message from the client including a response input from the client. This message is referred to herein as the IM response input message. For example the web browser receives the first IM reply message and causes the new instant messaging window to be exposed using the graphics data included in the message. The user types an instant message and presses the enter key or the return key . The web browser generates a CAS message that includes the instant message and sends the IM response input message to the server . The server sends the IM response input message to the instant messaging module . The instant messaging module sends the IM response input message to the collaboration services device . In one embodiment instead of sending the input message to the instant messaging module the server sends the input message to the collaboration services device . The collaboration services device receives and processes the input message. For example the collaboration services device communicates with a second web browser in use by a second user and relays an instant message to the second browser based on the IM response input message. The collaboration services device receives a response from the second browser. For example the response from the second browser is an instant message for the first user from the second user. This response is referred to herein as a second IM response input message. The instant messaging module receives the second IM response input message from the collaboration services device and sends it to the server in a message. The server translates the message for the client. For example the server translates the message to be a CAS message that includes the data included in the second IM response input message. This message is referred to herein as the second IM reply message. Step is depicted in with a dashed line since it is an optional step in method . For example in one embodiment the second IM response input message sent from the collaboration services device to the CAS is a CAS message that does not require translation by the server . The server sends the second IM reply message to the first web browser.

With reference to the read service continues at step where the subscription module generates a query for the subscription database. For example a query that retrieves a list of the subscriptions for a client device. The subscription module receives reply data responsive to the query. The subscription module sends the reply data to the server and the server generates a CAS message that includes the reply data. This message is referred to herein as a subscription reply message. The server sends the subscription reply message to the client.

Still referring to the write service continues at step where the subscription module writes new data to the subscription database. For example the subscription module writes a new subscription to the subscription database responsive to the request received from the client. The server sends a message that includes confirmation of the write function to the client. This message is referred to herein as the second subscription reply message.

In one embodiment the both read and write functions the subscription database returns a summary subscription list. The summary subscription list describes all or a portion of the subscriptions for the client.

The CAS receives a CAS message from the client. The CAS message is a bulk request. The bulk request includes multiple requests and specifies how to process replies to the requests. The CAS determines that the CAS message includes multiple requests and is therefore a bulk request. The CAS determines the different types of services requested by each different request. The CAS determines how the client wants the replies to be delivered e.g. 1 bulk responses 2 serial responses or 3 a mixture of bulk responses and serial responses. The CAS processes the different requests as specified above for and sends the responses to the client as determined in step . The priority application includes additional description relevant to step .

The foregoing description of the embodiments of the present invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the present invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the present invention be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the present invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the present invention or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules routines features attributes methodologies and other aspects of the present invention can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the present invention is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the present invention which is set forth in the following claims.

