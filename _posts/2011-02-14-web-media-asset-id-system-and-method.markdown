---

title: Web media asset ID system and method
abstract: Methods of dynamically identifying a server provided media asset on a client device are provided herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08448063&OS=08448063&RS=08448063
owner: Intel Corporation
number: 08448063
owner_city: Santa Clara
owner_country: US
publication_date: 20110214
---
The present application is a divisional application of U.S. patent application Ser. No. 11 756 588 Web Media Asset Identification System and Method filed May 31 2007 pending naming as inventors Jeffrey Martin Chasen and Jeffrey D. Leitner and claims the benefits of priority under 35 USC 120 to said application the entirety of which is hereby incorporated by reference.

The present invention relates to online content and more particularly for a method of identifying and providing download links to media assets in a rendered web page.

The Internet is a worldwide publicly accessible network of interconnected computer networks that transmit data by packet switching using the standard Internet Protocol IP . The network of networks consists of many smaller domestic academic business and government networks that together enable various services such as electronic mail online chat file transfer and the interlinked web pages and other documents of the World Wide Web.

It has become very popular to distribute video and audio over the Internet. Especially since broadband Internet access has become more common media clips are often embedded in or linked to web pages. Currently there are a multitude of media clips available online with new websites frequently springing up offering online media to users. One of the most popular of these sites is YouTube provided by Google Inc. of Mountain View Calif. which features both media produced by established media sources and also media produced by small groups and amateurs. Between March and July of the year 2006 YouTube alone grew from 30 to 100 million views of videos per day.

In addition to dedicated video sharing sites such as YouTube many existing radio and television broadcasters provide Internet feeds of their live audio and video streams for example the British Broadcasting Service . Broadcasters may also allow users to time shift their viewing or listening.

Because there are so many websites providing online media an Internet connected device such as a computer game console set top box handheld computer cell phone or other device can be used to access on line media in much the same way as was previously possible only with a television or radio receiver.

One of the most common formats used to distribute media on the Internet is the Flash Video or FLV format. Other common formats include Windows Media Video RealMedia Quicktime and DivX. Online media encoded in many of these formats including Flash Video either can be streamed to a web browser or other client for online viewing or they can be downloaded to a storage device. Many users prefer to download pieces of media rather than stream them for a variety of reasons a user may prefer to watch or listen to the media at a time when he or she may be offline a user may prefer to archive a copy so that he or she will be able to watch or listen to the media in the future even if the website currently hosting it goes down a user may prefer to share the file itself with others rather than share a link to the file or a user may prefer to download the media for a myriad of other reasons.

There are many ways to download media content from a web site. If the site provides a direct link to the file on the rendered page downloading a media file may be as easy as right clicking and selecting Save Link As . . . or some similar command. There are also well known methods for extracting explicit links from the HTML source of a web page even if a web site does not render a direct link. However it is a common practice for websites to make it difficult for users to download media files. One technique to make downloads difficult is to link to or embed a wrapper in a web page rather than directly linking to or embedding a media clip. Common examples of media wrappers include JavaScript media players Flash media players ActiveX media players VBScript players and the like.

JavaScript is the name of the Mozilla Foundation s of Mountain View Calif. implementation of the ECMAScript standard a scripting language based on the concept of prototype based programming. The language is best known for its use in websites as client side JavaScript but is also used to enable scripting access to objects embedded in other applications.

Adobe Flash or simply Flash refers to the Adobe Flash Player from Adobe Systems Inc. of San Jose Calif. The Flash Player is a client application available in most common web browsers. It features support for vector and raster graphics a scripting language called ActionScript and bi directional streaming of audio and video. There are also versions of the Flash Player for mobile phones and other non PC devices such as Internet Tablets personal digital assistants the Kodak Easyshare One camera from Eastman Kodak Co. of Rochester N.Y. and the Playstation Portable From Sony Corporation of Japan among others.

ActiveX is a term that is used to denote reusable software components that are based on the Microsoft Component Object Model COM from Microsoft Corp. of Redmond Wash. ActiveX controls provide encapsulated reusable functionality to programs and they are typically but not always visual in nature. Example ActiveX controls include Adobe Reader and Adobe Flash Player from Adobe Systems Inc. of San Jose Calif. QuickTime Player from Apple Inc. of Cupertino Calif. Microsoft Windows Media Player from from Microsoft Corp. of Redmond Wash. RealPlayer from RealNetworks Inc. of Seattle Wash. and Java Virtual Machine from Sun Microsystems Inc. of Santa Clara Calif.

VBScript short for Visual Basic Scripting Edition is an Active Scripting language interpreted via Windows Script Host from Microsoft Corp. of Redmond Wash. When employed in Microsoft Internet Explorer VBScript is very similar in function to JavaScript it processes code embedded in HTML. VBScript can also be used to create stand alone HTML applications file extension .hta .

Popular web sites such as YouTube Vimeo and Grouper currently make use of wrappers to obfuscate media assets. There are methods known in the art to download media assets that are obfuscated behind a wrapper but existing methods all fall short in a number of ways.

One known method identifies media assets by comparing the content on a given web page with a catalog detailing the technical methods used by certain web sites to obfuscate media assets. If the web page in question is hosted by a known web site then this method may be able to identify and allow the user to download a media asset that is obfuscated on that page. For example the catalog might allow one to deduce that the web page http hiddenvids.com video foo would contain a video asset located at http secret.hiddenvids.com video foo.mpg. This method may be implemented on a client for example as a browser plug in or it may be implemented using a proxy server that serves as an intermediary between the client and the target web site.

Disadvantages to this method include the facts that it requires that each individual web site be cataloged and that it requires each individual catalog entry to be continually monitored so that it can be updated when the web site operator changes its obfuscation strategy. For example this method would have no way of discovering media assets on a new web site until that site s obfuscation schemes were analyzed and input into the catalog. In addition this method would fail to identify media assets even on known web sites if the web site operator changes its obfuscation scheme in even a simple way such as changing the name of the host that stores the media assets.

Another known method is stream ripping. Using this method a client intercepts the data stream corresponding to a streaming media asset allowing the user to redirect that data to a file on a storage medium. One disadvantage to this method is that the media asset may be streamed in real time meaning that it would take up to thirty minutes to capture a thirty minute media asset.

The detailed description that follows is represented largely in terms of processes and symbolic representations of operations by conventional computer components including a processor memory storage devices for the processor connected display devices and input devices. Furthermore these processes and operations may utilize conventional computer components in a heterogeneous distributed computing environment including remote file Servers computer Servers and memory storage devices. Each of these conventional distributed computing components is accessible by the processor via a communication network.

Reference is now made in detail to the description of the embodiments as illustrated in the drawings. While embodiments are described in connection with the drawings and related descriptions there is no intent to limit the scope to the embodiments disclosed herein. On the contrary the intent is to cover all alternatives modifications and equivalents. In alternate embodiments additional devices or combinations of illustrated devices may be added to or combined without limiting the scope to the embodiments disclosed herein.

Users would like to be able to download media content even from web sites that take steps to obfuscate media assets. Embodiments described herein overcomes deficiencies in existing methods by providing a media asset identification routine that can analyze the communication between the browser and a web server to identify media assets whether obfuscated or not and associate media assets with a particular web page element.

The client device also includes a processing unit a memory and may include an optional display all interconnected along with the network interface via a bus . The memory generally comprises a random access memory RAM a read only memory ROM and a permanent mass storage device such as a disk drive or flash drive. The memory stores program code for a web browser media player and the media asset identification routine . In addition the memory also stores an operating system . It will be appreciated that these software components may be loaded from a computer readable medium into memory of the client device using an input mechanism not shown associated with a computer readable medium such as a floppy disc tape DVD CD ROM drive memory card via the network interface or the like.

Although an exemplary client device has been described that generally conforms to a conventional general purpose computing device those of ordinary skill in the art will appreciate that a client device may be any of a great number of devices capable of communicating with the network for example a personal computer a game console a set top box a handheld computer a cell phone or any other device that is capable of accessing on line media and that is capable of running a media asset identification routine in conjunction with displaying web pages.

Initially a user may visit a web page that contains one or more media assets. After the user navigates to the page in the browser the client device requests that page from the appropriate web server . On receiving that request the web server locates the requested page in its memory and or otherwise processes the request so that it can respond to the client device s request . The web server responds to the client device s request by transmitting at least an initial set of data that the client device uses in order to render the page in the browser. The client device then begins to render the requested page.

Rendering the page may often involve client device s requesting additional data from the web server . For example if the requested page includes a media assets such as an images or an obfuscated media asset the client may make additional requests to the web server for additional data to allow the browser to render the page. On receiving these additional requests the web server will process the requests and if the requested data is located on the media server the web server will request that data from the media server . The web server will then transmit the requested information back to the client device .

During this rendering process the media asset identification routine illustrated in and described below is able to interpret the rendered page and analyze the communications between the client device and the web server in order to identify media assets. If any media assets are found the client device will add a control or tag for the media assets to the rendered web page.

The media asset identification process just described that takes place on the client device is detailed in which illustrates an exemplary flow diagram of a media asset identification routine . Routine begins at block where the browser requests a web page that may contain one or more media assets. In block the requested web page is received and in looping block routine begins to analyze each page element that may be rendered. The page elements may be represented by a DOM Document Object Model a platform and language independent standard object model for representing HTML or XML and related formats in which case the media asset identification routine would operate by traversing the DOM. In alternate methods the page elements may be iterated through in some other suitable fashion.

In block routine analyzes the communications traffic between the client device and the web server for rendering the requested page looking for media indicative traffic. In decision block routine determines whether a media asset is found in the analyzed traffic. A media asset may be identified by examining the Multipurpose Internet Mail Extensions MIME type of an element to determine whether that element is of a type that will be handled by a media player. MIME is an Internet Standard that among other things includes a method to register content types and associate them with handler applications. The specifics of MIME are detailed in RFC 2045 which is incorporated herein in its entirety.

If no media asset is found in decision block processing cycles back to looping block where the next renderable page element is analyzed. If a media asset is located in decision block subroutine block illustrated in and described below performs additional processing to associate a renderable page element with the media asset.

Next in block routine stores the location of the identified media asset and its determined associated page element. If there are additional renderable page elements to analyze looping block cycles processing back to looping block if not looping block directs processing to block .

Beginning in looping block all media assets that were stored in block are processed. In block routine adds a control or tag associated with a stored page element that is associated with an identified media asset. In some cases such a tag may be visual indication that will be rendered along with the page element a visual indication such as an image or a text link. The link may contain a Uniform Resource Identifier URI that identifies or names the media asset. In other cases such tag may comprise adding a selectable item to a menu e.g. a right click menu a roll over menu or the like associated with the page element.

Adding a command to such a menu may involve hooking into a browser s API An application programming interface API is a source code interface that a computer system or program library provides to support requests for services to be made of it by a computer program. Hooking is a technique employing so called hooks to make a chain of procedures as a handler. Thus after the handled event occurs control flow follows the chain in specific order. The new hook registers its own address as handler for the event and is expected to call the original handler at some point usually at the end. Import Table Patching is one suitable method of API hooking usable by some embodiments. In the Windows operating system from Microsoft Corp. of Redmond Wash. most applications and modules have a so called import table which may include a list of APIs that the application or module calls. Other operating environments may include similar techniques for hooking into an application suited for rendering page elements.

If there are additional stored page elements looping block will cycle processing back to looping block if not looping block directs processing to block . Block renders the depiction of the page in the browser and processing ends at block .

The media asset identification routine could also be adapted to prospectively identify renderable media assets on web pages that the current web page provides links to. For example a web page may contain a list of links to web pages that contain renderable media assets. By adapting the media asset identification routine to retrieve data from each linked page and to virtually render that data processing the data as if it were to be rendered without presenting the results to the user in order to identify media assets contained therein the user could advantageously be presented with controls that could allow the user to download media assets from many pages without having to visit each individual page controls that may reduce any delay in adding a control to a media asset on a page that the user navigates to.

In a hybrid approach another alternate embodiment may process links to other web pages only after a current web page has been analyzed and rendered i.e. during a browser s idle time.

Once all page elements have been examined in block subroutine determines whether a page element that is to be rendered has been stored. If so processing is directed to return block which returns the stored page element to the calling routine. If blocks did not identify and store a page element to be rendered then processing is directed to block . In block subroutine determines which page elements will be rendered by examining their characteristics. For example the size of a page element may indicate that it is likely one that will be rendered. Block stores a page element identified as being probably rendered. In return block the stored page element is returned to the media asset identification routine .

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the embodiments discussed herein.

