---

title: System and method for malware detection using multiple techniques
abstract: In certain embodiments, a method includes receiving, at a first malware detection node, from a malware detection system a request to apply a first malware detection technique to a file. The malware detection system is configured to determine whether the file is suspected malware by analyzing a plurality of predefined result states received in response to the first malware detection node applying the first malware detection technique to the file and a second malware detection node applying a second malware detection technique to the file. The method includes receiving at least one result from a malware detection engine of applying the first malware detection technique to the file and determining at least one predefined result state based on the received at least one result. The method includes reporting, by the first malware detection node, the at least one predefined result state to the malware detection system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009820&OS=09009820&RS=09009820
owner: Raytheon Company
number: 09009820
owner_city: Waltham
owner_country: US
publication_date: 20110214
---
This application is a continuation in part of pending U.S. application Ser. No. 12 719 535 filed Mar. 8 2010 the entire contents of which is hereby incorporated by reference.

This disclosure relates generally to computer security and more particularly to a system and method for malware detection using multiple techniques.

Malware such as viruses trojans and other malicious software has become increasingly more difficult to protect against. Various methods have been used to combat malware but more sophisticated malware continues to abound. Methods of detection have grown more complex but have also taken longer to execute as a result of this complexity. Certain systems such as messaging systems require malware detection to proceed at a pace that at times can render the usage of sophisticated malware detection schemes unavailable. This leaves such systems vulnerable. Further securing systems or networks using different malware detection technologies can be cumbersome due to incompatibilities between the different malware detection technologies.

According to certain embodiments of the present disclosure disadvantages and problems associated with previous techniques for malware detection may be reduced or eliminated.

In certain embodiments a method includes receiving at a first malware detection node from a malware detection system a request to apply a first malware detection technique to a file. The malware detection system is configured to determine whether the file is suspected malware by analyzing a plurality of predefined result states received in response to the first malware detection node applying the first malware detection technique to the file and a second malware detection node applying a second malware detection technique to the file. The method includes receiving at the first malware detection node at least one result from a malware detection engine of applying the first malware detection technique to the file. Further the method includes determining at the first malware detection node at least one predefined result state of the plurality of predefined result states based on the received at least one result. The method also includes reporting by the first malware detection node the at least one predefined result state to the malware detection system.

In certain embodiments the request may be in a first format that the malware detection system is configured to use when communicating with the first malware detection node and the second malware detection node. The method may include receiving at the first malware detection node the file from the malware detection system in a communication in the first format. The method may also include providing by the first malware detection node the file to the malware detection engine in a second format different than the first format. The malware detection engine may be configured to process files received in the second format but not files received in the first format. In addition the method may include receiving at the first malware detection node the at least one result in the second format from the malware detection engine.

In certain embodiments the file may be a first file. The method may further include providing by the first malware detection node a second file to the malware detection system. The second file may be generated by the malware detection engine while applying the first malware detection technique to the first file.

In certain embodiments an apparatus includes at least one processor and at least one computer readable medium comprising instructions that when executed by the at least one processor are operable to send to a first malware detection node a first request to apply a first malware detection technique to a file. The instructions are also operable to send to a second malware detection node a second request to apply a second malware detection technique to the file. Further the instructions are operable to receive a first predefined result state from the first malware detection node in response to a first malware detection engine providing a first result of applying the first malware detection technique to the file. The apparatus is configured to analyze the first predefined result state. In addition the instructions are operable to receive a second predefined result state from the second malware detection node in response to a second malware detection engine providing a second result of applying the second malware detection technique to the file. The apparatus is configured to analyze the second predefined result state. The instructions are also operable to analyze the first and second predefined result states. In addition the instructions are operable to determine whether the file is malware in response to analyzing the first and second predefined result states.

Certain embodiments of the present disclosure may provide one or more technical advantages. In certain embodiments new malware detection techniques may be implemented in a system that uses a plurality of malware detection techniques efficiently. A malware detection engine implementing the new malware detection technique may be added to a system that applies multiple malware detection techniques without having to modify the malware detection engine.

Certain embodiments of the present disclosure may provide some all or none of the above advantages. Certain embodiments may provide one or more other technical advantages one or more of which may be readily apparent to those skilled in the art from the figures descriptions and claims included herein.

Networks and in some embodiments may be communicative platforms operable to exchange data or information. In various embodiments the networks may include packet data networks offering communication interfaces or exchanges between any two nodes in system . Networks and may each be or include any local area network LAN metropolitan area network MAN wide area network WAN wireless local area network WLAN virtual private network VPN intranet Internet plain old telephone system POTS or any other appropriate architecture or system that facilitates communications in a network or telephonic environment including a combination of any networks or systems described above. The networks may also include wireless technology such as WiMAX LTE or any of a variety of cellular data networks. In various embodiments networks and may each include firewalls or other equipment or software that create security zones and or secure networks such as DMZs. One or more of blocks may be located in one more of such security zones and or secure networks in some embodiments. For example analysis console may be in a DMZ that is separate from ingest block and detection block . As another example ingest block may be in a different security zone than detection block .

As described above embodiments of the present invention are operable to detect malware. In particular embodiments of the present invention are operable to detect malware in one or more files. For purposes of this disclosure a file may include one or more of the following in any suitable combination 1 a data file 2 a data record 3 an email message 4 an attachment to an email message 5 a Uniform Resource Locator URL or other suitable address identifier and 6 any other suitable target object for which malware detection may be appropriate.

In operation in various embodiments ingest block may receive a file or set of files from network . In some embodiments a file may include several files embedded within the file. For example a ZIP file or other archive or compressed file type may be received by ingest block . Ingest block may extract and cause to be analyzed the files that are contained within the received ZIP file. Ingest block may analyze the file s and determine one or more tests that should be performed on the file s in order to determine whether the file is malware. Detection block may perform the test s that were determined by ingest block in accordance with scheduling performed by scheduler block . Disposition block may utilize the results of the tests performed by detection block to determine what should be done with the file s . In some cases disposition block will send the file s to analysis console for further review by a human analyst. In various embodiments disposition block may respond to the results of detection block regardless of whether it sends the file s to analysis console . For example disposition block may determine that the file s should be quarantined and send the file to server block to quarantine the file. In some embodiments disposition block may also determine that the file s are not malware and may perform suitable corresponding actions with nodes coupled to external network . For example disposition block may cause the delivery of a message to which the analyzed file s were attached in response to the determination by disposition block that the file s are not malware.

Some or all of system in various embodiments may be utilized to detect malware in a variety of contexts. In some embodiments accessing a file may comprise accessing one or more URLs. For example aspects of system may be used to detect malware in a messaging environment. Suitable messaging environments include but are not limited to an e mail environment an instant messaging environment a peer to peer messaging environment a chat environment or other messaging environments. Aspects of system in various embodiments may also be used in contexts where files are uploaded. For example some or all of system may be utilized in File Transfer Protocol FTP sessions Wiki sessions online message boards such as forums or other interactive environments. Aspects of system may also be used in a Web browsing context. In such a context some or all of system may analyze requested Web pages and determine if they are malicious. System may be used to detect malware in these and other contexts utilizing suitable configurations of ingest block . For example if the context is an e mail context then ingest block may be configured as a Mail Transfer Agent MTA that is able to handle e mail messages. Configured in this manner ingest block may analyze a message an attachment to the message or both the message and any attachment s to the message. When some or all of system operates in a context where files are uploaded such as in an FTP session ingest block may be configured to access the file s associated with the FTP session and perform analysis on the file s . When aspects of system are used in a Web browsing context ingest block may be configured to retrieve an address associated with an Internet site or files associated with the Internet site and analyze such items.

In some embodiments some or all of system may be provided as a service to various agents. For example an agent analyzing traffic passing through a particular boundary of a network may transmit certain traffic such as one or more files to aspects of system for analysis and these or other aspects of system may report to the agent the results of the analysis. As another example an agent residing on a workstation or laptop computer used by end users may similarly transmit one or more files to some or all of system for analysis and receive the results of the analysis. A particular example of such an agent is a client located module capable of analyzing the downloaded contents of web based email e.g. GMAIL by GOOGLE HOTMAIL by WINDOWS or any other suitable web based email program . As another example a collaborative environment such as one associated with a cross domain document management system e.g. RAYTHEON s CHAIN environment may utilize this service to check files hosted on the platform for malware. In some embodiments aspects of system may be offered as a service using Web service technology such as Javascript based Application Programming Interfaces APIs Simple Object Access Protocol SOAP Remote Procedure Calls RPCs and or other suitable network based APIs.

System in various embodiments may be configured to operate in one or more of an active mode a passive mode and a hybrid mode. Each of these example modes is described below in greater detail.

When operating in an active mode system may delay one or more operations while the malware process is proceeding depending on the context in which system is operating. For example as discussed above system may operate in a messaging context such as analyzing e mail messages. If in the active mode system may prevent the delivery of an e mail until an attachment to the e mail has been analyzed for malware using blocks . As another example when system is operating in an active mode in a context where files are being uploaded system may stop a file from being uploaded until the malware detection process applied to the file has been completed. Hence in some embodiments if a file was being uploaded to a database the file would not be entered into the database and made available to other users or processes until the file has been analyzed by the malware detection scheme of system . If system operates in a Web browsing context and is operating in the active mode an Internet site may not be transmitted to a Web browser requesting the site until the site has been fully analyzed for malware by system . In some embodiments ingest block may be used to prevent the completion of operations until malware detection has been completed.

System in various embodiments may operate in a passive mode. While in the passive mode system may not prevent the operation of processes while a file is being detected for malware. For example when system is handling e mail messages or their attachments and operating in the passive mode the e mails may continue to be processed and delivered even though the malware detection process has not been completed. As another example when system operates in the passive mode and is operating on files in a file uploading context a file to be analyzed for malware may be uploaded stored and made available to other users or processes even though the system has not completed analyzing the file for malware.

System in various embodiments may operate in a hybrid mode which may comprise an ability incorporate aspects of both the passive and active modes. In one example hybrid mode system may operate in a hybrid mode for detection purposes. When a file is determined to be known malware system may switch to an active mode preventing or delaying one or more operations while the malware process is proceeding depending on the context in which system is operating. As a particular example when in the hybrid mode system may allow emails to be processed and delivered during the detection process however when an email is determined to be or include known malware system may prevent the email and or its contents from being delivered in an active manner.

File type module may be implemented using software and or hardware and may reside on the same hardware that ingest module resides upon or on different hardware. File type module in some embodiments may be configured to determine the type of file that ingest module receives. File type module may determine the type of a file using any suitable methods in combination or separately. For example file type module may examine an extension associated with the file to determine the type of the file. As another example file type module may examine portions of the file in order to determine its type. File type module may look at characters in a header of a file to determine its type. Such characters may be referred to as magic numbers or magic bits. In this manner in some embodiments file type module may detect the correct type of the file even if the file s extension has been removed or changed. As another example for certain types of files e.g. MICROSOFT OFFICE files may determine the file type based on both magic number s and the file extension possibly examining the magic number s prior to examining the file extension.

In various embodiments duplicate module may be implemented using software and or hardware and may reside on the same hardware as ingest module or on different hardware. Duplicate module may be configured to determine whether a file has been previously analyzed for malware. Duplicate module may use one or more techniques to determine if a file has been previously analyzed for malware. For example duplicate module may perform generate one or more hashes of the file such as a checksum an MD5 hash and or a SHA1 hash . These value s may be compared to a database containing hash values of previously analyzed files. If the hash value is in the database duplicate module may determine that the file has been previously analyzed. If the hash value is not present in the database duplicate module may determine that the file has not been previously analyzed. In some embodiments duplicate module may use the name of the file and or its extension as well as variations on those items to determine if the file has been previously analyzed.

If it is determined that a file has been analyzed previously malware detection schemes may not be applied to the file instead the results of the previous analysis of the file may be determined using a database that contains results of a previous analysis of the file. If the results indicate that the file is known not to be malware then the analysis of the file may end. If it is determined that the file was previously determined to be malware then it may be determined that the file should be quarantined. If it is determined that the file has been previously received and is currently going through analysis including review by human analysts then action may be taken once the outcome of the ongoing analysis is known. In some embodiments this may allow for more efficient utilization of the resources that perform the malware detection schemes on the files and may reduce the workload of the human analyst.

Policy module in various embodiments may be implemented using software hardware or a combination of the two. Policy module may reside on the same hardware as ingest module or it may reside on separate hardware. In some embodiments policy module may be used to determine whether a file received by ingest module should undergo malware detection and or which malware detection schemes should be applied to a file received by ingest module . Policy module may be configured to access ingest policy database to make such determinations in various embodiments.

For example policy module may determine that a file received by ingest module is a plain text file. Policy module may then access ingest policy database and retrieve one or more policies associated with plain text files. A retrieved policy may indicate that plain text files are not to be analyzed for malware. As a result the plain text file may be ignored.

As another example policy module may determine that a file received by ingest module is a document created by the MICROSOFT WORD application. Policy module may then access ingest policy database and retrieve one or more policies associated with MICROSOFT WORD documents. Policy module may examine the retrieved policy or policies and determine that the received file should be analyzed for malware. Policy module may also examine the retrieved policy or policies and determine the malware detection schemes that should be applied to the MICROSOFT WORD document. Policy module may then create entries in jobs database consistent with the determined malware detection schemes.

In some embodiments policy module may also determine that the file should be accessed by different versions of software. Versions of software may include different versions of application used to access the file or may include using different versions of an operating system used to access the file. For example if the file is a MICROSOFT WORD document it may be determined that a different version of MICROSOFT WORD should be used to access the file. As another example if the file is an image file such as a JPEG file then it may be determined to access the file using different image applications such as ADOBE PHOTOSHOP and MICROSOFT INTERNET EXPLORER. As another example if the file is a URL then it may be determined to access the file using different vendor s version of a browser such as MICROSOFT INTERNET EXPLORER MOZILLA FIREFOX APPLE SAFARI and any other suitable browsers. In some embodiments determining to access the file using a variety of versions of software may provide for a more robust malware detection scheme.

Schedule module in various embodiments may be implemented using software hardware or a combination of the two. Schedule module may reside on the same hardware as scheduler module or it may reside on separate hardware. Schedule module in some embodiments may determine the order in which jobs in jobs database are performed. Schedule module may maintain a list of detection nodes that can receive the jobs and may assign the jobs using any suitable method. For example schedule module may use a first in first out FIFO algorithm to assign jobs to detection nodes. Jobs may also be prioritized. For example schedule module may use a FIFO approach to schedule jobs initially but it may be determined to prioritize one job over another in response to results provided by the detection nodes. Schedule policies may be used by schedule module to determine how to schedule jobs and how to prioritize jobs. Priorities for jobs in some embodiments may also be determined based on the context associated with the file. For example if the file undergoing analysis was part of an e mail attachment it may be prioritized higher than other files.

In some embodiments when adding a new malware detection scheme policies used by schedule module may need to be modified. The interface may require information to be entered regarding how the malware detection scheme should be applied. Such information may be entered using a tabbed interface a wizard style interface or other interfaces for entering information. The information required to be entered may include how jobs should be prioritized based on responses from detection nodes the context associated with the file what detection nodes are involved in implementing the malware detection scheme and or other items associated with applying a malware detection scheme.

Monitor module in various embodiments may be implemented using any suitable combination of software and hardware. Monitor module may reside on the same hardware as scheduler module or it may reside on separate hardware. Monitor module may be able to monitor the capacity of detection nodes that apply various malware detection schemes to a file. In some embodiments monitor module may query the detection nodes to determine their status. Example status responses may include offline and or busy. In some embodiments monitor module may determine if a detection node has taken too long to analyze a file. Monitor module may be able to reboot or restore aspects of detection nodes. In various embodiments monitor module may be able to reconfigure a detection node so that the detection node may perform a different type of analysis. This reconfiguration may be performed in response to the types of files that are scheduled to be analyzed. In some embodiments this reconfiguration capability may provide an advantage in that detection nodes may be utilized efficiently and files may be analyzed faster.

Monitor module may also be able to determine when the capacity of the detection nodes reaches a critical threshold. Schedule module and or monitor module may ensure that detection nodes do not pass critical thresholds. Monitor module may also be able to determine when the load on the detection nodes decreased below a critical threshold. Monitor module may also be able to establish various thresholds regarding the capacity of detection nodes and may be able to determine when the load of the various detection nodes has gone below any of the thresholds. For example the ability to monitor thresholds and take appropriate action in response to the monitoring may be particularly useful in determining when to switch between one or more modes of operation such as the active passive and hybrid modes. As a particular example if a particular detection node is determined to be too busy e.g. exceeds a capacity threshold and that particular detection node is in active mode it may be appropriate to switch the particular detection node to passive mode to avoid significant processing delays.

Databases and may be implemented using a variety of database structures. The databases may be row oriented or column oriented. They may include relational databases and or object oriented databases. Databases and may be indexed and accessed in a variety of manners including by utilizing an operating system or through one or more networks. In some embodiments databases and may be implemented in one database such that separate tables within the database may be used to store the information contained in databases and .

In some embodiments jobs database stores jobs related to apply malware detection schemes to a file. A job stored in the database may include information such as an identifier associated with the file information regarding what type of malware detection test that should be applied to the file and the priority associated with the job. Jobs database may be configured so that it can be accessed by ingest module and scheduler module . Ingest module may insert jobs into the job database and scheduler module may read the jobs database to determine which jobs need to be assigned to malware detection nodes.

In some embodiments ingest policy database may contain a set of policies that determine what malware detection schemes should be applied to various types of files. The policies may be applied by type of file or other suitable criteria. Malware detection schemes employed by the policies may include classification schemes such as recognizing generic suspect patterns signature based detection schemes such as those looking for specific byte patterns meta data detection schemes as well as behavior based detection schemes. The behavior based detection scheme specified by the policies may include accessing the file in a virtual or real environment.

In various embodiments the policies specify the type of access applied to the files based on the file type. For example if the file type is an executable file type accessing the file may include executing the file within a virtual environment. As another example if the file type is a MICROSOFT WORD document the policy may specify that accessing the file within the virtual environment includes opening the file using MICROSOFT WORD or using various versions of MICROSOFT WORD or using various versions of other word processors that are also able to access a MICROSOFT WORD document. If handling URLs for example accessing the file may include using one or more different browsers such as MOZILLA FIREFOX and OPERA to access a web page located at the address provided by the URL. A variety of suitable applications may be used to access the files. Policies may also specify different types of virtual environments that should be used when accessing the file. For example policies may specify that the file should be accessed within one or more versions of the WINDOWS operating system within a version of an operating system using the LINUX kernel within a version of the MAC OS operating system within versions of operating systems using the BSD kernel within a version of an embedded operating system within a version of a non conventional operating system e.g. a mobile operating systems such as those used in smart phones and or within other versions of any other suitable operating systems or computing environments. Other suitable forms of malware detection schemes can be stored and applied in the policies.

In some embodiments when adding a new malware detection scheme an interface may be provided to modify one or more policies of ingest policy database . The interface may require information to be entered regarding how the malware detection scheme should be applied. Such information may be entered using a tabbed interface a wizard style interface or other suitable interfaces for entering information. The information required to be entered may include the file types that should be associated with the new malware detection scheme identifiers associated with the detection nodes that implement the new malware detection scheme jobs to be carried out when implementing the new malware detection scheme and or other items associated with applying a malware detection scheme. In some embodiments a policy may be developed that handles files for which the file type is unknown or files for which the file type is not associated with any specific policy. Suitable malware detection schemes may be applied to such files such as one or more of classification schemes signature based schemes and behavior based schemes.

In operation control system may be able to receive a file for malware detection and use ingest module to determine what malware detection schemes should be applied to the file. File type module may determine the file type and duplicate module may determine whether or not the file has been previously analyzed. If the file has not been previously analyzed policy module may access a policy in ingest policy database . Policy module may use the accessed policy to determine a set of malware detection schemes that should be applied to the file based on the file type. Policy module may then enter jobs into jobs database in order to implement the determined malware detection schemes. Scheduler module may then schedule and monitor the application of the determined malware detection schemes to the file. Schedule module may assign the jobs in jobs database to one or more detection nodes.

Monitor module may monitor the load applied to the detection nodes and determine if the load has surpassed a critical value or threshold. In response to passing the threshold monitor module may report this occurrence. As a result the system may switch from operating in an active mode to operating in a passive mode. This may be advantageous in various embodiments because the time it takes to complete an analysis of a file may depend on the load present on the detection nodes. For example if the system is operating in an active mode and files are entering the system at a rate above a particular threshold messages or other services may be disrupted causing a lower quality of service. By switching into a passive mode the system may allow the analysis of the file to proceed without lowering the quality of service of services associated with the file being analyzed. For example certain malware detection schemes may proceed in real time e.g. signature based or classification based analysis while others e.g. behavior based analysis may be delayed. If the detection schemes proceeding in real time did not cause an alert then other analyses may be delayed. If the detection schemes proceeding in real time did cause an alert then other jobs associated with the file may be given greater priority in the jobs queue. If the load on the detection nodes falls below a critical threshold monitor module may report this occurrence. In response the system may enter into an active mode of operation which may allow in some embodiments for greater security since operations associated with the context of the file are delayed while the analysis of the file is proceeding. As another example in a hybrid mode files determined to be known malware may delayed or removed from the mail stream while files determined not determined to be known malware may not be delayed or removed from the mail stream.

In some embodiments detection nodes may conform to an interface standard for applying malware detection. Such an interface may include standards for one or more of the following specifying the file including possibly a URL that is to be analyzed configuration parameters for applying the detection scheme time limit for completing the analysis format of results specifying the reason for indicating that an analyzed item is suspect providing log files and other suitable items involved with applying malware detection schemes. In some embodiments having such an interface may be advantageous because it may allow policies to call for the application of malware detection schemes without having to give precise parameters based on the configuration of the detection node. In this manner in various embodiments new detection schemes may be added to the system without needing to recode various parts of the system since the detection node applying the new malware detection scheme would conform to the interface standard. For example to add a new malware detection scheme the detection node applying the new malware detection seem may be configured to conform to the interface standard by being configured to receive files for analysis in the same or similar manner as other configuration nodes applying other malware detection schemes. In addition for example the configuration node applying the new malware detection scheme may be configured to report the results of applying the new malware detection scheme in the same or similar manner as other configuration nodes applying other malware detection schemes. This in some embodiments may be advantageous in that it allows for the system to adapt to new malware detection schemes.

Detection nodes may be implemented on a variety of types of hardware. They may be configured in a blade architecture or on physical hosts. Detection nodes may also be configured utilizing clusters or other suitable distributed computing architectures. Detection nodes may utilize virtualization or may themselves be virtual machines. Detection nodes may be used to apply a variety of malware detection schemes to a file which in some embodiments may include one or more URLs . In some embodiments detection nodes may be specialized such that each detection node may be configured to apply a type of malware detection scheme. For example detection node may be configured to apply behavior based malware detection schemes while detection node may be configured to apply metadata based detection schemes where metadata of a file is analyzed. In yet another example detection node may be configured to apply signature based detection schemes to files. As another example nodes may also apply classification based detection schemes. As discussed above detection nodes may be configured to apply other forms of detection schemes that conform to an interface to facilitate the incorporation of new or different detection schemes. In various embodiments subsystem may include a variety of detection nodes in addition to detection nodes .

Detection agent may be implemented using software. In some embodiments detection agent may be installed on detection node . In various embodiments detection agent may reside on hardware separate from detection node but in communication with detection node and in particular hypervisor . Detection agent may be configured to receive jobs that describe malware detection schemes that should be applied to a file. Detection agent may also be configured to receive the file and send it to hypervisor and cause hypervisor to implement the malware detection scheme from the job on the file. Detection agent may also be configured to monitor the execution of the malware detection scheme and report when it is completed. Detection agent may report the results of the application of the malware detection scheme to the file. In various embodiments agents such as detection agent may be present in other detection nodes such as nodes and cause those nodes to implement a variety of malware detection schemes. For example a detection agent on detection node may cause detection node to implement a signature based malware detection scheme. As another example a detection agent on detection node may cause detection node to implement a metadata based malware detection scheme on a file.

Hypervisor may be implemented using various types of hypervisors such as those provided in virtualization solutions from VMWARE PARALLELS and XEN. In some embodiments the KI 2 hypervisor from RAYTHEON may be employed. Hypervisor may be used to apply malware detection schemes in a virtual environment. Hypervisor may host GOS . In various embodiments multiple guest operating systems may be hosted by hypervisor .

Hypervisor may cause the application of malware detection schemes within GOS . In some embodiments hypervisor may be able to apply a malware detection scheme to a file at a configurable observation time including in some embodiments in faster than real time by causing the execution to ignore wait states associated with GOS .

Hypervisor may in various embodiments be able to provide near instant reversions of GOS during jobs or between jobs. This may be accomplished for example by maintaining a state of GOS in memory and tracking changes made to GOS during the execution of the malware detection scheme. The tracked changes may also be stored in memory. When the malware detection scheme is completed GOS may be reverted by undoing the changes to GOS during execution of the malware detection scheme using changes stored in memory.

In some embodiments by applying near instant reversions and or applying malware detection schemes at a configurable observation time processing of files may be accomplished faster allowing the system to have a higher throughput of analyzed files. These techniques may be applied in both an active mode and a passive mode.

Hypervisor may also be able to provide information regarding the execution of the malware detection scheme without running a process within GOS in various embodiments. Doing so in some embodiments may thwart attempts by malware to detect if a malware detection scheme is being applied to the malware. For example a file may contain malware that is configured to examine processes running in an operating system. Based on that examination the malware may recognize certain processes as being associated with the application of malware detection schemes. As a result in an attempt to remain undetected during the application of the malware detection scheme the malware may change its behavior so that it does not act maliciously or otherwise abnormally. However the malware may change its behavior once it is in a normal environment where malware detection schemes are not being applied. In some situations monitoring of GOS may occur at the machine layer so as to avoid running processes. Hence in various embodiments it may be advantageous for hypervisor to provide monitoring of GOS without running a process within GOS . Other suitable techniques may be applied within hypervisor to hide the fact that a hypervisor is being used from an application and or to hide the existence of an application running inside an operating system.

In various embodiments GOS may be any of a variety of virtualized operating systems. Examples of such operating systems include various versions of MICROSOFT WINDOWS APPLE MAC OS operating systems using the LINUX kernel operating systems using the BSD kernel embedded operating systems mobile operating systems including those used in mobile telephones or devices or other computing environments. GOS may include a variety of applications used to access different file types. Such applications may include e mail clients word processing applications image viewing applications audio applications video applications Internet browsing applications e mail applications or other applications.

Network agent may in various embodiments be implemented using software hardware or a combination of both. Network agent may be configured to provide virtualized networking services to detection nodes . In some embodiments these services include simulating a network environment and network nodes in order to facilitate the application of various malware detection schemes. For example detection node may implement a behavior based malware detection scheme that includes accessing the file in GOS . Part of the malware detection scheme may include observing how accessing the file impacts a network. Network agent may provide virtual networking services in order to provide the file opportunity to interact with a network. In some embodiments the network may be simulated.

Modules and may be implemented using software hardware or a combination of the two. Each of modules and may be implemented on the same hardware or on different hardware. For example modules and may each be on separate pieces of hardware.

Databases and may each be implemented in hardware separate from each other or on the same hardware. Databases and may be implemented on the same or different hardware as modules . The databases may be row oriented or column oriented. They may include relational databases and or object oriented databases. Databases and may be indexed and accessed in a variety of manners including by utilizing an operating system or through one or more networks. In some embodiments databases and may be implemented in one database such that separate tables within the database may be used to store the information contained in databases and .

Adjudication and disposition module in some embodiments may analyze the outcome of malware detection schemes applied to a file to determine if the file is malware. Adjudication and disposition module may access policy database to select one or more adjudication policies in order to determine if the file is malware. Adjudication policies from policy database may include various ways to determine how to characterize a file. In various embodiments possible characterizations of a file may include 1 the file is known malware 2 the file is known not to be malware 3 the file is suspected malware and 4 the file is not suspected to be malware. The adjudication policies may contain rules which indicate which one of the characterizations should be applied to a file based on the results of malware detection schemes applied to the file. For example an adjudication policy may include a weighted score that is applied to the outcomes of each of the malware detection schemes applied to the file. Based on the sum of the weighted scores the adjudication policy may indicate the proper characterization of the file. Adjudication and disposition module may determine the appropriate adjudication policy to use for the file in question retrieve the outcomes of the malware detection schemes performed on the file and use the adjudication policy to apply weighted scores to each of those outcomes. Adjudication and disposition module may also in some embodiments use the sum of the applied weighted scores to characterize the file according to the adjudication policy. Although weighted scoring is described the present invention contemplates using any suitable selection mechanism according to particular needs.

One or more adjudication policies may be chosen to evaluate the outcome of the malware detection schemes applied to the file based on a variety of factors. For example the file s type may be used to determine what policy to select. The context from where the file came may also be used to select an adjudication policy. Examples of context include a messaging context a file uploading context and a browsing context as discussed above.

Adjudication and disposition module may provide entries for results database after determining the characterization to use for the file. For example if the weighted score determined by adjudication and disposition module leads adjudication and disposition module to characterize the file as malware according to a selected policy adjudication and disposition module may create an entry in results database which include any or all of the following items the name of the file the type of the file a hash value associated with the file the individual scores applied to the file the sum of the scores applied to the file the adjudication policy applied to the file and the characterization applied to the file.

In some embodiments workflow module may determine a workflow for use by a human analyst to review the file. A file may need to be reviewed by a human analyst based on the characterization of the file determined by adjudication and disposition module . For example if adjudication and disposition module characterizes the file as suspected malware then a human analyst review the file to determine if it is malware. As another example if the file is determined to be malware rather than merely to be suspected malware a human analyst may review the file in order to learn more about the malware in the file and or to start an incident response review e.g. to clean up the file . In such and other scenarios workflow module may determine tasks associated with reviewing the file. In some embodiments workflow module may generate a set of tasks to be performed by a human analyst reviewing the file based on a variety of factors. Such factors could include the type of file being reviewed and the characterization of the file by adjudication and disposition module . Other factors may include whether the system is operating in a passive or an active mode. For example if operating in an active mode a determination that the file is suspected malware may invoke an advanced malware analysis workflow to be followed by a human analyst. As another example if the file is determined to be known malware then workflows associated with cleaning up the environment s the file has been in as well as other incident response workflows e.g. notifying a user or an administrator may be determined. Other suitable workflows may be generated based on these or other suitable factors.

Workflow module may in various embodiments automatically perform certain tasks associated with reviewing the file by a human analyst to facilitate the review of the file by the human analyst. For example it may be determined that in order for a file to be properly reviewed by a human analyst all strings in the file should be extracted. Workflow module may automate this procedure such that it is already performed for the human analyst when they receive the task. Workflow module may also provide a priority associated with the review of the file. For example if the file has already been determined to be malware a lower priority may be assigned to the review of the file compared to a file that is suspected of being malware. Also based on the characterization and or the mode the system is operating in entirely different workflows may be generated for the file or the file may be placed in different queues. In various embodiments workflow module may be configured to interact with an analysis console e.g. analysis console to facilitate the creation and operation of the workflows. Policies stored in policy database may also contain information on workflows to be applied to files based on their characterization. Workflow module may in some embodiments access policy database in order to determine the workflow that should be applied to the file. In various embodiments workflow module may receive one or more disposition policies that may be used to determine the workflow from adjudication and disposition module as further discussed below.

In some embodiments adjudication and disposition module may perform operations associated with the context of the file in response to the characterization of the file determined by adjudication and disposition module . As discussed above a file may come from a variety of contexts including a messaging context a browsing context this context may include processing URLs or a file uploading context. The characterization of the file may cause certain operations to be performed related to the context of the file. For example if the file came from a messaging context e.g. the file was an attachment to an e mail the characterization of the file may cause effects on the e mail from which the file was extracted. It may be determined whether the e mail should be delivered based on the characterization of the file. As another example if the system were analyzing a URL the context of where the URL was found may affect the operations performed. If the URL was found in the body of an e mail message for example the message may be prevented from being delivered. On the other hand if the URL was found in the body of an attachment to the e mail message the message may be delivered but optionally the attachment may be stripped and or the URL may be removed. As another example in certain embodiments regardless of the context in which the URL is found if the URL is determined to be associated with malware the message may not be delivered. Adjudication and disposition module provides functionality that allows for these types of operations to be performed.

In various embodiments adjudication and disposition module may take the mode that the malware detection system is operating in into account when determining actions to perform. For example if the malware detection system is operating in a passive mode and the file is characterized as malware adjudication and disposition module may cause an alert to be sent to an administrator that the file has been characterized as malware. As another example if the file was attached to an e mail message and the malware detection system was operating in an active mode then characterizing the file as not being malware would cause the adjudication and disposition module to indicate that the e mail should be delivered. In various embodiments adjudication and disposition module may refer to one or more disposition policies in policy database to determine one or more actions to be taken as a result of the characterization.

In some embodiments when adding a new malware detection scheme an interface may be provided to modify one or more adjudication or disposition policies of policy database . The interface may require information to be entered regarding how the malware detection scheme should be applied. Such information may be entered using a tabbed interface a wizard style interface or other suitable interfaces for entering information. Such information may include weighted scoring algorithms to apply to responses from detection nodes workflows that may be generated based on the response of the detection nodes thresholds or ranges that determine how the file should be characterized based on the response of the detection nodes actions that should occur based on the characterization of the file and or other items associated with a malware detection scheme. In some embodiments the interface may allow for new actions to be defined that would respond to characterizations of the file. A modular architecture may be utilized where new actions would be able to be plugged in to the system so that disposition policies may be easily modified or added.

Listener module in various embodiments may be implemented using software hardware or a combination of the two. Listener module may be able to determine when jobs assigned to detection nodes are complete and report the completed status. In some embodiments the results of listener module may be used by monitor to determine the load of the detection nodes. In some embodiments listener module may be contacted by a detection node once it has completed analyzing a file and receive the results of the analysis. Listener module may determine when the job has been completed and report the results of completed jobs. In some embodiments listener module may store the results of the jobs in results database . Listener module may increase the priority of jobs in jobs database based on the reported results of completed jobs. For example if a file has been scheduled to have five malware detection schemes applied to the file and one of the malware detection schemes has reported that there is a high likelihood that the file is malware listener module may increase the priority of the jobs associated with this file.

Computer system may have one or more input devices which may include a keypad keyboard mouse stylus or other input devices one or more output devices which may include one or more displays one or more speakers one or more printers or other output devices one or more storage devices and one or more storage medium . An input device may be external or internal to computer system . An output device may be external or internal to computer system . A storage device may be external or internal to computer system . A storage medium may be external or internal to computer system .

System bus couples subsystems of computer system to each other. Herein reference to a bus encompasses one or more digital signal lines serving a common function. The present disclosure contemplates any suitable system bus including any suitable bus structures such as one or more memory buses one or more peripheral buses one or more a local buses or a combination of the foregoing having any suitable bus architectures. Example bus architectures include but are not limited to Industry Standard Architecture ISA bus Enhanced ISA EISA bus Micro Channel Architecture MCA bus Video Electronics Standards Association local VLB bus Peripheral Component Interconnect PCI bus PCI Express bus PCI X and Accelerated Graphics Port AGP bus.

Computer system includes one or more processors or central processing units CPUs . A processor may contain a cache for temporary local storage of instructions data or computer addresses. Processors are coupled to one or more storage devices including memory . Memory may include random access memory RAM and read only memory ROM . Data and instructions may transfer bidirectionally between processors and RAM . Data and instructions may transfer unidirectionally to processors from ROM . RAM and ROM may include any suitable computer readable storage media.

Computer system includes fixed storage coupled bi directionally to processors . Fixed storage may be coupled to processors via storage control unit . Fixed storage may provide additional data storage capacity and may include any suitable computer readable storage media. Fixed storage may store an operating system OS one or more executables EXECs one or more applications or programs data and the like. Fixed storage is typically a secondary storage medium such as a hard disk that is slower than primary storage. In appropriate cases the information stored by fixed storage may be incorporated as virtual memory into memory . In some embodiments fixed storage may include network resources such as one or more storage area networks SAN or network attached storage NAS .

Processors may be coupled to a variety of interfaces such as for example graphics control video interface input interface output interface and storage interface which in turn may be respectively coupled to appropriate devices. Example input or output devices include but are not limited to video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styli voice or handwriting recognizers biometrics readers or computer systems. Network interface may couple processors to another computer system or to network . Network interface may include wired wireless or any combination of wired and wireless components. Such components may include wired network cards wireless network cards radios antennas cables or any other appropriate components. With network interface processors may receive or send information from or to network in the course of performing steps of particular embodiments. Particular embodiments may execute solely on processors . Particular embodiments may execute on processors and on one or more remote processors operating together.

In a network environment where computer system is connected to network computer system may communicate with other devices connected to network . Computer system may communicate with network via network interface . For example computer system may receive information such as a request or a response from another device from network in the form of one or more incoming packets at network interface and memory may store the incoming packets for subsequent processing. Computer system may send information such as a request or a response to another device to network in the form of one or more outgoing packets from network interface which memory may store prior to being sent. Processors may access an incoming or outgoing packet in memory to process it according to particular needs.

Particular embodiments involve one or more computer storage products that include one or more tangible computer readable storage media that embody software for performing one or more steps of one or more processes described or illustrated herein. In particular embodiments one or more portions of the media the software or both may be designed and manufactured specifically to perform one or more steps of one or more processes described or illustrated herein. In addition or as an alternative in particular embodiments one or more portions of the media the software or both may be generally available without design or manufacture specific to processes described or illustrated herein. Example computer readable storage media include but are not limited to CDs such as CD ROMs FPGAs floppy disks optical disks hard disks holographic storage devices ICs such as ASICs magnetic tape caches PLDs RAM devices ROM devices semiconductor memory devices and other suitable computer readable storage media. In particular embodiments software may be machine code which a compiler may generate or one or more files containing higher level code which a computer may execute using an interpreter.

As an example and not by way of limitation memory may include one or more tangible computer readable storage media embodying software and computer system may provide particular functionality described or illustrated herein as a result of processors executing the software. Memory may store and processors may execute the software. Memory may read the software from the computer readable storage media in mass storage device embodying the software or from one or more other sources via network interface . When executing the software processors may perform one or more steps of one or more processes described or illustrated herein which may include defining one or more data structures for storage in memory and modifying one or more of the data structures as directed by one or more portions the software according to particular needs.

In some embodiments the described processing and memory elements such as processors and memory may be distributed across multiple devices such that the operations performed utilizing these elements may also be distributed across multiple devices. For example software operated utilizing these elements may be run across multiple computers that contain these processing and memory elements. Other variations aside from the stated example are contemplated involving the use of distributed computing.

In addition or as an alternative computer system may provide particular functionality described or illustrated herein as a result of logic hardwired or otherwise embodied in a circuit which may operate in place of or together with software to perform one or more steps of one or more processes described or illustrated herein. The present disclosure encompasses any suitable combination of hardware and software according to particular needs.

Although the present disclosure describes or illustrates particular operations as occurring in a particular order the present disclosure contemplates any suitable operations occurring in any suitable order. Moreover the present disclosure contemplates any suitable operations being repeated one or more times in any suitable order. Although the present disclosure describes or illustrates particular operations as occurring in sequence the present disclosure contemplates any suitable operations occurring at substantially the same time where appropriate. Any suitable operation or sequence of operations described or illustrated herein may be interrupted suspended or otherwise controlled by another process such as an operating system or kernel where appropriate. The acts can operate in an operating system environment or as stand alone routines occupying all or a substantial part of the system processing.

At step in some embodiments a message is received. The message may be an e mail message that is received by an e mail server. At step it may be determined whether the message has an attachment. In some embodiments if the message does not have an attachment then the message may be processed normally such as at step . This type of processing may include delivering the message to the recipient. If the message does have an attachment then the system may proceed to step . In some embodiments the determination at step may also include determining if the body of the message includes items that may need to be analyzed such as a URL. If such an item exists then the system may proceed to step .

At step in some embodiments the processing of the message by an e mail delivery system may be paused. This may be done because the malware detection system operating in an active mode. By pausing the processing of the message the message may be prevented from being delivered. A copy of the message as well as the attachment may be created and sent to the malware detection system. In various embodiments the message and the attachment themselves may be sent to the malware detection system without creating a copy. These actions may be performed or facilitated by an agent that communicates both with the malware detection system and the messaging system. In contexts other than e mail other underlying processes or services may be paused. For example if the context is uploading files to a network location the uploading process may be paused while the system analyzes the files as further described below.

At step the file attached to the message may be analyzed to determine if it has been previously analyzed by the malware detection system. This determination in some embodiments may be made by creating a hash of the file and comparing the hash to a database that contains the results of applying the malware detection system to various files. The step may be performed utilizing a module such as duplicate module of and a database such as results database of in various embodiments. If it is determined that the file has been previously analyzed then the system may proceed to step . However if the file has not been previously analyzed the system may proceed to step .

At step the type of the file may be determined. This may be accomplished by analyzing the extension of the file and or by examining a header of the file. This step may be performed by items such as file type module of in various embodiments. At step in some embodiments it may be determined if the file should be analyzed. This determination may occur based on the determined file type. For example it may be determined that plain text files are not to be analyzed. If the file should not be analyzed then the system should proceed to step . If the file should be analyzed then the system should proceed to step .

At step the determined file type may be used to select a policy that contains procedures to be followed when analyzing the file. These procedures may include determining what types of malware detection schemes to apply to the file. More than one policy may be selected at this step. The policy may contain more than one malware detection scheme to apply to the file. For example the policy may indicate that the file should be accessed by several versions of an application in a virtual environment or the policies may indicate that the file should be analyzed using signature based analysis to determine if it is malware. Classification based analysis may also be performed in various embodiments. Elements such as policy module of may be utilized to perform this step in various embodiments.

At step in some embodiments jobs associated with malware detection schemes may be sent to detection nodes. The jobs may be determined in accordance with policies selected at step . The jobs may be entered into a database and a scheduler may determine when jobs are sent to the detection nodes in accordance with the malware detection schemes determined at step . The scheduler may operate in a first in first out FIFO mode where jobs that are first entered into the database are the first ones to be assigned to available detection nodes. Schedule module of is an example of how this step may be performed in various embodiments.

At step in some embodiments malware detection may be performed on the file. This may be performed by one or more detection nodes. A variety of malware detection schemes may be applied during this step. Each of these malware detection schemes may be applied at different nodes or at the same node and they may be applied concurrently or sequentially or a combination of the two. Malware detection schemes may include performing behavior based analysis signature based analysis or metadata based analysis. Items such as detection subsystem of may in some embodiments be used to implement this step. At step a query for the results of the detection nodes applying the malware detection schemes determined by the policy may be performed. The results may be received as each detection node completes its job or after all of the detection nodes have completed their jobs in accordance with the set of malware detection schemes to be applied to the file. Listener module of in various embodiments may provide an example for how this step may be implemented.

At step in some embodiments an adjudication policy may be applied to the results determined at step . In some embodiments the adjudication policy may use scores that may be based on the type of file being analyzed as well as the malware detection scheme applied to the file. The scoring may be weighted in various embodiments. At step it may be determined whether or not the file is suspected malware. This may be done in accordance with the adjudication policy or policies accessed at step . If the file is determined to be suspected malware the system may proceed to step . If the file is determined not to be suspected malware the system may proceed to step . Adjudication and disposition module of or similar structures may be used to implement steps and in various embodiments.

At step in some embodiments the results of a previous malware analysis performed on the file are obtained. This may be done in response to determining that the file has been previously scanned at step . These results may be retrieved from a database such as results database . The results may include a determination of whether the file was considered to be known malware suspected malware not malware or not suspected as malware. The results of the adjudication policy or policies applied to the file may also be retrieved. Performing step in some embodiments may conserve resources and or provide faster processing of a file because a file that has been previously analyzed may not need to be reanalyzed.

At step the results are analyzed to determine if the analysis on the file has been completed and a characterization of the file has been determined. If a characterization of the file is not available then step may be performed. In some cases the system may continue to perform steps and or until a determination that the file is either known to be malware or known not to be malware is completed. If a characterization is available then step may be performed. At step the characterization of the file that was previously determined is examined. If the file was previously adjudicated as known malware then step may be performed. If the file was previously adjudicated as not being malware then step may be performed.

At step in some embodiments the file may be sent for review by human analysts. This may be done in response to determining that the file is suspected malware as in step . Along with the file in various embodiments a workflow for human analysts may be invoked in accordance with the results of the application of malware detection schemes to the file the file type and any other suitable information. In addition to the tasks in a workflow being invoked a set of those tasks may be automatically performed before the human analyst receives the workflow package in various embodiments. Workflow module of may be an example of how such functionality may be provided. At step a response from the human analyst may be waited for before proceeding. At step a response from the human analyst may be received and analyzed. If the response indicates that the file is malware step may be performed. If the response from the human analyst indicates that the file is not malware step may be performed.

At step actions may be performed based on a determination that the file is known to be malware or suspected to be malware. These actions may be determined based on one or more disposition policies. For example such actions may include removing the file sanitizing the file quarantining the file and or sending the file for review by human analysts. The actions may be done in response to obtaining the results of a previous analysis of the file a response from human analysts or the application of an adjudication policy based on results returned by detection nodes applying various malware detection schemes to the file. For example in the messaging context an indication that the attachment should be removed may be sent to a mail server or agent which may then remove the attachment from the message that is to be delivered at this step. In some embodiments actions such as removing attachments from messages may be performed by the system and the modified message may be sent back to a mail server or agent for delivery or an edited message may be sent by the system. As another example if the system was being used as a service by another entity such as a desktop or network security agent a report may be sent to the entity that may include the adjudication as well as the results from the detection nodes. In some cases a sanitized version of the file s may be sent to the entity using the system as a service. Adjudication and disposition module of in some embodiments may be an example for how step may be implemented.

In some embodiments a determination may be made at step that waits for other files to be completely processed before performing any actions. Prioritizing the jobs associated with other files that are still being analyzed may occur at this step in various embodiments. This prioritization may occur for example if one file of a group of files being processed has been determined to be known malware or suspected malware. As a result of such a determination the other files part of the group may have their analysis prioritized. In the messaging context if an e mail attachment includes multiple files determining what actions should be performed on one file may be based on the characterization of the other files. As a result it may be determined that actions should not be performed until all the files have been analyzed.

In some embodiments workflows for human analysts may be determined and invoked during this step. Such workflows may include sending a file determined to be or suspected to be malware to a human analyst for further analysis. The workflows may also include actions associated with incident response. For example if a file has been determined to be malware several actions involving human interaction may be helpful. These may include items such as contacting relevant personnel or administrators taking precautionary measures to secure network and computing resources or other suitable actions depending on the context associated with the file.

At step the message may resume being processed. In some embodiments where multiple files are being processed as a group i.e. if there are multiple files in an attachment this step may include waiting for the results of the analysis of other files. In some embodiments this may occur if it is determined that the attachment does not contain malware. This step may be reached if the attachment has been determined as malware but after the attachment has been removed from the message as in step . Hence the processing and delivering of the message may be paused at step and resumed at step . In some cases a message may not be delivered at all. For example the message may contain a URL in the body of the message that was analyzed in accordance with the steps described above. The URL may be determined to be malicious and as a result it may be determined that the message should not be delivered at all. This may provide enhanced messaging security in some embodiments since messages are not delivered until it is determined that they do not contain malware or until attachments determined to be malware are removed from the messages. In some embodiments this step may be performed in different contexts. For example if the system was analyzing files that were to be uploaded to a network location this step may include allowing some or all of the files to be uploaded. If the system was invoked as a service this step may include the entity that invoked the system as a service performing actions in response to receiving the results of the malware analysis. For example if a desktop security agent invoked the system as a service the agent may have received the results at step and may alert the user of the desktop system of those results at step .

Steps and in various embodiments may be completed in the same or in a similar manner as step and of . Generally if a determination at step indicates that the message received at step does not have an attachment then the message is processed normally by nodes in the messaging context at step . In some embodiments a determination may be made at this step if the body of the message contains items that need to be analyzed such as URLs. If not then the message is processed normally by nodes in the messaging context at step . If the message received at step does have an attachment or has other content such as a URL that needs to be analyzed then the message may be duplicated at step . At step the original message may be processed normally by nodes in the messaging context. For example a result of the processing at step may be delivering the message to the recipient. In various embodiments as discussed above other actions may be performed at this step in accordance with other contexts. As an example if the file was associated with a file uploading context a result of the processing at step may be allowing the files to be uploaded rather than delivering a message. Steps and are in various embodiments performed when the malware detection system operates in a passive mode. As discussed further below while malware detection proceeds the messages when the system is analyzing files from a messaging context are not prevented from being delivered or otherwise processed by nodes or systems of the messaging context. By duplicating the message at step a copy of the message may be processed by the malware detection system while another copy may be processed as normal by the messaging context as in step . Ingest block of may provide an example for how step may be implemented in various embodiments.

Steps in some embodiments may be performed similarly as steps in . Generally a file attached to the message duplicated at step undergoes malware detection in steps . A policy selected at step is used to determine various malware detection schemes that are applied at step and the results of the malware detection schemes are analyzed at step .

At step in some embodiments the results of applying an adjudication policy at step are analyzed to determine if the file is suspected malware. If these results indicate that the file is suspected malware then step may be performed. If these results indicate that the file is not suspected malware then analysis for that file may be complete. In some embodiments the file may be part of a group of files that are being analyzed. If this is the case determining that a file of the group of files is not suspected malware will not end the analysis of the group of files. Rather this determination is stored and used to analyze the other files in the group as described further below at step . Step may be performed similarly to step in in various embodiments.

Step in some embodiments may be performed in a manner similar to step of . In this situation a file has been determined to have already been analyzed by the malware detection system. Hence results from the previous analysis are obtained in this step in various embodiments. At step the results are analyzed to determine if the analysis on the file has been completed and a characterization of the file has been determined. If a characterization of the file is not available then step may be performed. In some cases the system may continue to perform steps and or until a determination that the file is either known to be malware or known not to be malware is completed. If a characterization is available then step may be performed.

At step in some embodiments the characterization of the file that was previously determined is examined. If the file was previously adjudicated as known malware then step may be performed. If the file was previously adjudicated as not being malware then the analysis for that file may be complete. In some embodiments the file may be part of a group of files that are being analyzed. If this is the case determining that a file of the group of files is not suspected malware will not end the analysis of the group of files. Rather this determination is stored and used to analyze the other files in the group as described further below at step .

Steps and may be accomplished in a manner similar to step and step at . In various embodiments the file may be reviewed by human analysts at step and a response from the human analyst may be awaited at step . At step this response may be received and a determination is made as to whether the human analyst has indicated that the file is malware. If the file is determined to be malware step may be performed. If the file is determined not to be malware the analysis of the file may be complete. As with steps and in various embodiments when the file is determined not to be malware then nothing more needs to be done to the message because the message was not delayed in its processing due to the malware detection schemes since the system is operating in a passive mode. In some embodiments the file may be part of a group of files that are being analyzed. If this is the case determining that a file of the group of files is not suspected malware will not end the analysis of the group of files. Rather this determination is stored and used to analyze the other files in the group as described further below at step .

Step may be accomplished in a manner similar to step of . Generally actions may be performed based on a determination that the file is known to be malware. These actions may be determined based on one or more disposition policies. For example such actions may include removing the file sanitizing the file quarantining the file and or sending the file for review by human analysts. The actions may be done in response to obtaining the results of a previous analysis of the file a response from human analysts or the application of an adjudication policy based on results returned by detection nodes applying various malware detection schemes to the file. Information about the file may also be stored with the file in some embodiments. For example message headers associated with the file may be stored with the file at step . As another example timing information related to when the message was received or when the message was processed with the file. As yet another example information as to how the file was determined to be malware may also be stored along with the file at step .

At step a warning may be sent in response to determining that the file is determined to be malware. In various embodiments as a result of operating in a passive mode an indication may be sent that the file was detected as malware since the process of the message was not delayed while the malware detection analysis was being applied to the file. For example if the file was determined to be malware then a message may be sent to an administrator to inform the administrator that a message had been processed that included malware. Other examples of warnings or indicators that may be sent include sending a warning to recipients of the message. An example of the latter response may include an agent that is installed at the recipient s computer wherein the agent is configured to take actions to prevent damage to the computer based on the malware that may have been delivered to the computer while the message was being analyzed for malware.

At step in some embodiments a determination may be made as to whether or not a threshold has been surpassed based on the information determined at step . A variety of thresholds may be used alone or in combination during this step. For example if the amount of load current and or predicted to be placed on detection modes indicates that the response times to the jobs that are scheduled to be applied to detection nodes are over a particular amount then a threshold may be surpassed. In another example jobs may be processed by different types of detection nodes. As such the overall load on all the detection nodes may be below a threshold for the collection of detection nodes. A particular set of detection nodes that are used to perform a particular malware detection scheme however may have a sufficiently high load that another threshold may be surpassed. An example of this situation is when there is a large number of behavior based malware detection schemes to be processed but only a certain set of the detection nodes may be able to process those types of jobs. As a result the analysis of the file may take a longer time to complete because one of the jobs associated with analyzing the file includes analysis by detection nodes that perform behavior based analysis. A threshold may be surpassed in this type of situation where there is a bottleneck at one or more of the nodes that causes processing of a message to take longer than it should.

In some embodiments analyzing the load on the detection nodes as well as the list of jobs may cause the system to dynamically reprovision some or all of the detection nodes to alleviate any bottlenecks. For example in a situation where a surge of files entered the system detection nodes may be modified so that the increase of jobs may be handled. A detection node that had been applying behavior based analysis using a particular version of software may be reconfigured to perform generic behavior based analysis or to perform signature based or classification based malware detection. After the surge of jobs has been handled the system may be configured to configure the detection nodes back to their original state. In this manner surpassing certain thresholds may be avoided and the system may be able to remain in an active mode.

Thresholds in some embodiments may be determined by the context that the file was a part of. For example a required response time may be lower if the file was part of a messaging environment as opposed to a file uploading context. Hence a number of suitable considerations may be utilized to create this sophisticated set of thresholds to compare the monitoring information to.

If one or more of the thresholds are surpassed then step may be performed and the malware detection system may enter or remain in a passive mode. If the thresholds are not surpassed then step may be performed and the malware detection system may enter or remain in an active mode. An active mode of operation in various embodiments may include pausing the processing of a file while the file is being analyzed for malware whereas a passive mode of operation in various embodiments may include allowing a file or a message associated with a file to be processed while the analysis for malware is pending. While in a passive mode in some embodiments certain malware detection schemes may be applied as if the system was in the active mode. For example when processing an e mail message signature based and classification based malware detection schemes may be applied before the message is allowed to be delivered while behavior based detection schemes may be applied after the message is allowed to be delivered

In some embodiments when transitioning to a passive mode from an active mode certain jobs may be placed into a backlog queue where they will be processed as appropriate. For example behavior based jobs may be placed in such a queue while signature based or classification based jobs may be prioritized. In certain systems signature based jobs and classification based jobs typically run faster than behavior based jobs. If a signature based or classification based job results in a determination that a particular file or a particular message associated with the particular file is malware in certain embodiments the behavior based job for the particular file may be moved up in priority. If the particular file or message is a part of a group of files it may also be appropriate for all jobs associated with all files and or messages in the group to be moved up in priority. For example in response to determining based on a signature based job that a first file is malware the classification based job and behavior based job of the first file as well as the jobs for any other files grouped with the first file may be moved up in priority.

After either step or the detection nodes may continue to be monitored as in step . In some embodiments this may provide the ability for the malware detection system to dynamically change between a passive mode and an active mode depending upon the loads present on the detection nodes. By switching between these modes the system may be able to balance the competing interests of having greater security by operating in an active mode while also maintaining an acceptable level of quality of service by entering into the passive mode.

A malware detection system in some embodiments may schedule the analysis of a file such as at step . This may include assigning one or more detection nodes to apply one or more malware detection schemes to the file i.e. jobs . In various embodiments the jobs assigned to the detection nodes relating to applying malware detection schemes to the file may be scheduled based on a first in first out FIFO approach. For example the jobs that are first received to be scheduled may be the jobs that are scheduled to be applied to available detection nodes first. Other suitable scheduling techniques may be used.

In some embodiments scheduling the analysis of the file includes assigning jobs to detection nodes that are capable of applying particular malware detection schemes. For example the analysis of a file may include several detection jobs such as applying a signature based detection scheme and applying a behavior based detection scheme. In such situations it may be the case that certain detection nodes are capable of applying signature based detection schemes while other detection nodes are capable of applying behavior based malware detection schemes. As a result in various embodiments the scheduling of the analysis of a file may include maintaining separate queues for scheduling jobs for each detection node.

At step in some embodiments a result from the completion of a job at a detection node may be determined. This may be received by an agent present on the detection node. The agent may determine the results of the detection node and send those results. At step the jobs currently scheduled for the detection nodes may be reassessed based on the result determined at step . For example if the result of the completion of a job at a detection node indicates that a file may be malware a malware detection system may consider other jobs associated with that file to be important. In some embodiments other jobs associated with the file may be assessed to determine when they are scheduled to be processed by a detection node.

At step in some embodiments a job associated with the file may be prioritized for processing at a detection node. This may be done in response to the assessment at . For example a file may have had three jobs associated with it in order to determine if a file is malware. The first job may have been assigned to a detection node identifying metadata based detection schemes. The second job may have been assigned to a detection node applying signature based detection schemes. The third job may have been assigned to a detection node performing behavior based detection schemes. The first job may have been completed and the result may have been determined at step . In response to step it may have been determined that the remaining two jobs should be prioritized higher than they currently were. The queue maintained for the detection nodes that were scheduled to process the second and third jobs may then be altered such that for example the detection nodes may process the second and third jobs once they have completed their current analysis without regard to the pending jobs in the queue.

In some embodiments prioritizing the jobs associated with the file at the detection nodes may include determining if other jobs scheduled to be processed by the detection nodes have been previously prioritized. If this is the case then the jobs currently being prioritized for the file may be processed after jobs that have previously been prioritized but before other jobs that have not been prioritized. In some embodiments prioritizing the file may include assigning priority ranks to jobs associated with the file. In this manner it may be possible to prioritize a job associated with a file over a job that has been previously prioritized. As a result of the prioritization jobs associated with the file may be processed sooner then they would have otherwise. This may in some embodiments allow a malware detection system to dynamically allocate resources based on results generated by detection nodes before the file has been completely analyzed.

At step a baseline image of a guest operating system may be stored at a hypervisor. A hypervisor may store the baseline image before providing the file to the guest operating system. In some embodiments this may allow the hypervisor to maintain a pristine state of the guest operating system before performing malware detection schemes within the guest operating system. Multiple baseline images in some situations may be stored at this step as well. In various embodiments this may allow one machine with a single hypervisor to run multiple guest operating systems at the same time.

At step in some embodiments the hypervisor may receive a file to be analyzed. In certain cases the hypervisor may receive this file from an agent coupled to the hypervisor. At step the file may be accessed within the guest operating system. The type of access performed by the guest operating system may be determined based on the type of file in various embodiments. For example if the file is an executable file then the file may be executed at step . If the file has an associated application such as a MICROSOFT WORD document or a Portable Document Format PDF document then the associated application may open the file at this step. As another example if the hypervisor receives a URL an Internet browser such as INTERNET EXPLORER or MOZILLA FIREFOX may be used to access the file at this step. In some situations the hypervisor may access the file within multiple guest operating systems that are on the same machine.

At step in some embodiments the access to the file may be monitored. This may be facilitated by the hypervisor. In various embodiments the hypervisor may provide monitoring of the behavior of the file while it is being accessed without running a process in the guest operating system. In some cases the hypervisor may monitor the accessing of the file in multiple guest operating systems on the same machine. At step in some embodiments changes to the guest operating system occurring as a result of accessing the file at step may be tracked. For example this may occur by maintaining the changes made to the guest operating system in memory. In various embodiments the changes may be stored on disk instead of in memory. A suitable disk may for example include one or more hard drives removable media and or storage arrays. In certain situations it may be advantageous to store the changes in memory because the reversion discussed below at step may be accomplished quicker. The items stored in memory may be an optimized form of representing the changes. Other items that are tracked may include processes crashes network activity and or other suitable activities. In some embodiments the hypervisor may allow for tracking changes in memory or on disk that occur on multiple guest operating systems on the same machine.

At step one or more results may be determined based upon the monitoring of the access of the file performed at step . The results may include determining that the file behaved normally determining what aspects of the guest operating system were affected by accessing the file determining how the resources of the virtualized hardware were used during access of the file and or other items associated with accessing the file. In various embodiments it may be determined whether the file is suspected malware or not suspected malware. At step the guest operating system may be reverted to the baseline image stored at step . This may be done using the changes stored in memory at step . In some embodiments multiple guest operating systems may be reverted to the same or a different baseline image. The changes occurring on each guest operating system that may be stored in memory or on disk in some cases at step may be used to revert each of the guest operating systems.

At step in some embodiments a report may be sent based on the monitored behavior and results at steps and . An agent associated with the hypervisor may gather the information and send the report. The report may include information such as the name of the file the type of the file the versions of applications used to access the file the versions of the guest operating system used to access the file the version of the hypervisor used to access the file the changes to the guest operating system while the file was being accessed the resources of the virtualized hardware being used while the file was being accessed and or other items associated with accessing the file. This information may be used by human analysts to determine whether or not the file is malware or to gain more insight to the file.

In some embodiments system provides an environment where various malware detection techniques may be incorporated into the analysis of file using multiple detection nodes . For example malware detection system requests that detection nodes apply different malware detection techniques to file . The requests are in a format that malware detection system and detection nodes are configured to understand. Detection nodes provide file to malware detection engines respectively in a different format than the request received from malware detection system . After the different malware detection techniques are applied to file detection nodes provide result states to malware detection system in a common format based on results generated by malware detection engines . In some embodiments system allows for the efficient addition of new malware detection techniques by providing a common format for sending requests for and receiving results from the application of various malware detection techniques at different detection nodes .

Malware detection system may in some embodiments include storage . Storage may store disposition file and result states . Storage may be coupled to one or more of modules and . In some embodiments storage may reside on separate hardware than malware detection system and be coupled to malware detection system . For example storage may be coupled to malware detection system through a wired interface such as USB or FIREWIRE or through one or more networks.

In various embodiments storage storage described below and storage described below may be implemented using any suitable combination of one or more items of hardware firmware and software. Storage and may include a software storage application such as a database and or computer readable storage media such as but not limited to CDs such as CD ROMs FPGAs floppy disks optical disks hard disks holographic storage devices ICs such as ASICs magnetic tape caches PLDs RAM devices ROM devices semiconductor memory devices flash disks solid state storage devices and other suitable computer readable storage media. Storage and may also be implemented using network attached storage NAS or a storage area network SAN .

Malware detection system may in some embodiments include schedule module listen module and monitor module . Schedule module listen module and monitor module in some embodiments may each be implemented using any suitable combination of one or more items of hardware firmware and software. In some embodiments schedule module listen module and monitor module may each be combined with one another. Schedule module listen module and monitor module may each reside on the same hardware as malware detection system or they may each reside on separate hardware.

Schedule module in some embodiments may be implemented similarly to schedule module of . Schedule module may send requests to detection nodes to apply malware detection techniques to one or more files such as file . Schedule module may also send to detection nodes the files and or information e.g. links or other file path information indicating from where the files may be retrieved.

In some embodiments listen module may be configured to receive communication from detection nodes . For example listen module may receive various forms of communication from detection nodes including one or more of a status a connection request and one or more result states such as result states . In some embodiments listen module may also be configured to send received communication to other aspects of malware detection system such as schedule module monitor module and storage .

In some embodiments monitor module may be implemented similarly to monitor module of . Monitor module may request and or retrieve monitoring information regarding detection nodes . For example monitor module may send a communication to detection nodes requesting status information. The status information may include the availability of a detection node and or the status of applying a malware detection technique.

In some embodiments detection nodes may include agents malware detection engines and storage respectively. Each of blocks and may reside on the same or different hardware as detection node and each of blocks and may reside on the same or different hardware as detection node . In some embodiments system may include other detection nodes that may be configured similarly and contain similar components as detection nodes . Although a particular number of detection nodes are shown and described the present disclosure contemplates system including any suitable number of detection nodes . All detection nodes may be coupled to malware detection system via network . In various embodiments blocks and may reside on the same hardware or be implemented as components in one software and or firmware set. This may also be true of blocks and

In some embodiments agents may be implemented using any suitable combination of one or more items of hardware firmware and software. For example agents may be implemented as Java programs or objects. Agents may be implemented in computer languages that operate at the network level as well. Agents may be configured to interface with malware detection system through network . In some embodiments agents may be configured to communicate with malware detection system in one format and to communicate with malware detection engines respectively in another format. The following is a description of example configurations and operations of agent in communicating with malware detection system and malware detection engine . Agent may be similarly configured to perform the operations discussed below with components in detection node such as malware detection engine

In some embodiments agent may use malware system definition and translation logic in communicating with malware detection system . In some embodiments agent malware system definition and translation logic may be implemented using any suitable combination of one or more items of hardware firmware and software. Malware system definition may include information regarding the format and content of messages used by malware detection system . Malware system definition may also include information regarding the protocol s used to communicate with malware detection system . In some embodiments translation logic may include logic code table s and or database s used to determine messages to be communicated from agent to malware detection system and or malware detection engine

For example agent may receive communication from malware detection system and use malware system definition to analyze the communication. Agent may then use translation logic to determine one or more messages to send to malware detection engine in response to the message received from malware detection system because malware detection engine may not be capable of processing messages from malware detection system . Agent may also receive communication from malware detection engine and use translation logic and or malware system definition to determine one or more messages to send to malware detection system . In some embodiments malware detection system may provide file to agent for detection node to apply one or more malware detection techniques. This may be stored at detection node as file . Agent may use translation logic and or malware system definition to communicate with malware detection engine and request that malware detection engine perform the one or more malware detection techniques on file . Agent may receive results from malware detection engine after malware detection engine has applied the one or more malware detection techniques to file . Agent may use translation logic and or malware system definition to communicate one or more result states to malware detection system based on results generated by malware detection engine

In some embodiments malware detection engines may each be configured to apply one or more malware detection techniques. Example malware detection techniques include classification schemes such as recognizing generic suspect patterns signature based detection schemes such as those looking for specific byte patterns meta data detection schemes as well as behavior based detection schemes. Malware detection engines in some embodiments may be stand alone security devices and or security software that may be incorporated into system by means of agents respectively. Malware detection engines in some embodiments may receive and send messages in a manner that is particular to that malware detection engine . For example malware detection engine may not be configured to communicate directly with malware detection engine or malware detection system . Agent may be configured to communicate with malware detection engine and also configured to communicate with malware detection system thereby allowing malware detection engine and malware detection system to communicate. In some embodiments this may be advantageous because system may be able to use a variety of existing malware detection schemes and or engines without having to reconfigure the malware detection engine.

Malware detection system and detection nodes may communicate with each other using network . Network in some embodiments may be a communicative platform operable to exchange data or information. In various embodiments the network may include a packet data network offering communication interfaces or exchanges between any two nodes in system . Network may be or include any local area network LAN metropolitan area network MAN wide area network WAN wireless local area network WLAN virtual private network VPN intranet Internet plain old telephone system POTS or any other appropriate architecture or system that facilitates communications in a network or telephonic environment including a combination of any networks or systems described above. The networks may also include wireless technology such as WiMAX LTE or any of a variety of cellular data networks. In various embodiments networks and may each include firewalls or other equipment or software that create security zones and or secure networks such as DMZs. One or more of blocks may be located in one more of such security zones and or secure networks in some embodiments. For example detection nodes may be in a DMZ or sandbox that is separate from malware detection system . As another example each of malware detection system and detection nodes may reside in separate portions of network each portion separated by a firewall or other security device and or software.

In operation in some embodiments detection nodes may receive a file communicated by malware detection system using network . Malware detection system may use the same communication format when communicating with detection nodes . Detection node may apply a malware detection technique to the file while detection node may apply a different malware detection technique to the file. Detection nodes and may each provide the file to malware detection engines and respectively. Detection node may provide the file to malware detection engine in a format specific to malware detection engine and different than the format used to communicate with malware detection system . Similarly detection node may provide the file to malware detection engine in a format specific to malware detection engine and different than the format used to communicate with malware detection system and the format used by detection node when communicating with malware detection engine . After applying the different malware detection techniques each of malware detection engine and may provide one or more results to detection nodes and respectively. Malware detection engine may provide one or more results to detection node in a format different than the one or more results provided by malware detection engine to detection node . Detection nodes may determine one or more predefined result states based on the one or more results received from malware detection engines respectively. Detection nodes may communicate the predefined result states to malware detection system . Malware detection system may analyze the predefined result states to determine whether the file is malware.

In some embodiments the components of system may operate as described above to provide one or more advantages. One advantage may be that system may be configured to implement a new malware detection techniques in an efficient manner. For example a new agent and translation logic may be developed to interact with an existing malware detection engine that implements the new malware detection technique. As another example a developer of a malware detection technique may integrate a malware detection engine implementing the technique into system by configuring a corresponding agent and translation logic . Another advantage may be that malware detection system may be able to efficiently assimilate and analyze results of a variety of malware detection techniques applied to file using result states received from detection nodes . Another advantage may be that system may apply multiple malware detection techniques to file in parallel by using multiple detection nodes simultaneously.

At step in some embodiments a request for malware detection may be sent from a malware detection system to a detection node. The request may be formatted in a format that the detection nodes and the malware detection system are able to process. The request may specify that the detection node should apply a particular malware detection technique to one or more files. The request in some embodiments may also contain parameters that are to be used when applying the malware detection technique to the one or more files. For example the parameters could specify what application should be used to open or access the one or more files by the malware detection engine.

At step in some embodiments one or more files may be sent from the malware detection system to the detection node that received the request at step . The one or more files may be sent to the detection node by attaching the one or more files to a message. In some embodiments one or more references to the one or more files may be sent to the detection node at this step instead of sending the files themselves. The one or more references may be references to a portion of a network where the one or more files may be retrieved. In some embodiments the operations performed at step may be performed at step . For example the request sent at step may already include the one or more files or may include references from where the one or more files may be retrieved. In such cases step may not be performed separately from step .

At step in some embodiments the one or more files may be provided to a malware detection engine residing on the detection node that received the request sent at step . The engine at the detection node may be unable to process communication received from the malware detection system due to the format of the communication sent by the malware detection system. In some embodiments an agent on the detection node may receive the request sent at step and determine that a request for the application of a malware detection technique was sent by the malware detection system. The agent may be configured to provide the one or more files to the engine in a format that the engine is able to process. The agent may retrieve the one or more files that are to be processed by the engine from the message sent at step or using information found in the message sent at step . For example the agent may determine a location of the one or more files from the message sent at step and retrieve the one or more files from the location. The agent may send instructions to the engine in a format that the engine can process including the one or more files and or parameters that may have been specified in the request sent at step . These instructions may be in a format different than the request sent at step by the malware detection system.

For example the engine at the detection node may be invoked using a command line interface. The detection node may create and issue a command invoking the engine by analyzing and mapping the contents of the request received at step . As another example the engine at the detection node may utilize a graphical interface. The detection node may automatically launch and manipulate the engine using simulated mouse clicks or keystrokes based on the contents of the request received at step . As another example the engine may be configured to automatically apply a malware detection technique to files present in one or more directories. The detection node may be configured to receive or retrieve one or more files from the malware detection engine as discussed in steps and and place the file s in the one or more directories used by the engine.

At step in some embodiments the engine may provide one or more results from applying the malware detection technique to the one or more files. The result s may be in a format that the malware detection system may not be configured to process. The agent on the detection node may receive the results from the detection engine. At step in some embodiments the agent may determine one or more result states from the results received from the detection engine. The results states may be in a format that the malware detection system uses to determine whether the one or more files are malware. The result states may be used by various detection nodes that have different malware detection engines when communicating the results of applying the malware detection techniques to the malware detection system.

For example the malware detection system may be configured to receive five possible result states regarding the file s unsafe potentially unsafe safe error or failure. The agent may be configured to determine one of these result states based on the results received from the engine. The engine may determine that the file matches a signature of known malware. In such cases the detection node may determine that this corresponds to the unsafe result state. The engine may determine that the file is structured abnormally or causes abnormal behavior when executed or accessed by an application. In such cases the detection node may determine that this corresponds to the unsafe or potentially unsafe result state. If the engine fails to process the file then a failure result state may be determined. If an error occurs while the engine is processing the file then an error result state may be determined. The engine may determine a probability that the file is malware. The detection node may use thresholds when analyzing the reported probability in order to determine the corresponding result state i.e. if the probability is between 0 and 10 percent then the safe result state may be determined if the probability is between 11 and 49 percent then the potentially unsafe result state may be determined and if the probability is 50 percent or greater then the unsafe result state may be determined . The preceding examples illustrate various embodiments of how the detection node may determine result states based on the results provided by the engine. Other suitable techniques may be used to determine result states.

At step in some embodiments the detection node may report the result states to the malware detection system. This communication may be in a format that is commonly used by other detection nodes communicating with the malware detection system. The reported result states may include the result states determined at step . The detection node may also include other information in the communication including the result states. For example log files network dumps forensic data capture information or other data that is generated as a result of applying the malware detection technique to the one or more files may be communicated at step . In some embodiments this may provide an advantage in that the data sent at this step along with the result states may be provided automatically to a human reviewer to facilitate the human reviewer s analysis. As another example one or more files that may have been generated while the malware detection technique was applied may also be transmitted at step . In some embodiments items such as log files or files created as a result of applying the malware detection technique may be stored and references to where these files may be retrieved may be sent to the malware detection system at step .

In some embodiments malware detection system may communicate with the several detection nodes using the same messages depicted in when communicating with detection node . While and its description below describe embodiments of messages sent between malware detection system and detection node suitable variations may be introduced without departing from the scope of the present disclosure. For example the set of messages discussed below may be sent in a different order altered combined divided enlarged or reduced to facilitate efficient and functional communication between malware detection system and detection node .

In some embodiments detection node may send CONNECT message to malware detection system . CONNECT message may indicate to malware detection system the presence of detection node and provide information to malware detection system that facilitates subsequent communication between malware detection system and detection node . The following is an example of how CONNECT message may be implemented 

In some embodiments malware detection system may send WORK message to detection node . WORK message may instruct detection node to apply a malware detection technique to one or more files. The following is an example of how WORK message may be implemented 

In some embodiments malware detection system may send SEND STATUS message to detection node . SEND STATUS message may instruct detection node to send its status to malware detection system . The following is an example of how SEND STATUS message may be implemented 

In some embodiments detection node may send STATUS message to malware detection system . STATUS message may inform malware detection system as to the current status of detection node . The following is an example of how STATUS message may be implemented 

In some embodiments detection node may send RESULT message to malware detection system . RESULT message may inform malware detection system the results of applying a malware detection technique to a file.

In some embodiments malware detection system may send REBOOT message to detection node . REBOOT message may instruct detection node to reboot. The following is an example of how REBOOT message may be implemented 

Although the present disclosure has been described with several embodiments diverse changes substitutions variations alterations and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as fall within the spirit and scope of the appended claims.

