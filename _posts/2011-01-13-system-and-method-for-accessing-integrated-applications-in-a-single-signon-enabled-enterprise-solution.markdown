---

title: System and method for accessing integrated applications in a single sign-on enabled enterprise solution
abstract: A method for performing access management to facilitate a user to access applications in a single sign-on enabled enterprise solution is provided. A challenge token and a response token are transmitted between a server and a client. The challenge token and response token comprises one-way hashed data. The response token is verified at the server and the client to authenticate the user. Further, a request for service token is transmitted between the server and the client. The request for service token is encrypted at the client and decrypted at the server using a unique session key negotiated between the server and client. A service token is generated and transmitted between the server and the client. The service token is encrypted and decrypted at the server using a secret key to verify the service token. Based on the verification, the requested applications are rendered on client based user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09191375&OS=09191375&RS=09191375
owner: Infosys Limited
number: 09191375
owner_city: Bangalore
owner_country: IN
publication_date: 20110113
---
This is the U.S. National Stage of International Application No. PCT IN2011 000023 filed Jan. 13 2011 which was published in English under PCT Article 21 2 .

The present invention relates generally to the field of access control in distributed computer applications and more particularly to a system and method that facilitates access management of integrated applications in a single sign on enabled enterprise solution.

With the advent of technology a user accesses multiple applications to avail different kinds of services provided by various vendors. To access such applications the user has to login using different login sessions. The login sessions include different user interfaces with different user credentials such as usernames and passwords for identification and authentication of the user to access various applications. The user is therefore required to enter separate user credentials for logging into each application. This causes difficulty to users as the user has to remember and maintain different login details.

Conventionally single sign on tool exists that enables authorized users to perform single initial sign on to access a variety of applications across multiple nodes. For example the single sign on tool may include a web based single sign on tool. The user logs in once and gains access to multiple web applications without being prompted to log in again to access each application. However a user accesses multiple applications using different web based user interfaces via uniform resource locators URLs which are associated with each application. A single sign on solution that provides a unified view of multiple integrated applications and facilitates the user to access multiple applications using same user interface does not exist. Further there is no provision for one application to access a common context in another application in a seamless manner using same user interface.

In light of the above there is a need for a system and method which facilitates a unified view of multiple applications integrated in single sign on enterprise solutions. Also there is a need for a system and method that facilitates managing access to multiple applications using a unified user interface during user s logged in session without requiring to access the different applications via different interfaces. Further there is a need for a system and method which facilitates using common features across multiple applications without the need for modifying client device settings. Also there is a need for a system and method that provides a secured single point of authentication and authorization for accessing multiple applications.

A method for performing access management to facilitate a user to access one or more applications in a single sign on enabled enterprise solution is provided. In various embodiments of the present invention the method comprises performing data transaction between a server and a client for authenticating the user. The data transaction comprises firstly transmitting a challenge token and a response token between the server and the client. The challenge token and the response token comprises one way hashed data. The data transaction further comprises verifying the response token at the server and at the client using the one way hashed data. The method further comprises performing data transaction between the server and the client for authorizing the user to access one or more applications. The data transaction comprises transmitting a request for service token between the server and the client. The request for service token is encrypted at the client and decrypted at the server using a unique session key negotiated between the server and client. The data transaction further comprises transmitting a service token between the server and the client. The service token is encrypted and decrypted at the server using a secret key to verify the service token. Finally the data transaction comprises rendering the requested one or more applications on a user interface of the client based on the verification.

In an embodiment of the present invention performing data transaction between a server and a client for authenticating the user comprises firstly receiving at a client a first challenge token from a server wherein the first challenge token comprises a one way hashed random number. Secondly the method comprises receiving at a server a first response token from the client. The first response token comprises a one way hash of first challenge token and a one way hashed password of the user. The method further comprises verifying at the server the first response token based on comparing the first response token with hash of the hashed first challenge token and a one way hashed password. Furthermore the method comprises receiving at the server a second challenge token. The second challenge token comprises a one way hashed random number. The method also comprises receiving at the client a second response token. The second response token comprises a one way hashed second challenge token and a one way hashed password of the user. The method further comprises verifying at the client the second response token based on comparing the second response token with hash of the hashed second challenge token and a one way hashed password. Finally the method comprises authenticating the user based on the verification.

In another embodiment of the present invention the method further comprises firstly generating at the server a unique session identification associated with the user. The unique session identification is a random number. Secondly the method comprises storing the unique session identification in a database. In yet another embodiment of the present invention the method further comprises firstly creating at the server the unique session key after authenticating the user. The unique session key comprises at least one of a user identification a session identification and a timestamp. Secondly the method comprises encrypting the unique session key using the one way hashed password. Further the method comprises receiving at the client the encrypted unique session key. Furthermore the method comprises decrypting the unique session key using the one way hashed password and storing the decrypted unique session key in a memory associated with the client.

In an embodiment of the present invention performing data transaction between the server and the client for authorizing the user to access the application comprises firstly generating and encrypting at the client the request for service token. The request for service token is encrypted using the unique session key. Further the request for service token represents request for accessing one or more applications. Secondly the method comprises receiving and decrypting at the server the encrypted request for service token. The encrypted request for service token is decrypted using the unique session key. Furthermore the method comprises generating and encrypting at the server a service token corresponding to the request for service token. The service token is encrypted using the secret key. Further the service token comprises data for accessing the application. The method further comprises receiving at the client the encrypted service token. Further the method comprises receiving at an application server from the client the encrypted service token. The application server corresponds to the requested application. Furthermore the method comprises receiving at the server the encrypted service token from the application server and decrypting at the server the encrypted service token to verify the service token. The encrypted service token is decrypted using the secret key. Finally the method comprises rendering the requested one or more applications on a web based user interface of the client based on the verification.

In an embodiment of the present invention the request for service token comprises at least one of internet protocol address associated with a client and application name associated with the requested one or more applications. In another embodiment of the present invention the service token comprises at least one of an internet protocol address associated with the client a user identification a session identification and a unique name associated with the requested one or more applications.

A system for performing access management to facilitate a user to access one or more applications in a single sign on SSO enabled enterprise solution is provided. In various embodiments of the present invention the system comprises an authentication and authorization module configured to enable the user to access one or more applications via a unified web based user interface during a user s login session. The authentication is challenge response based user authentication and authorization is token based authorization. The system further comprises a feature switching module configured to facilitate the user to switch between one or more features provided in the web based user interface during the user s login session. Furthermore the system comprises a context switching module configured to facilitate one application to access one or more data pertaining to another application during the user s login session by invoking a script language instruction via the web based user interface.

In an embodiment of the present invention the authentication and authorization module comprises a SSO server module associated with a SSO server and a SSO client module associated with one or more client applications. The SSO server module is configured to initiate and complete challenge response based user authentication and token based authorization with the SSO client module to enable the user to access one or more integrated applications present in the single sign on SSO enabled enterprise solution.

A computer program product for performing access management to facilitate a user to access one or more applications in a single sign on enabled enterprise solution is provided. In various embodiments of the present invention the computer program product comprises program instruction code for performing data transaction between a server and a client for authenticating the user. The data transaction comprises transmitting a challenge token and a response token between the server and the client. The challenge token and the response token comprise one way hashed data. The data transaction further comprises verifying the response token at the server and at the client using the one way hashed data. The computer program product further comprises program instruction code for performing data transaction between the server and the client for authorizing the user to access one or more applications. The data transaction comprises transmitting a request for service token between the server and the client. The request for service token is encrypted at the client and decrypted at the server using a unique session key negotiated between the server and client. The data transaction further comprises transmitting a service token between the server and the client. The service token is encrypted and decrypted at the server using a secret key to verify the service token. Finally the data transaction comprises rendering the requested one or more applications on a user interface of the client based on the verification.

In an embodiment of the present invention the computer program product for performing data transaction between a server and a client for authenticating the user comprises program instruction code for receiving at a client a first challenge token from a server. The first challenge token comprises a one way hashed random number. The computer program product further comprises program instruction code for receiving at a server a first response token from the client. The first response token comprises a one way hash of first challenge token and a one way hashed password of the user. The computer program product comprises program instruction code for verifying at the server the first response token based on comparing the first response token with hash of the hashed first challenge token and a one way hashed password. Further the computer program product comprises program instruction code for receiving at the server a second challenge token. The second challenge token comprises a one way hashed random number. Furthermore the computer program product comprises program instruction code for receiving at the client a second response token. The second response token comprises a one way hashed second challenge token and a one way hashed password of the user. The computer program product comprises program instruction code for verifying at the client the second response token based on comparing the second response token with hash of the hashed second challenge token and a one way hashed password and program instruction code for authenticating the user based on the verification.

In another embodiment of the present invention the computer program product further comprises program instruction code for generating at the server a unique session identification associated with the user. The unique session identification is a random number. Further the computer program product comprises program instruction code for storing the unique session identification in a database.

In yet another embodiment of the present invention the computer program product further comprises program instruction code for creating at the server the unique session key after authenticating the user. The unique session key comprises at least one of user identification session identification and a timestamp. Further the computer program product comprises program instruction code for encrypting the unique session key using the one way hashed password. The computer program product further comprises program instruction code for receiving at the client the encrypted unique session key and program instruction code for decrypting the unique session key using the one way hashed password. Finally the computer program product comprises program instruction code for storing the decrypted unique session key in a memory associated with the client.

In another embodiment of the present invention the computer program product for performing data transaction between the server and the client for authorizing the user to access the application comprises program instruction code for generating and encrypting at the client the request for service token. The request for service token is encrypted using the unique session key. Further the request for service token represents request for accessing one or more applications. The computer program product further comprises program instruction code for receiving and decrypting at the server the encrypted request for service token. The encrypted request for service token is decrypted using the unique session key. Furthermore the computer program product comprises program instruction code for generating and encrypting at the server a service token corresponding to the request for service token. The service token is encrypted using the secret key. Further the service token comprises data for accessing the application. The computer program product further comprises program instruction code for receiving at the client the encrypted service token. Furthermore the computer program product comprises program instruction code for receiving at an application server from the client the encrypted service token. The application server corresponds to the requested application. The computer program product further comprises program instruction code for receiving at the server the encrypted service token from the application server. The computer program product further comprises program instruction code for decrypting at the server the encrypted service token to verify the service token. The encrypted service token is decrypted using the secret key. Further the computer program code comprises program instruction code for rendering the requested one or more applications on a web based user interface of the client based on the verification.

In another embodiment of the present invention the request for service token comprises at least one of internet protocol address associated with a client and application name associated with the requested one or more applications. In yet another embodiment of the present invention the service token comprises at least one of internet protocol address associated with the client user identification session identification and a unique name associated with the requested one or more applications.

A system and method for facilitating access management of multiple applications in a single sign on enabled enterprise solution is provided. The invention facilitates providing a unified view of applications. The invention further facilitates accessing multiple applications using unified user interface and allows switching between multiple applications in a single user session. Furthermore the invention provides challenge response and token based authentication and authorization for accessing multiple applications.

The disclosure is provided in order to enable a person having ordinary skill in the art to practice the invention. Exemplary embodiments herein are provided only for illustrative purposes and various modifications will be readily apparent to persons skilled in the art. The general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. The terminology and phraseology used herein is for the purpose of describing exemplary embodiments and should not be considered limiting. Thus the present invention is to be accorded the widest scope encompassing numerous alternatives modifications and equivalents consistent with the principles and features disclosed herein. For purpose of clarity details relating to technical material that is known in the technical fields related to the invention have been briefly described or omitted so as not to unnecessarily obscure the present invention.

The present invention would now be discussed in context of embodiments as illustrated in the accompanying drawings.

In an embodiment of the present invention the authentication and authorization module is a software module configured to allow users to securely access one or more applications in the SSO enabled enterprise solution in a single sign on session. The authentication and authorization module further comprises a SSO client module and a SSO server module .

In an embodiment of the present invention the SSO client module may reside in the one or more client applications which accepts user credentials. In an exemplary embodiment of the present invention the SSO client module may accept user credentials from an HTML web page. In another exemplary embodiment of the present invention the SSO client module itself allows users to input user credentials. The user credentials may include but are not limited to user identification id user password and user token. The SSO client module receives the user credentials and sends the user credentials to the SSO server module . In an embodiment of the present invention the password may be stored in the SSO database as a one way hashed password. The one way hashed password may be obtained by converting a password into a one way hashed password using known hashing algorithm.

In an embodiment of the present invention the SSO server module resides in the SSO server . The SSO server module facilitates initiating and completing a challenge response authentication mechanism with the SSO client module . In an exemplary embodiment of the present invention in a challenge response authentication mechanism the SSO server module generates a session identification id which facilates to uniquely identify a user s session. The session id is a random number created by SSO server module and stored in SSO database . In another exemplary embodiment of the present invention the SSO server module generates a challenge token also referred as server challenge token for the SSO client module . The server challenge token may include a one way hash of random number. In an exemplary embodiment of the present invention random number is generated using Java Secure random number generator. The one way hash of random number is obtained by hashing a random number using any known hashing algorithm. The one way hash of random number is then stored in the SSO database .

In response to the server challenge token the SSO client module in the client application generates a response token also referred as client response token for the SSO server module . The response token may include a one way hash of server challenge token and one way hashed password. The one way hash of server challenge token is obtained by hashing the server challenge token using a known hashing algorithm. The one way hashed password may be obtained by converting a password into a hashed password using known hashing algorithm.

In another embodiment of the present invention the SSO client module generates a challenge token also referred as client challenge token for the SSO server module . The client challenge token may include a one way hash of random number. The one way hash of random number is obtained by hashing a random number using any known hashing algorithm.

In response to the client challenge token the SSO server module in the SSO server generates a response token also referred as server response token for the SSO client module . The response token may include a one way hash of client challenge token and hashed password. The one way hash of client challenge token is obtained by hashing the client challenge token using a known hashing algorithm. The hashed password may be retrieved from the SSO database .

In an embodiment of the present invention the client response token is verified at the SSO server module and the server response token is verified at the SSO client module . The verification of server response token indicates authentication of user to enable access to one or more applications. In another embodiment of the present invention after authentication is performed the SSO server module creates a session key. The session key may include but is not limited to user id session id and a timestamp. The SSO server module then encrypts the session key with the hashed password and sends the session key to the SSO client module . The SSO client module decrypts the session key using the one way hashed password which is available with it and stores the decrypted session key in a memory. Any further communication between the SSO client module and the SSO server module is secured using the session key.

In an embodiment of the present invention the authentication and authorization module is further configured to authorize the user to access one or more applications after authentication using the client application . The user makes a request for accessing an application by invoking an application registered with SSO enabled enterprise solution via a web based user interface. The SSO client module is invoked by the web based user interface to initiate a service token request for accessing the application. In an embodiment of the present invention SSO client module sends a service token request to the SSO server module . The service token request includes details such as internet protocol IP address related to the client and application name related to the application and is encrypted using the session key. The SSO server module receives decrypts the request for service token and creates a service token which includes one or more parameters specific to the requested application. For example the parameter may include a unique name configured for accessing the application. The SSO server module then encrypts the service token using a secret key which may be any string known to the SSO server module . The SSO server module then sends the encrypted service token to the client application .

In another embodiment of the present invention the web based user interface invokes a Javascript Application Programming Interface JAPI to send the encrypted service token to an application server for receiving the application service. In an embodiment of the present invention the application server sends the encrypted service token to the SSO server module for verification. In an exemplary embodiment of the present invention the application server sends the encrypted service token to the SSO server module via Hypertext Transport Protocol Secure HTTPS . The application server can also send the service token to SSO server module using Transmission Control Protocol TCP Internet Protocol IP . The SSO server module receives the service token and decrypts the service token using the secret key. The SSO server module checks if the service token is valid and returns success or failure message to the application server . In an embodiment of the present invention the SSO server module validates by comparing service token details with service token verification details for a particular session. If the service token is validated application server renders the application web page on the client application .

Feature switching module is a software module configured to facilitate the user to switch between one or more features while accessing one or more applications using web based user interface without requiring to change client device not shown settings. In an embodiment of the present invention the feature switching module may facilitate switching between different calendar types such as Gregorian Hijri etc. during user s authenticated session. In an exemplary embodiment of the present invention a user may switch his calendar type while accessing one or more applications by selecting a particular calendar type. The web based user interface invokes a Javascript Application Programming Interface JAPI using the selected calendar type to switch between calendar types without changing client device not shown settings.

In another embodiment of the present invention the feature switching module may facilitate switching between different timezones during the user s authenticated session. In an exemplary embodiment of the present invention a user may switch his timezone while accessing one or more applications by selecting a particular timezone provided as a list in the user s web based user interface. The web based user interface invokes a Javascript Application Programming Interface JAPI using the selected timezone to switch between timezones without changing the client device not shown settings.

In yet another embodiment of the present invention the feature switching module may facilitate switching between different entities during the user s authenticated session. In an exemplary embodiment of the present invention a user may switch to an application corresponding to a different entity by selecting the entity provided as a list in the user s web based user interface. The web based user interface invokes a Javascript Application Programming Interface JAPI using the selected entity to switch between different entities. For example in a multibank environment where there are legal banks or branches of same bank with corresponding timezones and currencies a user can switch to an application in another bank within the same authenticated session without requiring to re enter the user s credentials.

Context switching module is a software module configured to facilitate one application to utilize services of another application during user s login session. In an embodiment of the present invention when the user accesses an application during the user s login session the user may access one or more common services provided by one or more other applications. The web based user interface facilitates context related to the service to be transmitted between one or more applications during the user s login session. In an embodiment of the present invention one application passes context to another application during a user s login session via a context exchange Javascript Application Programming Interface JAPI of the web based user interface.

In an embodiment of the present invention the context exchange JAPI may include a link in a first application of a primary web page. The link in the first application references a context in second application of a secondary web page. The link is enabled to access a javascript in the web based user interface. A check may be performed to determine if the user is authenticated to access the second application. If it is determined that the user is authenticated to access the second application then the second application is retrieved. The web based user interface invokes a JAPI in second application with required context data. Data relates to context that is common in second and first application. In another embodiment of the present invention if it is determined that the user is not authenticated to access the second application then challenge response based authentication is initiated as described above and with respect to .

In an exemplary embodiment of the present invention the applications may include banking applications which are viewed via the client application of a single sign on enabled enterprise solution. One application may include a CRM application and the other application may include a core banking application which comprises one or more banking customer s profile information such as account identification id of the user. The CRM application may include a list where account id of one or more customer s accounts with the bank is displayed. Details of this account may be maintained in the core banking application. A user may access the CRM application web page and use the context exchange JAPI to retrieve users account related details available in the core banking application. The context exchange JAPI includes user s account id link. The account id link references a context in core banking application. In an example when user enables the account id link the link invokes a JAPI in the web based user interface to access the core banking application service and the web based user interface checks if user is logged into core banking application. If the user is logged in a web page corresponding to core banking application is displayed from which details corresponding to the user s account can be fetched and displayed.

In an embodiment of the present invention if volume of context data is less context switching is user interface UI based context switching which is performed via javascript. In another embodiment of the present invention if volume of context data is large and a huge amount of context data is passed from one application to other then context switching is server based context switching. Instead of passing context data through javascript application servers call SSO server module to store context data and retrieve context data from SSO database .

At step a server challenge token is generated. In an embodiment of the present invention session identification id is generated. The session id is a temporary identification associated with the user which facilitates the user to uniquely identify the user s session. The session id is a random number which is created by SSO server module and may be stored in SSO database.

In another embodiment of the present invention the server challenge token is generated by a SSO server module. The server challenge token comprises details such as one way hash of random number.

The user inputs user credentials in a web based user interface. The user credentials may include user identification id and password. In an exemplary embodiment of the present invention user id is validated against the user s user id which may be pre stored in SSO database. In an embodiment of the present invention the password is hashed using any known hashing algorithm and the one way hashed password is stored in the SSO database. If the user identification is determined to be valid a one way random number which constitutes the server challenge token is created for the user s login session and hashed using a known hashing algorithm. The hashed random number is stored in the SSO database. The SSO server module sends the server challenge token to a SSO client module.

At step a client response token is generated. In an embodiment of the present invention the client response token is a response to the server challenge token and is generated by a SSO client module. The client response token comprises details such as a one way hash of server challenge token and hashed password. The hashed password corresponds to the user and is generated by hashing the password with any known hashing algorithm. The client response token is received and verified by the SSO server module. In an embodiment of the present invention the verification may be performed by comparing client response token with the hash of combination of the hashed server challenge token and hashed password which is stored in SSO database.

At step a client challenge token is generated. In an embodiment of the present invention the client challenge token is generated by SSO client module. The client challenge token comprises details such as one way hash of random number. One way hash of random number is a hashed random number which is created using any known hashing algorithm. The client challenge token is sent by the SSO client module to the SSO server module.

At step a server response token is generated. In an embodiment of the present invention the server response token is a response to the client challenge token and is generated by SSO server module. The server response token comprises details such as a one way hash of client challenge token and hashed password. The hashed password is retrieved from SSO database. The server response token is received and verified by SSO client module. The verification may be performed by comparing server response token with the hash of the hashed client challenge token and hashed password already available in SSO client module. The user is thus authenticated to enable access to one or more applications of the SSO enabled enterprise solution.

In various embodiments of the present invention a session key is created. In an embodiment of the present invention after authentication is performed session key is created by the SSO server module. The session key may include but is not limited to a user id and session id which is retrieved from the SSO database and a timestamp. The session key is stored in the SSO database. Further the session key is encrypted with the hashed password stored in SSO database and sent to the SSO client module. The session key is decrypted by SSO client module and stored in memory for secure communication between the SSO client module and SSO server module.

At step a request for service token associated with an application is generated. In an embodiment of the present invention SSO client module sends a service token request to the SSO server module to access an application. The service token request comprises details such as but not limited to Internal Protocol IP address and application name corresponding to the application which the user wishes to access. The SSO client module sends the service token request which is encrypted with the session key to the SSO server module.

At step a service token associated with requested application is generated. In an embodiment of the present invention the SSO server module receives and decrypts the service token request using the session key to retrieve details i.e. application name in the service token request for identifying the application requested by the user. The SSO server module then generates a service token. The service token comprises details such as client IP address user id session id and a unique name for the application. In an embodiment of the present invention the service token is encrypted with a secret key which may be any string known to the SSO server module. The SSO server module sends the encrypted service token to the SSO client module. In another embodiment of the present invention the secret key is used for encrypting service tokens during different sessions.

At step application associated with the service token is rendered on a user interface by retrieving the service token. In an exemplary embodiment of the present invention the application server renders on the web based user interface application specific pre login page with corresponding javascripts. The web based user interface invokes login application javascript in the application pre login page and passes as inputs to the application javascript parameters such as user id session id and encrypted service token received from the SSO client module. Application javascript passes the parameters to the application server. The application server sends the encrypted service token to the SSO server module for verification along with other details such as but not limited to user id and session id. The SSO server module decrypts the service token using secret key verifies the details in service token with service token verification details for a particular session and sends success or failure message to the application server. In an embodiment of the present invention in case of success the application server renders the main application web page on the web based user interface.

In various embodiments of the present invention the system and method facilitates performing authentication and authorization management of a different user during a user s login session without creating a separate session. In an exemplary embodiment of the present invention in a banking scenario the invention facilitates an authorizer or manager to authorize a transaction at a teller s terminal without additional overhead of creating a separate session. Further the invention facilitates integration and seamless functioning with third party SSO enabled solutions without determining credentials of the third party SSO enabled solutions.

The present invention may be implemented in numerous ways including as a apparatus method or a computer program product such as a computer readable storage medium or a computer network wherein programming instructions are communicated from a remote location.

While the exemplary embodiments of the present invention are described and illustrated herein it will be appreciated that they are merely illustrative. It will be understood by those skilled in the art that various modifications in form and detail may be made therein without departing from or offending the spirit and scope of the invention as defined by the appended claims.

